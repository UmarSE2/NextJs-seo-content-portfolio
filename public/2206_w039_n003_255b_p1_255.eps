%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 26.3
%%For:  
%%CreationDate: 6/10/2022
%%BoundingBox: 0 0 750 400
%%HiResBoundingBox: 0 0 750 400
%%CropBox: 0 0 750 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.3.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.3.1 x1103 R agm 5.512 ct 6.513%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 68 8%%BeginData: 7819 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDA5FFA8A8FF7DFD12FFA8A8FD04FFA87DFD62FFA8
%7DFFA8A8FD07FFA8FD08FFA87DA8A8FFA8FFA8A8A8FD5FFFA8A8FFA8A8FD
%05FFA87B7D759F7CFD05FFA8A8FD057DA87D7D7DA87DFD23FFA852A8FD38
%FFA8A8A8FD05FF7C7C7BC79EC7CC9F7DFD06FFA87DA8A8FFA8FFA8A8A8FD
%0BFFFD0FA8FD0BFF7DFD3BFFA8A8FFFFFFA87BC6FD06C7A47BFD06FFA8A8
%FD05FFA8FD0CFF7D7DFD0DA87DFD4AFFA87BA5CCC7CCC7CCC7CCC77CFD1A
%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A87DA8FD38FFA87DFD10FFA826C7C77B
%517B7AC79EC751FD15FFFD06A87DA87DA8A8FFA8FFA8FFA8FFA8FD06FFA8
%A8FD32FF7D7DFD11FF7DA4A0A8FFA8A8767C9F7CFD15FF7DFD08F852FD0F
%FF7DFD46FFA19E7DFD05FFA87DFD10FFA852A8FFFFFF7DF8F827F827F827
%F87DFD0EFFA8A8FD0EFF7DFD38FF52A8FFA8FFA8A8A87EFD0FFFA87D7DFD
%0DFFA9FFAFFFA9FFAFFD08FFA87DFD07FFA8A87DA8A8A87DF852FD36FFA8
%7DA7FFA8FF7DA8FFA8A8FFFFFFA87DA8FD07FFA87D5252FD0DFF7C749F7B
%7B759F75FD07FF7DFFA8A8FD06FFA8FFA8FFA8A8F87DA8FD27FF7DFD0EFF
%7C7CFFFFFFA87DFF7DFD05FF7DFD08FFA87D5252A8FD0CFF7BC79FC79FC8
%9FA0FD06FFA8A8FF7DA8FD31FFA8FD047DF852FD067DA8FD07FF52FFFFA8
%7DFFFF7DFD0EFF7DA827527DFD0DFFA8FFA9FFA8FD0AFFA8A8FFA8A8A8FD
%30FFA8FFA8277DFFFFFFA8FD0AFFA87DFF7DFFFFA8A8FD0DFFA8A8FFFF7D
%A8FD1EFF7DA8FD45FFA87D7DFFA87D7DFD0EFF7DA8FF7DA8FD27FFA8A8FD
%08FFA8A8FD33FFA8A8FFA87DA8FD0EFFA8A8FFA8A8FD27FF27F8F827FD07
%FF517CFD2FFFA87D525252FFFFFFA85252A8FD0CFF7DFFFF7DFD06FF7DA8
%FD07FFA87DA87DFD04A8FFFD05A8FFA8FD08FF52FD04F852FD05FF7D9F74
%7DFD15FF7DFD0DFF7DFD08FF7DFD05F827FD04FFF8F8F8277DFD09FF7DFF
%FFA87DFD07FF7DA8FD06FF7DFFA8A87DA87DA87D7D7DA87DA87D7DFD04FF
%A87D527DFD05F852FD06FF7C7CFFFFFFA87DFD10FF7D2727527DFFFD05A8
%FF7D5252527DFD05FFA827FD08F82727FD06F827FD07FF7DA8FFFF7DA8FD
%06FFA8FF7DA8FD04FFA87D7DA8A8A87DA87DA87DFD05A87DFFFFFF27FD09
%F852FD06FFCAA8FFFFFF524BA8FD10FF7DA8A8FFA8FFA8FFA8FFA8FFA8A8
%7DFD06FF52FD13F87DA8FFFFFFA87DFFFFFFA8FD07FFA87DFD05FFA85252
%FD0BFFA8FFA8A8FFFF52FD09F827FD09FFA8FFFFFFA8FD11FFA852FD0BFF
%7DA8FD05FFA8FD16F82752527DFFFFFFA87DFD08FFA8A8FFFFFFA87D527D
%7DFD0DFF7DFFFF27FD08F827FD05FFA8FFFFFFA87D7DFD15FF7DA8FFFFFF
%A8FD05FFA8A8FD06FF52FD17F827F852FFFFFF7DFD0EFFA8A8FF52277DFF
%FFFFA8FD07FFA8A8FFFF7D7D5252FD0427F827FD05FF7D76FFFFFF7DA87D
%FD14FF7DA8FFFFA87575A8FD04FF7DFD06FF27FD07F827FD07F827F827FD
%07F852FFFFA87DFD0EFF7DFFA87D52FFFFFFA8F827A8FD05FFA8A8FF7D52
%A8A8FFA8A8FFF8F8F8FD05FF5051A8FFFFFF522727FD13FFA8A8FFFFFF9F
%CC7452FFFFA8A8FD06FFFD05F852F8FD042752FD0827FD07F8A8FFA8A8FD
%0EFFFD04A8FD05FFF8F8F87DFD04FF7DFFFF7D7DA8527DA8A8A827F827FD
%05FFA77DFD05FF27F827FD12FF7DA8FFFFA87575A7A8FFFFFF7DFD05FFA8
%FD04F82727FD0CF827FD05F827F8F8F85252A87DA87DFD04A8FD07FFA87D
%7DFD05FFA8F827A8FD05FFA8A8FF7D7D52A87DFFA87D27F852FD0DFF52F8
%27FD11FFA8A8FFFFFFA7FD05FFA8A8FD05FF7DFD05F852F8FD0527F8FD05
%27527D525227FD05FFA8FFA8A8A8FFA8FF52FD09FF7D7DFD06FFA8FD07FF
%7DFFFFA8FFFFFFA87D7DA8A87DFD0FFF52F8F8FD0FFF7D52FD0BFF527DFD
%04FF52FD04F82727FD08F827F8F8F87DFFFFFFA8FD0CFFA8A8FD09FFA87D
%FD0DFFA8A8FFFF7DFFFFA87DA8FFA8F852FD10FF7DF8F8A8FD0DFF7D7D7D
%A87DA87DA87DA87DA87DA87DFD04FF52FD04F82727FD0CF87DFFFFA8A8FD
%0CFFA8FD0AFFA8FD0FFFA8FFFF7D52FD05FF27F8F8527DFD0FFF7DF827FD
%0CFFA852527D7DFFA8FFA8A8A8FFA85252277DFFFFFF2727F8272752FD09
%F87D7D52F8A8FFFF7DFD05FFA87DA8FD04FFA87DFD0AFFA8A8FD0BFF7D7D
%52A8FFA8F8F827A8A8A827FD06F87DFD0EFF7DA8FD0DFF7DA8A8FD09FFA8
%A852FFFFFFA8525227F85252FD042752527D7DFFFFFF5252A8FF7DFD05FF
%A87D7DA8FD04FF7DFD0BFF7DFD04A8FFFD05A8FFA8A8527D7DFF7DF8F8F8
%7DFFA852FD07F8FD07FF7DA8FD27FF272752A8A8FD09FFA8A82752F87DA8
%7DFD06FF7D7DA8FFFFFF7DA8FD0AFFA87D7DA87EA884A87DA87DA8A8A827
%7DA8FF7D7DF8F8F8FFFFFF27FD07F8A8FD05FF7DA8A8A8FD26FF2752FD09
%FF7D7D2727F827F827FFA8A8FD0CFF7DFD0CFFA8A87D7CA0A7A67C7DA87D
%A8522852AFFFA8519F50A8FFFFFFA9519F4A26F8F8F8FD07FF7D7DA8FD26
%FF27A8FD04FFA87D5227FD08F852FF7DFD0CFFA87DFD0FFF7CA4C6C79E7C
%FFFFAFAF7D7C51AFFF7CC7C77CFFFFAF76C7C7C79E26F8F8F8A8FD06FFA8
%FD1DFFA87DA8FD07FFA87DA8A87D2727FD06F8277D527D7DA852A8FD04FF
%A8FFFFFFA8FFFFFF7DFD06FF5227FD09FF7BCCC7CC9F7C7CA07BA5C6C77C
%FFA87BC7A57BA17BC7C7CCC7CCA527F8F852FD23FFA87DFF7DFD09FFA8A8
%FD09F827527D5252FD057DA8A8A87DA8A8A87DA87DA8FD06FF5252FD09FF
%7D9EC7A5C79EC7A4FD04C79F7EFF757BA5C79EFD04C79F9ECC50F8F87DFD
%24FFA87DFD0BFF7DFD0EF8FD21FFA99FC7CCC7CCC7CCC7C7C7CDC77C7D9F
%C77B9FCDC7CCC79F7BC7C7C7F852FD32FFA82727FD0BF87DFD22FF7D9EC7
%CCC7C7C7CCC7C7C69F74749ECCC77B7ACC9F7B9ECCC7C79E7CFD36FFA87D
%522752272727527DFD25FF7C9F9EC79FA59EA59F7C7BC774CCC7CCC79F74
%9FC7CCC7CCC79FA7FD05FF7D7DFD5FFFA8A87DA77DA8A8AFA89FC79F7AC7
%A5FD09C775FD06FFA8A8FD22FFA8A8A8FFA8A8A8FFA8A8A8FFA8FD11FF7D
%FD04A8FFA8A8FD08FFA8FFA8FFA8FFA8FFA8FFA8FD0DFF7BCCC79F9FCDC7
%C7C7CCC7C7C7CC75AFFD28FFA87DFFA8A8A8FFA8A8A8FFA8A8A8FF7DFD07
%FFA8FD07FFA8FD067DA87DA8FD07FF7D7DA87DA87DA87DA87DA8A8FD0CFF
%7D7ACCC7759FCCFD06C74AA8FD29FFA8A8A8FFFD0CA8FD06FF7DFFA8A8FD
%06FFFD06A87DA8A8FD07FFA8A87DA87DA87DA87DA87DFD0EFFA0C6CCC77B
%A5CCC7CCC79F747CFD25FFFD08A87DA8A8FFA8FFA8FFA8FFA8FFA8FD05FF
%A8A8FF7DA8FD0DFFA8A8FD04FFA8FFA8A8FD18FFA1C7C7C79F759EC77A7B
%9EC77CFFFFFFA87DA8FD20FFFD08F827FD12FFA8A8FD0FFFA8A87DFFFF52
%FFFF7DFD11FF7DFD06FFA7A4CCC7CCA59F7BA5C7CDC7A7FFFFFFA87DA8A8
%FFFFFF7DA8FD19FFA827F827F827F827F852FD12FF7DFD0FFF7DFF7D7DFF
%FF52FFA8A8FD11FF7DA8FD05FF7CFD06C7CCFD04C7A1FD04FF7D7DA8FFFF
%7DA8FD36FF7DA8FD07FFA8FFFFFFA8FFFFA8A8A87DA8A87DFFFFA8FD18FF
%A6C7C7C7CCC7C7C7CCC7C7A4A7FD05FF7D52A87DA8FD29FFA87DA8FD09FF
%A87D7D527DFD05FFA8A87DA87DA87DFF7DFFA8FD047DFFA87D7DA87DA87D
%A87DA87DA8A8FD0DFF7BFD0BC77BFD06FF7DA8A8FD2BFF52FD0AFF7DFFFF
%A8FD07FF7DA87DA87DA87D7DA8FFA87D7DA8FFFF52A87DA87DA87DA87DA8
%7DFD0DFFA8A5C7CCC7CDC7CCC7CDC7CCC7A6AFFD05FF7DFD37FFA87DFD0B
%FFA8FFA8FFA8FFA8FFFFA87DA8A8FFFFFD09A87DA8A8FD0CFFA174C7A5C7
%9FC7C7C7A5C7A5C774FD06FFA8A8FD36FF7DFD15FF7E7D52A8FD1AFFA87C
%759F7A9F9E9F9E9F7A9F7A7BA8FD05FF7DFD32FFA8FFA8A87DFD16FF7576
%7C50FD19FFCFFFFFFFA8A87DA77CA07CA77DA8A9FFFFFFA8A87DA8FD33FF
%A8A8A8FD16FF7C9EA8A8A551A8FD28FFA87DA8FD4DFF76757BA8FF757C4A
%FD0FFFA8FD15FF7D7D7DA8FD42FF7DA8FD0BFF51A751FFFF7C7675A7FD07
%FFA8A8FD05FFA8A8FFFFFF7DA8FD0EFF7DFD46FF7DFD0CFF7C26A7FFFFA8
%7676FD06FFA87DA87DA8A8A87DA87DA8A8A87D7D7DA87DFD6EFFFD05A8FF
%A87DA8A8A8FFA8A87DA8A8A8FD6FFFA8A87DFFFFFFA8FF7DFFA8FFA87D7D
%FD7EFFA8FDFCFFFDFCFFFDB1FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.cb7c5a1, 2022/04/14-05:22:35        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
   xmp:ModifyDate="2022-06-10T15:19:16+09:00"
   xmp:CreateDate="2022-06-10T15:19:16+09:00"
   xmp:MetadataDate="2022-06-10T15:19:16+09:00"
   xmp:CreatorTool="Adobe Illustrator 26.3 (Windows)"
   xmpMM:DocumentID="xmp.did:9f737e7f-de79-e54d-a287-aefd66c327b1"
   xmpMM:InstanceID="xmp.iid:9f737e7f-de79-e54d-a287-aefd66c327b1"
   xmpMM:OriginalDocumentID="uuid:11571bd5-2104-4f08-856d-3b1328b858e8"
   xmpMM:RenditionClass="proof:pdf"
   dc:format="application/postscript"
   pdf:Producer="Adobe PDF library 16.07"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   illustrator:CreatorSubTool="Adobe Illustrator">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="140"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAjAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYqlV/rMmn6vZwXUYXTb79zFegn93dlvgik7ATA0jb+YcerLiqtokuoyWs36QUrcJd3SJtQGAXD/&#xA;AFcigFf3HDfxxVUu9Y0izuYLW8vre2uro0tYJpUSSU1ApGrEFtyOmAkKl+k+dfK+r3xsdO1BLi54&#xA;GWNQrhZY1IDPDIyhJVFd2jJGVwzQkSIkEjmyMCNyE7y1ixbzr5zXRNOvRaKJNRhtLuaPkDwjkt7O&#xA;S6TmNuQb06UBxVFSec9LS21BiaXmnpPI1mSQXWGS6ROLkcayfUJTQVIA391VK982eh5hjsYgs1r6&#xA;YSUUKus73kFr1PZRPXpv44qnun3sN/YW19CGEN1Ek8YYAMFkUMKgE70OKq+KuxV2KuxV2KuxV2Ku&#xA;xVDxalp819PYRXMUl7aqj3NsrqZI1kqULoDVeVNq4qiMVdirsVdirsVdirsVdirsVdiriQBU7AdT&#xA;irgQRUbg9DirsVUb2ytL61ktbuJZreSnONtwaEEfSCKg4qgtM0RrB5Y/rk13p7cGgtbtvXaF0PKq&#xA;TyVlZSaECQsVPQgbYqxn8yPNJtJ9N8sWkpt9S1tuS3AleArb28iPcLG8as4kki5KpBWnXkG411na&#xA;2sODCZC7rmOnn83I02LjmAx2PTvLyz6hp9zN9duLmBHvIL6ZrqT6p8UaITOXf0QVegJoCW8c8/z6&#xA;zUZeHJIn07A+fP5u5hihG4hG3FhbSw2skDyW72J9WwntG4PGfTaMcKfCwMbleLAqfDK9LrMuDJxw&#xA;NS62yyYozjR5Mx8javd6v5U07ULxudzMjCR6BGYxu0dZEXaOQhf3iD7LVXtnqWCZljjI1ZHTl8Hn&#xA;piiQt82eUbPX9Nu4QRb3s1tdQRXAAoGubZ7blIBu4VZNhXLWKMPlzSjZ3tt6VPr6zJczgL6xSd5Z&#xA;CvOlaK1zJwHbkfE4qh7zyvb3OuRaiSI4kiCvFGoVmmS6iuVcnv8AFAA3jiqbWlrBaWkNpbrwt7eN&#xA;YoUqTxRAFUVJJNAO+KquKpZ5mbVk0C/bR+X6TELfVOARm502KiSqFh25bYqx30da/wCr35k/6RNK&#xA;/wCyLFXejrX/AFe/Mn/SJpX/AGRYq70da/6vfmT/AKRNK/7IsVROhf4iTzFEkt5qd5pLWdw1w2pQ&#xA;WUQS4WWAQCM20Nux5I01a1G2KspmmhgiaWaRYokFXkchVA8STtiq/FUHb6PpVtqFzqMFrHFfXnEX&#xA;VyqgPJxAA5H5KPuHhiqMxV2KuxV2KuxV2KuxV2KuxV2KoXVtLsdW0u80rUI/Wsb+GS2uouTLyilU&#xA;o68lKsKqeoOKu0nS7HSdLs9K0+P0bGwhjtrWLkzcYolCIvJizGijqTiqKxV2KuxVhn5k6VHNHo+r&#xA;R2Yu77TrxY4VHAOyXf7oxq0jJGOU3osOTAclXfNd2po5ajCYRNS6N+nyiE7PJS8v+UvLVz5a0D9P&#xA;aKL/AFC9jjubhtQtvrEqXU1sJJjN6gcQ/wB3w4mighVHbMvBgjigIRAADVOZkbKUX3lXy5b24v8A&#xA;QP0jpyQXn1esMxNnDCuoLZ3cMdvL60CqPjkQCOooKEKAuY2o7L0+YHigLl15H5tkNROPIs98uaBp&#xA;/l/RLXR9PDfVbRSFaQ8ndnYvJI5AA5O7FjQAVOwAzMhARiAOQaibNpiHQsyhgWXZgDuCRXfJobxV&#xA;Qv7+z0+zmvb2ZYLWBS80zmiqoxVi/kvzRqvmLWNZnb0odHsXS0gtAK3CXAHORbg1qsioyckp8JYo&#xA;fiRsVSz88Py61/z95SttG0PU00q7gvo7t7l2kUGNIpYylYvi3MoP0Yq8M/6FE/NP/qc4P+Rl5/TF&#xA;Uf5f/wCca/PXlTzDpHmXW/O1mmk6Pf2l5e+tPcRo0UM6OyFpeKDnTiORpU4CaV9C/wDKxvy9/wCp&#xA;o0n/AKTrb/mvBxx700UVpvnLyhql2tnpmuaffXbglbe2uoZpCFFSQiMzbDESB6rSb5JCQ+dCsulQ&#xA;6Zx9SXVrqCzWKtCY2kElwRT+S2jkf6MVTwSRs7RhgXShdARUA9Kj3piqneXkVpCZpVkZAQKQxSTv&#xA;v/kRK7fhiqVR+arVriZHs75IU4+lL9RvTzqKt8IgqvE7b4qw/wA0fndY6B5t8q+XZNHvJX8yM6TT&#xA;NFcRNbFeAHCJ4OVx8T78KU+nFXotneRXcImiWRUJIpNFJA+3+RKqN+GKq2KuxV2KuxV2KuxV2KqN&#xA;494lrI1nFHNdAfuoppGhjZvBpFSYqPcIcVY5PefmWhuZY9J0l19EC3txqVxUSrzJbkbAcudVFDSl&#xA;PfFWH/lD5h/O/VfJtvdeZ9Jtv0mtzMsjalJLpdzJEK8OVtHZSKoBOzClQOncqs3S8/MMM5bSNJZW&#xA;aqD9KXA4jiBT/jnb7gnFWRCtN+vfFUFrej2GtaReaTqEfq2V9E0E6bV4uKVUmtGXqp7HfARasU8n&#xA;atJa+UbjSIPU1HVvL8s2mywWixJNwimeKCZIriSNOHpANTmRsVFSKYIxoAJJa1Kxnt9CuNJnuRc6&#xA;v5nu1eK3hiNv6ayCJZ5FiaScokSI0shL0Lk92UZJDOcVS6w0DS7HU7/U7aIpeamYzeSFmIb0gQlF&#xA;JoKcj0xVMcVYb54sbnXb5dEtgszWmn3WoiJwGiW+qsWmGdH+CRC/ruEf4eUYJ+yMVYr+VHlDWPL/&#xA;AJv1SA3Vvd2sUZS/ubOiwmZnMkcTxmNfSlX1HYRQvwjTiCtW5Mq9cxV2KoHW9Ih1fTXsJZpIEd4p&#xA;BNDw9RWhlWVaeosi/aQVquVZsMckDCXKQplGRibCSf4DT/q96h91l/2TZp/9Dmk7j8y5X57J3q+n&#xA;+S4LTUba+fUry6e0Zniim+rBOTxtFU+lDG32ZD+1mVo+yMGnnx4wbqubVl1M5iiyLNm0Jdf6U0l2&#xA;dTtmDanDbSW9gJyxt4mkIZnKJQksVXlvWgoONTVVJ7BrjSpJ9L0mzl1bVWcT6vql0wtYGnkUNWSY&#xA;I5ZuHEIkMbBF4qeIpirKF5cRyADU+IA1APsaDFW8VQd3o2kXl7aX13Y29ze2BZrG6liR5YC4AcxO&#xA;wLJyAFeJ3xVFu6IjO7BUUFmZjQADckk4q3irsVdirsVdiqB1zXNL0PTLjU9UuEtrO2R5JHcgEiNC&#xA;5Cj9puKmijc4qvs9X0m9kaOyvYLmRRyZIZUkIHSpCk7Yqi8VdiqFttUs7i/vLCJibmx9P6ypBAHr&#xA;LzSh6GoGKorFWG/mJ+bvkT8vrdH8xX/p3cyF7bToFMt1KoNKrGKBVqD8TlV261xV4pq3/OcOjRzy&#xA;LpPlS4uoBtFNdXaWzH3MaR3AH/B4q9Y/LXUPKHnfybYa6ZrW8vi9xeTyQSFLiwku7iS5e29VfTmj&#xA;9L1OFduQHLoRirzm8/5yN/L3yB521XQ5tMbU1WVmn8x6dOl5NL6jNKkEhm4M3oK4j/vmoQe9Rir2&#xA;LyF+Zvkvz5p73nlrUVujDx+tWrAx3EJYVAkiajAdgwqp3oTirKcVQmr6ra6Vp09/dcjFCB8EY5SO&#xA;7EJHHGv7TyOwRF7sQMVY3LHqmkeW7m6kKL5p16aONnT41iurorBCi7DnFaR0PQcgjNsWOKsk0jSr&#xA;HSNMttNsI/StLSMRxJ1NB1LH9pmO7MdydziqlrV5qllAlzY2f1+ONibu2RuM5iofigr8DuD+wxWo&#xA;6GuxVRGn6hZ6hZQ3tnKJradeUcgBG3QgggMrA7FSKg7HfFUPr2qtpemm7SH15DLBBFEWZQXuZ0gS&#xA;rKsjABpATRT8sVSNfNfmcIobQkaZuH7uKS/IAlJCkvLp8KinH4h+ztWlcVd/j1kLNPpFwlukZlaU&#xA;PEtAJTCarO0B2cU/Hpiq1/zHtI4Xkl0u4iZGdWhe70hXHpGkhNb7jRT13xVHad50sL7VY9NW1njm&#xA;kLqJOVvNEronqFHe3mm4tx3o2Kppq2s6Ro9i9/q17Bp9jFT1Lq6kSGNSegLuVG/bFXl3nf8A5yS/&#xA;LrTvKesXnlvXLLU9etYGNhZcmAeYsEUjkFDhOXMqpqQNsVfIEX53/m5HrA1ZfNmpG6Enq+m1w7W5&#xA;PLlx+rEmDhX9jhx9sVffv5f+ZZPM/knQ/MMsYhm1OzhuJolBCrI6DmFqSePKvH2xVCfmbFq0/k/U&#xA;LeyjR7OaCVNY3b6x9RMTCcWqqKNMy7LyYU67mgyjU8fhngrira2eOrF8l/5ay63N5QsZdVZXV0Da&#xA;bIa+u9iVU2zXQ+z65T7fHb5Gow6czMBx1xVvSJ1Zrkmmk+ZdE1e81Kz0+6Se40qf6teopFVfiG28&#xA;VqSnLpzVl6qctEgeXRFJnhQ7FXYqx/z95bt/MXlDVdLeygvrma0uBYR3CI6rdNC6ROpkBCMC+zds&#xA;VSTyP5L8sLb3mp29gllfSX+p2rzWLPZ1gt9Rmhij427RLxVIkHTelTvirIYdN0Ge6uLSG+uJbq0K&#xA;C7t01G6aSIyLyT1EE1U5LuK9RgtVmpeSPLeqW31XU4Jr615BvQubq5mj5DoeLyMKjCrFvyk8pWNn&#xA;axeYBplnbzanpmmPDdQQwxyMxtFNwf3aqV5yGp8cVZr5k12z0Dy/qWuXlTa6ZazXcyggMywoXKrW&#xA;g5NSg98Vfmp5v81ax5r8x3/mDV5jNfX8pkckkqi9EjQEmiItFUdgMVSfFWwzAEAkAihp3GKtYqmn&#xA;lzzNr/lrVodX0K+l0/UYDWOeFqGld1YfZZT3VgQe+KvoTyb/AM5oeala3sPMOh2epTSGOFL2GdrH&#xA;4iQvqTVS4Tfq3EKB4Yq9y/LLzkfzNV/MNxZHTbTQL2axj0tpPVJv40X1LiRuMdQkcwWNeOxLMd+P&#xA;FVldxW/85W0ANbfRLdruUf8AL1d8oIKEd0gWfkP8tTiqf4qluq6XfXMiXFhqU2n3MYoAqpNbyCtQ&#xA;JYZAaiveNkftyxVF2tjZ2nrfVolhFxK08wQUDSvTm9OlWpU+J36k4q8q/NHU/Md+kUkN0ln5Wg1A&#xA;2s8aF1urqW0PImOQQXCIVuEKqHAX92xPLkoVVkv5c3nk3zX5WW/sdKQRBzaXZurdC0s0AAdzIUUT&#xA;gk19Sm5r0NQFWQ2+meU7id0t7SwluNPYQyLHHCzwMVDBGAFYzxYGm22Kqv8Ah/TBG0cazQI55MIL&#xA;ieHf/nm64qlv1KCPztY+kZX9DTboyCWWSYKZJrdYmX1C/FiEkBIIr3r2VfNX/OU+i/mB5r8+rp2k&#xA;tFqelaZbw/VtJspw86TTB2b1bdipa4fgxVY+R9JQdt8VfP8AeeRvOtldLaXnl/Ure6bZYJbSdHPy&#xA;VkBOKsh/JTyFo3nf8xrHyxrdzcWcFwsr0t0UyO1uhlaIs5/d1RG+Li2+1N6hV+h2mabY6Zp1rpth&#xA;EILGyhS3tYFqQkUShEUVqdlFN8VQOg+aNF8wNqcWnyer+i7uSwu1PH+8jA5EAE1Q1oD3ocjGQPJJ&#xA;CQ3Hn5tK1i8ttUt0t9LsWCzmMP61rbt8MF3IpHGW2lIIMkX90fhf9spJCfaD5Z8u6RNfX2kWsULa&#xA;tKLm4liAo1UAAQjpGaF+I25MzdWOREQOXVJKb5JDsVdirsVY/wCRv+OLc/8AbV1j/uq3OKsJ1/yh&#xA;rmrecdYey0f0ZWuYpLTzJLMbX0kNlbRt6Elu31tzyRqovFGpQuM0eo7Pzz1XiQnwQofH4cvi5cM0&#xA;Bj4SLL0by9Yanp+jWtnqmpNq9/CpWfUXiSBpTyJB9OP4VoCF+jck5uwNt3EKX/l5/wAoB5Z/7ZVj&#xA;/wBQyYVYD/zlbrSab+S2qwkkSapNa2URBpuZhM3/ACThbFXwTirJ9bsLmHzZq9lp2npcpYzPZvbJ&#xA;Dz2grCXCKA6kmPkWWhr1xVQez1D05mPlYIqsEaT07/8AdMKArvNSp/ysVXLp+oxALPoFvaOpNJr1&#xA;p7cFutP9InSNqeFPniqbr5B86eYvL9lqWh+X5dTSGe6tr240q3WZfWVxJxcWoYbLIONBTjSmKojy&#xA;1+Qn5reYpr63stBnt7rTxGbi3v6WUlJuXAqtx6dQeB3xV71+Snlf/nIX8urrUIrzyvFq+k6kImkt&#xA;xqNpA8c8KCMTIebqS8YAkqtWoDy23Vex+W7/AMzafazy6j5Y1K41bUJjdajNE+lpF6hVY1SJWvyQ&#xA;kUcaotdzTkdycVTS+83XVhpk2o3nl/UYYoFLvHzsGkJrRVVUu25M5oFUHckDrirIVJKgkFSRUqaV&#xA;HsaVGKt4q8+EcVz5wfyTdRq2nrNc6+9u6B0nt3aJkRwRx4m/uZX3/wB9DsTirOrGwsdPtUtLC2it&#xA;LWPkY7eBFjjUsxZqIgCirMSffFXzZr35F/mxrf55a75o0XVD5W0qWeIxawkpM0sYgjVxHBE1XFVo&#xA;RKVU++KvpDSrW8tNNtra9vH1G7ijVZ76RI43mcD4nKRKka1PZRiqW2H73zhrEy7xw2ljak+EqtcT&#xA;OOp/Ynj7DFXnmn+VfMt3bmO2hMema7rf1+81KO5b1YrWO9a8ipHwjnjk/crCSspALl6VZuKqO0zX&#xA;tXBhih1M6h5tW7EDaLLdopMCyss6XVukNLdIYU5rcBKyNSmzqhVeNf8AOOn5KecdI/NoeYNZtxYW&#xA;WlWz3cCtJFLJMuoJNBAOMbsY6pzc8gCKAU3xV9bMoYFWAKkUIPQjFWN+T/ImkeVnv2sav9bdVgL1&#xA;LW9pEv7mzRiWPpRMzsg7cspxYI474RXEb+LKUyeaz8wvy90XzxoMul6i0ltMUdbXULZuE8JkADBW&#xA;H2kfiOaN8LUHcKRcxeCeRPzH83fkv5jj8gfmWXm8rNVND14KzpHGp2KtQs8PxAMm7R/LbFX09bXN&#xA;vc28VzbSpPbzoskM0bB0dHHJWVlqGVgagjFVTFXYqw/837ue2/LHzQYbSa7MmlX8b+gYl9JWtJaz&#xA;P6skXwJTfhybwU4qhPL1t5/jku7SBE0qxe5u72F9SsYZ2reXT3Bi52erPyKmY0PpqKDxxVO/qXn/&#xA;AP6vOlf9wq5/7yOKoPVj+ZNjZme2uLLVJQQBaWmmFZSD+0Dc6tbR0H+virFPyek1Sy8w+YNEutJv&#xA;rdbKLSreS6uDZBFa202GIc0gu7ohpePNQnMAfaYHFWIf85i/XtQ0Hy15dtXRPr15PeSF69LOIJsF&#xA;DO3+9RPFFJ70oDir5d8teV4H8x2q3N7bTWtrOJ7uKIyTF7W3PqzsJIUlg/uUZqGTFUml0zzDqV5L&#xA;cfULme4uma4bhDIxbmxJYUB2r3xVO9O/KP8AM/USos/K2pyhio5/VpQo59OTMAF+nFWd3X/OK3nj&#xA;TfLp1fXdS07SZ3PC202aR5J5ZKFhGnorIpYqpagJoASaAE4q9+/5xb08+V/ycurnVZEijF9eXtwy&#xA;srhIo0ROVUrUFYea9aqQRsRir1PynZXcWmte6hF6Wq6rIb2/iJqY2kAWOAkbfuIVSKo68a98VVNc&#xA;8wrpcsFvHY3Oo3c8c06W1qYFYQ2/ASSM1zLbxgBpUH2679KVIVR+n3sN/YW19CGEN1Ek8YccWCyK&#xA;GHIdjQ74qk1//uW8y2+nD4rHSOF9f/yvcmv1SE9jwoZ2HUERnvirIMVdirGJtS0m087Xs2oXVva+&#xA;jptpFBJM8cZJmnuWlTk1O0UZpXFU5h17Q505wajaypWnJJo2FfCoOKqR80+WVkMZ1eyEgPEobiLk&#xA;GrSlOXXFUo81+frXQYVnjt0vLfiWlufrdrFGpH+6wrOZnkKgsqpGa061xVCeXvNmmx2PmjXr1JbK&#xA;GNhq89tMAZksl0+FUmAQsrrIts5UoSKgr9oEYq8N/J3/AJyXk1nUJvKGtaRcudYvbhtIfSpOEsX1&#xA;udpRByZ4SqxmRqScxxAp06Ksv/Pj809c8i+QEs9M0y+trnWC9rDqepXCSyrzQtK6BJppA1DtXgFq&#xA;OI8FXzZ+Vv5+eefy79a305otQ0u5cST6fehnTnQAvG6sroxVadSPEHFX2F+S353aN+aGnXr29lJp&#xA;up6aU+u2LuJVCy8vTeOUBOQPA1qoocVek4qgDr+hjVf0SdQtxqn/ACw+qnrbrzpwryrw+Knhv0xV&#xA;K/P3kDy1568vTaFr9v6ts55wzJRZoJR9mWFyDxYfKhGxBGKsc/JD8tvMv5feXbzQtX1waxZLdM+j&#xA;xqjKILc9vjJIMh+IoKqp6E1OKvRsVdirsVdirsVS7S/MeharNLBp17Fcywjk6oeq1481/nTkKclq&#xA;K98VTHFXj/5++SY/M2q+SjqF0LPy7FfT2+uzO/pJ9XnRJRG8mwUSPahASacio3JGKsuh1v8AKXyT&#xA;pxjt77R9FtIk3jikgjdgANyqn1JDQDfcnFWA+af+cvfys0kSR6UbrXbhVrH9XjMMDH+UyTcWH/AH&#xA;FXlWtf8AOZ/nzULpoPLuh2dnHJtAJBJdXHIj2KIf+AxVheseefzz83GRNV07UdRc8QgjtJ4okHLk&#xA;A8USrC68gCPUU8aVUjfFX0n+UWhQQeXdH8sia7uLmQReYfNv1v1TwuZAjRWoMoGzTpyNC1fScN9r&#xA;FXs2KoDVtA0PWEiTVrC3v0gbnEtxGkoVu9OQPXviq7WNUs9H0m51G5BFtZxGRkjFWbiPhRFHVmNF&#xA;VR1O2KoPyppV3YaVz1Ch1e/ka91RlPIfWJqVjVu6QoFhQ/yoMVXeY/N/ljy1HaSa9qUGnJfTra2r&#xA;TtxDyuaADwHix2HcjFU3xVjOr+SjfanLqMGpz2k04pIvCGVQPTEVE5pyUFRvv13xVhejSeYCs9rf&#xA;3kf6U02f6re0hC/vIFpDIoDCiSQOkid+LCu+cp2j27n02YwMYkdOe4djg0cMkbsqWns0V5cWms+Y&#xA;LbR3tjG9i9z6ixT2yNWNlkkuowXjduMi9fsnowzb9mdqQ1WPi5SHMONqNOccq6JN5x0yXWtasL/T&#xA;PM1zqKWkL25sbKyu5reRJGZ5HW7nvI4iXPFXH1kbKtN1yzP2pp8X1TH3n7GMNPOXIMj1e3n8z+RZ&#xA;orK2ax13S7R9K1fTolEkjWNzCEnjgptIGipLBT9tOGx5DLMWqGfDx4Tdja+/uKJY+CVSYN+WH5af&#xA;lj5I82af5phubiaxktXNhq88yvaxTOCjesURQivG/wADvRVIIY8iuarsvtiWWcseeoZAdhy/BcjU&#xA;aURAlDcMt/NvS/JX5m2Wm6PEzamlrci4bU7OQi2gip+8pMKxTPIBwVV5ca8jSm+R2p2vDTwPCQcn&#xA;QfrYafTGZ3+l4d59/wCcXjaWM1/5Su5bpoV5HTbgBpXCjf03ULyb/J4j2qaDNTofafikI5gBfUcv&#xA;i5ObQULig/8AnFD8ytP8oedbny/qVszL5oltbKC6QAvFdJIyRI24/du05DEdDTOvBt1j7exVjQ8p&#xA;Xi6k7JfxjR5b4anJZm3rcfWBRqLc+pQR+ooanpcqfDy47YqyXFXYq7FXYq7FXYq0yhlKnowoe2xx&#xA;Vj+geVLjTLm1kuL/AOuRabZtp2lxiFYilu5iLeswZvVkP1eMclCLQfZqa4qyHFXEBgQRUHYg9CMV&#xA;fNn/ADlP+VP5iebL7SJvK2lR3uiaXbStJb27xRzC5mceq3pMUL1jijpxqdjtir5V1ryf5s0OQR6z&#xA;o19prkVUXVvLDUeI5qtcVS+zu7yyvIrm0leC7gcNDLGSro46FSNwRir13yPc/wDOSvne8t7bSdW1&#xA;+Wwdwk+oSXNxDaooI5852ZVJCn7IJY9gcVfZcf5c+UY5pJktZhLKFEr/AFy7qwSoWv73tXFUXB5N&#xA;8uwAhLdyDuec88h+gu7Yqq/4V0H/AJZf+Skn/NWKuXyr5fDxubNXaJ0lj5lnAkjYOjUYkVV1DKex&#xA;FcVTXFUo8x+UPLHmWO0j1/TYNSjsZ1urVbheQSVDUEeIP7SnZu4OKpvirsVYL56sF0zVIvMyArZz&#xA;Riz1sgVVEQs1vdNTosZZo5G/lZSxCpnPe0PZ5z4hOAucPtDm6LPwSo8ihUMMypMhWRaco5BRhQjq&#xA;p9xnn5sbO6bd0RS7sFVRVmJoAPc4ALVid35wvdO119V8vvFNDGn6KvpSDPBJcTL61spWN4zyhZgB&#xA;vuZuPXcdN2NrJaWJjIXxeoDly2v8dI24GqxDIQR02/H46qunaHquiWFvc6eiPcCJP0lpakJHOyrT&#xA;nE32VuAKAtsslPi47MupzamOaZ4+pNS7vf8A0fLnHpfXJhAxAr8ftRp83aVJEi2PO9v5KhNNjHG4&#xA;VlNGEyPx9AIftNJQDp1IBo/KTB9Xpj39Ph3/AAZeIOnNFaXZaksr3up3PqXUq8RawlhawrWvFAaG&#xA;Rtt5HFT2CA8chlnGuGI27zzP6vcPt5sog8ywTyN+QNnf/nHqfnm4nRdG0vUFmsbFOXOS+EUc7OxF&#xA;FWOKWXYAmrLQ0A39G7EySnpYGXPl8tnR6uIGQ0+irm5trW2lurqVILaBGlnnlYJGkaDkzuzUCqoF&#xA;STm2cZq0u7W8tYbu0mS4tbhFlguImDxyRuOSujqSrKwNQRiqrirsVdirsVdirsVdiqRap5kmtdaG&#xA;lW8Ns0otlunlu7k2y8WkaMKtIpixqm/TFVn6f1X/AH3pP/cSf/slxV36f1X/AH3pP/cSf/slxV36&#xA;f1X/AH3pP/cSf/slxVM9G1L9Jaet1wWNvUlidUf1E5QStExR6LyUlKqaDbFWtQk0jToZ9WvEjhW3&#xA;UyS3PCrgAU24guxPQAbnoMVRTXFusscTyKss1TFGxAZuIq3FTuad8VVMVYVrfnrWdL1aaxex0oIj&#xA;qIpLjVXgdo5CeLtH9TfjsPi+I08TiqDt/wA0Ltl5T2ukxgoHUJqzOft8OLA2iUP7XyxVlXlnXxrd&#xA;nPP6aRPbztbv6MvrxNxVXV0k4pyVlcH7OKpvirENa8/Npes3lhPBaQQWwjMU91czxtN6iqSUSO1n&#xA;Wil6H469yAN8VQjfmjZKpYyabQcjtd3RPwnidhY/d49RirbfmfaKxUyaZUGQGl5ckfulDNuLLuD8&#xA;P8x2WpxVmOnXTXdhb3TBVM8ayARszLRxUULpE3Q91GKpRP8Al/5Incu+hWIdmLO0cEcZZm6ligXk&#xA;fnlcsMJc4g/BkJEdV8XkXyVEVZNA04OlOMhtYS/wggfEVLftHv3xjigOQCDIsQ1/TLa38x6ppl5b&#xA;g6fripc2oK0hcJbx209uKbB0EKyU2qHqPstTjvaXTzhljnjy5e4h2mgmDEwKX6NeXNrctomou0lz&#xA;Cpexu363VspA5E/79jqFk8dm/aoObzQEh4keXUdx/Ueny6OfE1sU3WKJXeRUVXkp6jgAFqCgqe9M&#xA;xrLNKbzXJZtUg0HREW81q6cxEmv1e1ohkaS5cdOKDkIwebbdAeQ2vZnZUtTMA+mPP3jy/Xy+5x9R&#xA;qBjHeXpPl7Q7XQ9Ig022ZpFi5NLPJT1JZpGMksr0AHKSRmY0FN9ts9JxY444iMeQdDKRJsoy7tLW&#xA;9tZrO8hS4tLhGiuLeVQ8ckbjiyOrVDKwNCDliHWlpa2drDaWkKW9rbosUEEShEREHFVVVoAABQAY&#xA;qq4q7FXYq7FXYq7FXzp+Zv5hf85K6Z561Ww8qeXpLzy/A6CwuV095w6mJGY+oDRvjLYqxKf8yP8A&#xA;nLK4IM/k5piuymTSGYge1cVetfkRqP5ia9aaw/5ieX4tMmt5IBpwexFqXVlf1dm+1QhcVeqfojSv&#xA;+WKD/kUn9MVd+iNK/wCWKD/kUn9MVREcccaCONQiLsqKAAB7AYqgtY0v9JJaRtIEht7qG6lQry9T&#xA;6u3qRr1FKSqjV9sVS3ypbfXFfzJdjnfamGNsWofQseVYIY/5eSBZJPFzvsFAVZDirsVdirAdU8ya&#xA;lpNlLrFuI/Su9dnW8R1PIWWnwSRXHAV3kKaczL44qm2seZL6DztoGj2ZV7O7Ep1T4alRJbzy2hVu&#xA;3JrOX7sVR2iM8uteYJWI4x3cNvGB/KlpDIT/AMHMw+jFU6xV2KuxVBa1c6lbaXcT6bai9vkWsFsW&#xA;CcjUA7kgbCppUV6VHXFURayXElrDJcRCC4dFaaAMHCOQCyBwBy4natN8VYx59lHqaHCASzXryVHQ&#xA;KlpOpJ+mRc0HtJKtKfOQczQj94x7VNLt9Rt1ilLRyxMJba5jIEsMq1CyRkgiorShBBFVYFSRnAYs&#xA;pgbHxHeHdSjaBbRtYuwI9R1ZjAKBorCM2Zkp19ST1JpR/wA82TLBmhH6Y7/0vV9lAfO2PCTzKceV&#xA;LDT7PzVp1tbxJbww2N6beFAEUMZbapAHU0ZvxOdL7LzMsuQyNnhDgdoCogBkPn06wvl5pNLe4SSK&#xA;5tZLv6mOVybRLhGuRCtGLP6Qb4QKnoKnbO1dU7yVr/6VtbuI3iaj9Rm9KPUU4j6xE6LJG7qgVUkX&#xA;kY5FAHxKTxWvEKorR9XvdVvJ7iCONNCjLw21wSxluZEbi0qAUVYQQyqdy9OQ+GhZVOMVdirsVdir&#xA;sVdirsVdirsVS3zLZ65e6HeWuhaimk6vKlLTUJIVuViYMDUxMQrVFRv060PTFUwiEgiQSsHlCgSO&#xA;o4gtTchatQE9q4quxVIdalvNQ1aLQbO5e0i9E3Wq3MBpOsLMY4Yo2P8Admdlk/eDcKjcaMQyqoXQ&#xA;fIw0LWGuNP1O7/RJQhdJuJ7i5RGbrwaaVwq8vj+xy5E/HxooVZRirC9V0nzbPqtzNAv+itLWILc3&#xA;kf7oJxpSO9iQMXo1Qg22pX4sVULXSfO8EiOUV/7oShrm9YEA/v8AiJL9wpfbgaHh354quOi6rZfl&#xA;/cfpCJG1SwurrWRHCfhkZb2S+9Mcy/ETIxiYFmoGI5HriqUfl5aLNrVoskrSG0ga9jtplKz21s0S&#xA;WmkxSE/bYWpuGcjbm7bnFU4uNK83WmuapJYS3cWnXd5HcxpaR2EgZDBGs3JruVHV2dSF+EqAO9dl&#xA;ViwfmHwo17qRfiByFro4HLnUmn1g7cNqV6717YqpXI/MaNf3U2qzE8vsW2ibGvwk87qP9nY06+3T&#xA;FWc2E081nDLPBJbTMoMkE3p+op7hvReWOv8AqsRiqvirsVefeedVtE84adbSM3KysJ5pVWNpCPrc&#xA;0aRP8AYgAWsoJ6b5y/tRInHCA6m3Ydnj1EoJda0dmCrf27Ma0USoTt12r75xPgz/AJp+TteId6s9&#xA;/Yxosj3ESIwJV2dQCB1IJOREJHomwo6bq2nv5q0GS1uY5iZ5oJjEyyBY5bWUjkVJ48pUjpnR+zXF&#xA;DUEEVxRLg6+jDboXp2d66diK+WfL955v11L3T4Ll7i3srqWSSNKssoltzE5Aq6f6GG4vUbnxOKss&#xA;hhihiSGFFjhjUJHGgCqqqKBVA2AAxVdirsVdirsVdirsVdirsVdirsVdiqV6hD5neZl0+6soLdqc&#xA;ZJ7eWaRBT4hxWaJXqehqKeB7qqmjaLDpkcx9aS7vLp/VvL6cqZZnChQTwCIqqqgKqKFHh1xVMMVc&#xA;CGFQajxGKuxV2KvM/wAzfPlmr33ldRPHbxxI2v6nGJFWC3fgzQK6D4ZJlkRKlloHqpLAgaztHVTh&#xA;AjELn918m/BjBIMuTHZtJ1PyTqmhapZQS3Gu3unQibTxM5+uXiuqX8crSNQvL9YiZZDVgYqnkAVI&#xA;1E8uPJj4fVE2JD4Xf2JgIyjK+b1Tyf5otPM/l+21i2jaFZ6h4HNWR1NCK0FQRRlNBVSDQZsMWQTj&#xA;YaZRo0nWWMVnrw+v6HMetx5+nX4uNaVp4VxVfiqyCeG4gjnhcSQyqHikU1VlYVUg+BGKrVurZrqS&#xA;0WRTcxIkssIPxKkpdUYjwYxOB8jiqG1XQdE1dETVdPt75YyTELiJJeBO1U5A8T7jIyiDsRaQaSaX&#xA;8uPLL14C8hr1VL67aOn8vpSSvFT245gz7K00ucI/KvubRqMg6lDR/ld5dR2YzXjVYMoEwjK07K0S&#xA;o4/4LKx2Npv5t/EsvzWTvXNpXkTy7qNsz28txqhBktAwvNVuo1UcWkjB+tSxLvxLigqaVqczMOkx&#xA;YvojGPuDVLLKXM2jZb/XdXumg0gtpljCo9fULy0lEsjv/uu2imMNOCirSOrLuAAfi45DBMdI0WHT&#xA;fXf15ry7un53V5clTK5UcUWkaxxoqLsqooHU/aJJVTDFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q0yhlKnowoe2xxVL/L+gaZoGlQ6VpiNHZwcvTR3aQjkxY/ExJ6nFUxxV2KsF138pNG1nzNLrM97c&#xA;pBeSQzalpyEejctbxrFGH2+zwShBBO5KlTvmPPTiUrs9NvczE6FJ/wCbvKGl+aNOjs79pYWglW4t&#xA;Lu2ZVnhmUEB4y6yLWjGlVNDuPiAItyYxMUWIlSr5W8sab5a0eLS9P5tDGSzSylTI7t1ZuCovQAAK&#xA;oAAAApgx4xAUFlIk2UVrMWpy6PfRaVMlvqklvKthPIKpHcFCInYFX+FXoT8J+RyxDE4rS+GuWqmO&#xA;TmtzcSuKGohbUZmVj/klGB+WKot7Dzb+ntFkkuFd4rGZLy5RSIeXr6aZVbaheVYrj0zxGx7UriqA&#xA;8s2XmFtFhawZoPUt0MErmkfJtJto4XKnlyVZlP7J3BxVKNL0/wAwf4p1GOAPDqAaSWGWUErGk155&#xA;h+qyPUN+7/eREbHYjbFXpOmx6jHahdQmjnuKn44lKDj2FCdyO52+QxVFYq7FVGKxtIrue7jiVbq5&#xA;CLPMB8brFXgpP8q8moPc+JxVWxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KtcV5cqDlSnLvTwxVvFWlVVUKoCqooqjYADsMVcEQOXCjmQAWpuQKkCvtU4q3irsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVf//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:3db4692f-e36f-6f4e-944c-8bbcf27ec247"
    stRef:documentID="xmp.did:3db4692f-e36f-6f4e-944c-8bbcf27ec247"
    stRef:originalDocumentID="uuid:11571bd5-2104-4f08-856d-3b1328b858e8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:b26e10a1-cb6f-db4b-bb08-8bf3c8a1fd86"
      stEvt:when="2021-12-04T11:35:52+09:00"
      stEvt:softwareAgent="Adobe Illustrator 26.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:3db4692f-e36f-6f4e-944c-8bbcf27ec247"
      stEvt:when="2022-06-10T15:19:10+09:00"
      stEvt:softwareAgent="Adobe Illustrator 26.3 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:9f737e7f-de79-e54d-a287-aefd66c327b1"
      stEvt:when="2022-06-10T15:19:16+09:00"
      stEvt:softwareAgent="Adobe Illustrator 26.3 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2206.w039.n003.255B.p1.255</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmpTPg:MaxPageSize
    stDim:w="750.000000"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                               
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
750 400 li
750 0 li
cp
clp
750 400 mo
0 400 li
0 0 li
750 0 li
750 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
632.79 166.289 mo
634.761 165.529 636.342 163.936 637.347 162.079 cv
638.351 160.221 638.816 158.111 638.982 156.006 cv
639.166 158.004 639.36 160.043 640.166 161.881 cv
640.973 163.719 642.514 165.354 644.485 165.736 cv
642.597 166.061 641.065 167.547 640.235 169.272 cv
639.405 170.998 639.177 172.947 639.065 174.858 cv
638.824 173.06 638.567 171.209 637.658 169.639 cv
636.686 167.961 634.981 166.725 632.79 166.289 cv
cp
1 .831373 .180392 rgb
f
634.243 166.158 mo
635.906 166.781 637.252 167.893 638.111 169.377 cv
638.487 170.025 638.757 170.718 638.961 171.426 cv
639.14 170.613 639.394 169.812 639.763 169.045 cv
640.488 167.538 641.605 166.369 642.896 165.719 cv
641.554 165.01 640.407 163.733 639.687 162.091 cv
639.324 161.266 639.082 160.413 638.908 159.55 cv
638.628 160.562 638.26 161.491 637.808 162.328 cv
636.919 163.972 635.681 165.294 634.243 166.158 cv
cp
639.065 175.382 mo
638.803 175.382 638.581 175.189 638.546 174.928 cv
638.325 173.276 638.075 171.405 637.204 169.902 cv
636.276 168.299 634.672 167.198 632.688 166.803 cv
632.46 166.758 632.289 166.567 632.269 166.335 cv
632.249 166.102 632.384 165.885 632.602 165.801 cv
634.343 165.129 635.865 163.719 636.886 161.829 cv
637.75 160.233 638.279 158.26 638.459 155.965 cv
638.48 155.693 638.706 155.484 638.978 155.482 cv
638.979 155.482 638.98 155.482 638.981 155.482 cv
639.252 155.482 639.478 155.688 639.503 155.958 cv
639.681 157.892 639.866 159.893 640.646 161.671 cv
641.484 163.579 642.956 164.906 644.584 165.221 cv
644.832 165.27 645.011 165.488 645.008 165.741 cv
645.006 165.994 644.823 166.209 644.573 166.252 cv
643 166.523 641.554 167.737 640.707 169.499 cv
639.903 171.171 639.694 173.077 639.588 174.889 cv
639.572 175.158 639.354 175.371 639.084 175.382 cv
639.078 175.382 639.071 175.382 639.065 175.382 cv
cp
0 0 0 rgb
f
681.892 141.311 mo
683.48 140.79 684.755 139.699 685.565 138.426 cv
686.375 137.153 686.749 135.707 686.883 134.265 cv
687.031 135.634 687.188 137.031 687.838 138.29 cv
688.489 139.549 689.731 140.669 691.32 140.931 cv
689.798 141.154 688.562 142.172 687.893 143.354 cv
687.224 144.536 687.04 145.872 686.95 147.181 cv
686.756 145.949 686.548 144.681 685.816 143.605 cv
685.032 142.456 683.658 141.609 681.892 141.311 cv
cp
1 .831373 .180392 rgb
f
683.44 141.185 mo
684.633 141.635 685.604 142.365 686.248 143.311 cv
686.503 143.684 686.699 144.077 686.854 144.478 cv
686.996 144.008 687.183 143.545 687.437 143.096 cv
687.974 142.148 688.767 141.391 689.688 140.917 cv
688.727 140.399 687.909 139.569 687.373 138.531 cv
687.127 138.055 686.948 137.56 686.811 137.06 cv
686.596 137.654 686.327 138.204 686.007 138.707 cv
685.351 139.738 684.465 140.587 683.44 141.185 cv
cp
686.95 147.705 mo
686.693 147.705 686.473 147.518 686.433 147.263 cv
686.25 146.098 686.06 144.894 685.383 143.9 cv
684.654 142.831 683.383 142.094 681.804 141.827 cv
681.566 141.787 681.387 141.59 681.369 141.35 cv
681.351 141.109 681.499 140.888 681.728 140.813 cv
683.111 140.36 684.317 139.412 685.123 138.145 cv
685.812 137.063 686.217 135.778 686.362 134.217 cv
686.386 133.949 686.61 133.743 686.879 133.741 cv
686.88 133.741 686.882 133.741 686.883 133.741 cv
687.15 133.741 687.375 133.943 687.404 134.209 cv
687.545 135.514 687.692 136.865 688.304 138.05 cv
688.959 139.318 690.118 140.203 691.405 140.414 cv
691.659 140.456 691.846 140.678 691.843 140.936 cv
691.841 141.194 691.651 141.412 691.395 141.449 cv
690.152 141.632 689.013 142.44 688.349 143.612 cv
687.72 144.723 687.556 146.001 687.473 147.217 cv
687.455 147.483 687.239 147.693 686.973 147.704 cv
686.965 147.705 686.958 147.705 686.95 147.705 cv
cp
0 0 0 rgb
f
647.093 129.848 mo
649.997 128.759 651.99 128.202 653.4 125.751 cv
654.811 123.3 655.366 119.506 655.513 116.782 cv
655.882 119.35 656.268 121.968 657.559 124.294 cv
658.85 126.62 661.227 128.644 664.185 129.029 cv
661.384 129.551 659.168 131.552 658.011 133.823 cv
656.855 136.094 656.607 138.62 656.531 141.091 cv
656.087 138.785 655.751 135.359 654.32 133.384 cv
652.791 131.273 650.383 130.29 647.093 129.848 cv
cp
1 .831373 .180392 rgb
f
649.068 129.67 mo
651.717 130.283 653.506 131.367 654.744 133.077 cv
655.549 134.188 656.024 135.711 656.358 137.234 cv
656.582 135.994 656.944 134.764 657.545 133.585 cv
658.588 131.536 660.276 129.942 662.246 129.082 cv
660.139 128.298 658.291 126.692 657.102 124.548 cv
656.384 123.256 655.939 121.894 655.624 120.515 cv
655.309 122.353 654.772 124.418 653.854 126.012 cv
652.667 128.074 651.12 128.879 649.068 129.67 cv
cp
656.53 141.615 mo
656.281 141.615 656.064 141.438 656.016 141.19 cv
655.935 140.768 655.857 140.308 655.776 139.827 cv
655.428 137.769 654.995 135.208 653.896 133.691 cv
652.563 131.852 650.444 130.827 647.023 130.367 cv
646.785 130.335 646.6 130.145 646.573 129.907 cv
646.546 129.668 646.685 129.442 646.909 129.357 cv
647.155 129.265 647.394 129.177 647.627 129.091 cv
650.109 128.174 651.749 127.569 652.946 125.489 cv
654.512 122.77 654.897 118.475 654.99 116.754 cv
655.005 116.485 655.221 116.271 655.49 116.259 cv
655.755 116.243 655.993 116.441 656.031 116.708 cv
656.39 119.199 656.761 121.776 658.017 124.04 cv
659.388 126.509 661.718 128.18 664.252 128.509 cv
664.508 128.542 664.701 128.757 664.708 129.014 cv
664.715 129.272 664.534 129.496 664.281 129.544 cv
661.858 129.996 659.688 131.684 658.478 134.061 cv
657.349 136.277 657.126 138.757 657.054 141.107 cv
657.046 141.374 656.839 141.592 656.572 141.613 cv
656.558 141.614 656.544 141.615 656.53 141.615 cv
cp
0 0 0 rgb
f
707.135 199.979 mo
664.604 159.926 li
669.751 154.461 li
712.282 194.514 li
713.221 195.398 713.45 196.682 712.381 197.816 cv
710.438 199.88 li
709.405 200.822 708.074 200.864 707.135 199.979 cv
cp
f
707.494 199.598 mo
708.231 200.291 709.24 200.254 710.07 199.506 cv
712 197.457 li
712.406 197.026 712.595 196.572 712.562 196.109 cv
712.531 195.68 712.31 195.26 711.923 194.895 cv
669.773 155.201 li
665.344 159.904 li
707.494 199.598 li
cp
708.683 201.135 mo
707.997 201.135 707.326 200.878 706.776 200.36 cv
706.776 200.36 li
664.245 160.307 li
664.034 160.109 664.024 159.778 664.223 159.567 cv
669.37 154.101 li
669.465 154 669.597 153.941 669.735 153.937 cv
669.873 153.928 670.009 153.984 670.11 154.079 cv
712.641 194.133 li
713.223 194.681 713.557 195.338 713.607 196.034 cv
713.661 196.791 713.369 197.531 712.762 198.175 cv
710.819 200.239 li
710.81 200.249 710.8 200.258 710.79 200.267 cv
710.157 200.845 709.412 201.135 708.683 201.135 cv
cp
f
674.397 169.149 mo
661.627 157.122 li
660.818 156.36 660.838 155.079 661.541 154.278 cv
663.93 151.742 li
664.745 150.876 665.965 150.895 666.774 151.657 cv
679.544 163.683 li
674.397 169.149 li
cp
1 1 1 rgb
f
665.39 151.612 mo
665.003 151.612 664.617 151.776 664.311 152.101 cv
661.923 154.637 li
661.387 155.248 661.41 156.198 661.986 156.741 cv
674.375 168.408 li
678.804 163.706 li
666.415 152.038 li
666.112 151.753 665.75 151.612 665.39 151.612 cv
cp
674.398 169.673 mo
674.269 169.673 674.14 169.626 674.039 169.53 cv
661.268 157.504 li
660.285 156.578 660.232 154.976 661.148 153.933 cv
663.548 151.383 li
664.539 150.331 666.079 150.284 667.133 151.275 cv
679.903 163.302 li
680.114 163.5 680.124 163.832 679.926 164.043 cv
674.779 169.508 li
674.676 169.617 674.537 169.673 674.398 169.673 cv
cp
0 0 0 rgb
f
673.272 166.168 mo
673.229 166.168 673.186 166.152 673.152 166.121 cv
673.082 166.055 673.078 165.944 673.144 165.874 cv
676.184 162.638 li
676.251 162.568 676.361 162.565 676.431 162.63 cv
676.501 162.696 676.505 162.807 676.438 162.877 cv
673.399 166.113 li
673.364 166.15 673.318 166.168 673.272 166.168 cv
cp
f
639.006 89.7551 mo
579.295 89.7551 li
579.006 89.7551 578.771 89.5207 578.771 89.2313 cv
578.771 88.942 579.006 88.7076 579.295 88.7076 cv
639.006 88.7076 li
639.295 88.7076 639.529 88.942 639.529 89.2313 cv
639.529 89.5207 639.295 89.7551 639.006 89.7551 cv
cp
f
621.078 89.2312 mo
621.078 83.1296 622.563 82.7501 624.395 82.7501 cv
626.227 82.7501 627.712 83.2216 627.712 89.2312 cv
627.712 95.8652 626.227 95.7123 624.395 95.7123 cv
622.563 95.7123 621.078 94.9131 621.078 89.2312 cv
cp
f
624.395 83.2739 mo
623.021 83.2739 621.601 83.2739 621.601 89.2312 cv
621.601 95.1885 623.282 95.1885 624.395 95.1885 cv
624.517 95.1886 li
625.315 95.1926 625.813 95.1718 626.193 94.7924 cv
626.863 94.1242 627.188 92.3051 627.188 89.2312 cv
627.188 83.2739 625.768 83.2739 624.395 83.2739 cv
cp
624.634 96.2364 mo
624.594 96.2364 624.555 96.2362 624.515 96.2362 cv
624.395 96.236 li
621.666 96.236 620.554 94.2066 620.554 89.2312 cv
620.554 83.3426 621.904 82.2263 624.395 82.2263 cv
626.827 82.2263 628.236 83.3726 628.236 89.2312 cv
628.236 92.7377 627.846 94.6226 626.933 95.5339 cv
626.26 96.2062 625.438 96.2364 624.634 96.2364 cv
cp
f
594.816 87.4873 mo
594.72 87.4873 594.642 87.4092 594.642 87.3127 cv
594.642 82.7501 li
594.642 82.6536 594.72 82.5755 594.816 82.5755 cv
594.913 82.5755 594.991 82.6536 594.991 82.7501 cv
594.991 87.3127 li
594.991 87.4092 594.913 87.4873 594.816 87.4873 cv
cp
f
609.605 87.4873 mo
609.509 87.4873 609.431 87.4092 609.431 87.3127 cv
609.431 82.7501 li
609.431 82.6536 609.509 82.5755 609.605 82.5755 cv
609.702 82.5755 609.78 82.6536 609.78 82.7501 cv
609.78 87.3127 li
609.78 87.4092 609.702 87.4873 609.605 87.4873 cv
cp
f
333.702 319.915 mo
333.701 319.915 333.7 319.915 333.699 319.915 cv
285.699 319.665 li
285.409 319.663 285.176 319.427 285.177 319.138 cv
285.179 318.85 285.413 318.617 285.701 318.617 cv
285.702 318.617 285.703 318.617 285.704 318.617 cv
332.965 318.863 li
332.214 316.47 330.25 308.272 333.19 294.831 cv
335.569 283.958 333.713 273.586 333.278 271.445 cv
285.254 271.051 li
284.964 271.049 284.732 270.812 284.734 270.523 cv
284.737 270.235 284.971 270.004 285.258 270.004 cv
285.259 270.004 285.261 270.004 285.262 270.004 cv
333.706 270.401 li
333.948 270.403 334.157 270.57 334.212 270.806 cv
334.24 270.923 336.921 282.677 334.214 295.055 cv
330.825 310.546 334.154 319.11 334.188 319.195 cv
334.253 319.357 334.233 319.541 334.135 319.685 cv
334.038 319.829 333.875 319.915 333.702 319.915 cv
cp
f
329.297 310.206 mo
329.297 310.206 329.297 310.206 329.296 310.206 cv
286.788 310.035 li
286.692 310.034 286.614 309.956 286.614 309.86 cv
286.615 309.763 286.693 309.686 286.789 309.686 cv
286.789 309.686 286.789 309.686 286.79 309.686 cv
329.298 309.857 li
329.394 309.857 329.472 309.935 329.472 310.032 cv
329.471 310.128 329.393 310.206 329.297 310.206 cv
cp
f
332.953 279.786 mo
289.005 279.786 li
288.909 279.786 288.831 279.707 288.831 279.611 cv
288.831 279.514 288.909 279.436 289.005 279.436 cv
332.953 279.436 li
333.049 279.436 333.127 279.514 333.127 279.611 cv
333.127 279.707 333.049 279.786 332.953 279.786 cv
cp
f
291.363 315.161 mo
287.173 315.161 li
286.883 315.161 286.649 314.926 286.649 314.637 cv
286.649 314.348 286.883 314.113 287.173 314.113 cv
291.363 314.113 li
291.652 314.113 291.887 314.348 291.887 314.637 cv
291.887 314.926 291.652 315.161 291.363 315.161 cv
cp
299.743 315.161 mo
295.553 315.161 li
295.264 315.161 295.029 314.926 295.029 314.637 cv
295.029 314.348 295.264 314.113 295.553 314.113 cv
299.743 314.113 li
300.033 314.113 300.267 314.348 300.267 314.637 cv
300.267 314.926 300.033 315.161 299.743 315.161 cv
cp
308.124 315.161 mo
303.934 315.161 li
303.644 315.161 303.41 314.926 303.41 314.637 cv
303.41 314.348 303.644 314.113 303.934 314.113 cv
308.124 314.113 li
308.413 314.113 308.647 314.348 308.647 314.637 cv
308.647 314.926 308.413 315.161 308.124 315.161 cv
cp
316.504 315.161 mo
312.314 315.161 li
312.025 315.161 311.79 314.926 311.79 314.637 cv
311.79 314.348 312.025 314.113 312.314 314.113 cv
316.504 314.113 li
316.794 314.113 317.028 314.348 317.028 314.637 cv
317.028 314.926 316.794 315.161 316.504 315.161 cv
cp
324.885 315.161 mo
320.694 315.161 li
320.405 315.161 320.171 314.926 320.171 314.637 cv
320.171 314.348 320.405 314.113 320.694 314.113 cv
324.885 314.113 li
325.174 314.113 325.408 314.348 325.408 314.637 cv
325.408 314.926 325.174 315.161 324.885 315.161 cv
cp
330.653 315.161 mo
329.075 315.161 li
328.786 315.161 328.551 314.926 328.551 314.637 cv
328.551 314.348 328.786 314.113 329.075 314.113 cv
330.653 314.113 li
330.942 314.113 331.176 314.348 331.176 314.637 cv
331.176 314.926 330.942 315.161 330.653 315.161 cv
cp
f
293.195 275.805 mo
289.005 275.805 li
288.716 275.805 288.481 275.57 288.481 275.281 cv
288.481 274.992 288.716 274.758 289.005 274.758 cv
293.195 274.758 li
293.485 274.758 293.719 274.992 293.719 275.281 cv
293.719 275.57 293.485 275.805 293.195 275.805 cv
cp
301.576 275.805 mo
297.386 275.805 li
297.096 275.805 296.862 275.57 296.862 275.281 cv
296.862 274.992 297.096 274.758 297.386 274.758 cv
301.576 274.758 li
301.865 274.758 302.1 274.992 302.1 275.281 cv
302.1 275.57 301.865 275.805 301.576 275.805 cv
cp
309.956 275.805 mo
305.766 275.805 li
305.477 275.805 305.242 275.57 305.242 275.281 cv
305.242 274.992 305.477 274.758 305.766 274.758 cv
309.956 274.758 li
310.246 274.758 310.48 274.992 310.48 275.281 cv
310.48 275.57 310.246 275.805 309.956 275.805 cv
cp
318.337 275.805 mo
314.146 275.805 li
313.857 275.805 313.623 275.57 313.623 275.281 cv
313.623 274.992 313.857 274.758 314.146 274.758 cv
318.337 274.758 li
318.626 274.758 318.861 274.992 318.861 275.281 cv
318.861 275.57 318.626 275.805 318.337 275.805 cv
cp
326.717 275.805 mo
322.527 275.805 li
322.238 275.805 322.003 275.57 322.003 275.281 cv
322.003 274.992 322.238 274.758 322.527 274.758 cv
326.717 274.758 li
327.007 274.758 327.241 274.992 327.241 275.281 cv
327.241 275.57 327.007 275.805 326.717 275.805 cv
cp
332.212 275.805 mo
330.908 275.805 li
330.618 275.805 330.384 275.57 330.384 275.281 cv
330.384 274.992 330.618 274.758 330.908 274.758 cv
332.212 274.758 li
332.501 274.758 332.735 274.992 332.735 275.281 cv
332.735 275.57 332.501 275.805 332.212 275.805 cv
cp
f
448.942 320.886 mo
448.941 320.886 448.94 320.886 448.938 320.886 cv
382.439 320.489 li
382.197 320.487 381.987 320.32 381.932 320.084 cv
381.905 319.967 379.223 308.213 381.93 295.835 cv
385.319 280.344 381.99 271.78 381.956 271.695 cv
381.891 271.533 381.911 271.349 382.009 271.205 cv
382.106 271.061 382.268 270.975 382.442 270.975 cv
382.443 270.975 382.443 270.975 382.444 270.975 cv
448.5 271.225 li
448.789 271.226 449.023 271.462 449.022 271.751 cv
449.021 272.039 448.787 272.273 448.498 272.273 cv
448.498 272.273 448.497 272.273 448.496 272.273 cv
383.179 272.025 li
383.929 274.418 385.894 282.616 382.954 296.059 cv
380.578 306.922 382.431 317.299 382.867 319.443 cv
448.945 319.838 li
449.234 319.84 449.467 320.076 449.465 320.365 cv
449.464 320.653 449.229 320.886 448.942 320.886 cv
cp
f
447.027 279.957 mo
447.026 279.957 li
386.853 279.786 li
386.757 279.785 386.679 279.707 386.679 279.611 cv
386.68 279.514 386.758 279.436 386.854 279.436 cv
386.854 279.436 386.854 279.436 386.854 279.436 cv
447.027 279.608 li
447.124 279.608 447.202 279.686 447.201 279.783 cv
447.201 279.879 447.123 279.957 447.027 279.957 cv
cp
f
445.194 311.453 mo
384.631 311.453 li
384.534 311.453 384.456 311.375 384.456 311.279 cv
384.456 311.182 384.534 311.104 384.631 311.104 cv
445.194 311.104 li
445.291 311.104 445.369 311.182 445.369 311.279 cv
445.369 311.375 445.291 311.453 445.194 311.453 cv
cp
f
388.364 276.777 mo
385.491 276.777 li
385.202 276.777 384.968 276.542 384.968 276.253 cv
384.968 275.964 385.202 275.729 385.491 275.729 cv
388.364 275.729 li
388.653 275.729 388.887 275.964 388.887 276.253 cv
388.887 276.542 388.653 276.777 388.364 276.777 cv
cp
396.744 276.777 mo
392.554 276.777 li
392.264 276.777 392.03 276.542 392.03 276.253 cv
392.03 275.964 392.264 275.729 392.554 275.729 cv
396.744 275.729 li
397.033 275.729 397.268 275.964 397.268 276.253 cv
397.268 276.542 397.033 276.777 396.744 276.777 cv
cp
405.124 276.777 mo
400.934 276.777 li
400.645 276.777 400.41 276.542 400.41 276.253 cv
400.41 275.964 400.645 275.729 400.934 275.729 cv
405.124 275.729 li
405.414 275.729 405.648 275.964 405.648 276.253 cv
405.648 276.542 405.414 276.777 405.124 276.777 cv
cp
413.505 276.777 mo
409.315 276.777 li
409.025 276.777 408.791 276.542 408.791 276.253 cv
408.791 275.964 409.025 275.729 409.315 275.729 cv
413.505 275.729 li
413.794 275.729 414.029 275.964 414.029 276.253 cv
414.029 276.542 413.794 276.777 413.505 276.777 cv
cp
421.885 276.777 mo
417.695 276.777 li
417.406 276.777 417.171 276.542 417.171 276.253 cv
417.171 275.964 417.406 275.729 417.695 275.729 cv
421.885 275.729 li
422.175 275.729 422.409 275.964 422.409 276.253 cv
422.409 276.542 422.175 276.777 421.885 276.777 cv
cp
430.266 276.777 mo
426.076 276.777 li
425.786 276.777 425.552 276.542 425.552 276.253 cv
425.552 275.964 425.786 275.729 426.076 275.729 cv
430.266 275.729 li
430.555 275.729 430.79 275.964 430.79 276.253 cv
430.79 276.542 430.555 276.777 430.266 276.777 cv
cp
438.646 276.777 mo
434.456 276.777 li
434.167 276.777 433.932 276.542 433.932 276.253 cv
433.932 275.964 434.167 275.729 434.456 275.729 cv
438.646 275.729 li
438.936 275.729 439.17 275.964 439.17 276.253 cv
439.17 276.542 438.936 276.777 438.646 276.777 cv
cp
447.027 276.777 mo
442.837 276.777 li
442.547 276.777 442.313 276.542 442.313 276.253 cv
442.313 275.964 442.547 275.729 442.837 275.729 cv
447.027 275.729 li
447.316 275.729 447.551 275.964 447.551 276.253 cv
447.551 276.542 447.316 276.777 447.027 276.777 cv
cp
f
386.531 316.132 mo
383.234 316.132 li
382.945 316.132 382.71 315.897 382.71 315.608 cv
382.71 315.319 382.945 315.084 383.234 315.084 cv
386.531 315.084 li
386.82 315.084 387.055 315.319 387.055 315.608 cv
387.055 315.897 386.82 316.132 386.531 316.132 cv
cp
394.911 316.132 mo
390.721 316.132 li
390.432 316.132 390.197 315.897 390.197 315.608 cv
390.197 315.319 390.432 315.084 390.721 315.084 cv
394.911 315.084 li
395.201 315.084 395.435 315.319 395.435 315.608 cv
395.435 315.897 395.201 316.132 394.911 316.132 cv
cp
403.292 316.132 mo
399.102 316.132 li
398.812 316.132 398.578 315.897 398.578 315.608 cv
398.578 315.319 398.812 315.084 399.102 315.084 cv
403.292 315.084 li
403.581 315.084 403.816 315.319 403.816 315.608 cv
403.816 315.897 403.581 316.132 403.292 316.132 cv
cp
411.672 316.132 mo
407.482 316.132 li
407.193 316.132 406.958 315.897 406.958 315.608 cv
406.958 315.319 407.193 315.084 407.482 315.084 cv
411.672 315.084 li
411.962 315.084 412.196 315.319 412.196 315.608 cv
412.196 315.897 411.962 316.132 411.672 316.132 cv
cp
420.053 316.132 mo
415.863 316.132 li
415.573 316.132 415.339 315.897 415.339 315.608 cv
415.339 315.319 415.573 315.084 415.863 315.084 cv
420.053 315.084 li
420.342 315.084 420.577 315.319 420.577 315.608 cv
420.577 315.897 420.342 316.132 420.053 316.132 cv
cp
428.433 316.132 mo
424.243 316.132 li
423.954 316.132 423.719 315.897 423.719 315.608 cv
423.719 315.319 423.954 315.084 424.243 315.084 cv
428.433 315.084 li
428.723 315.084 428.957 315.319 428.957 315.608 cv
428.957 315.897 428.723 316.132 428.433 316.132 cv
cp
436.814 316.132 mo
432.624 316.132 li
432.335 316.132 432.1 315.897 432.1 315.608 cv
432.1 315.319 432.335 315.084 432.624 315.084 cv
436.814 315.084 li
437.103 315.084 437.338 315.319 437.338 315.608 cv
437.338 315.897 437.103 316.132 436.814 316.132 cv
cp
445.194 316.132 mo
441.004 316.132 li
440.715 316.132 440.48 315.897 440.48 315.608 cv
440.48 315.319 440.715 315.084 441.004 315.084 cv
445.194 315.084 li
445.483 315.084 445.718 315.319 445.718 315.608 cv
445.718 315.897 445.483 316.132 445.194 316.132 cv
cp
f
345.728 289.147 mo
344.262 293.426 343.915 297.38 344.649 302.188 cv
345.445 307.397 352.111 326.042 352.111 326.042 cv
361.346 332.009 li
361.346 332.009 364.275 331.503 364.065 330.669 cv
363.118 326.912 360.741 320.073 360.741 320.073 cv
360.741 320.073 358.074 319.6 357.009 317.465 cv
353.687 310.807 348.001 295.832 345.728 289.147 cv
cp
1 1 1 rgb
f
352.545 325.698 mo
361.455 331.456 li
362.398 331.271 363.323 330.946 363.538 330.721 cv
362.703 327.441 360.788 321.82 360.341 320.519 cv
359.556 320.316 357.496 319.615 356.54 317.699 cv
353.372 311.349 348.187 297.756 345.751 290.817 cv
344.703 294.497 344.533 297.961 345.167 302.109 cv
345.907 306.949 351.881 323.829 352.545 325.698 cv
cp
361.346 332.533 mo
361.245 332.533 361.147 332.504 361.061 332.449 cv
351.827 326.482 li
351.73 326.419 351.657 326.327 351.618 326.218 cv
351.345 325.455 344.926 307.466 344.132 302.267 cv
343.395 297.448 343.734 293.349 345.232 288.977 cv
345.305 288.765 345.504 288.623 345.728 288.623 cv
345.728 288.623 345.728 288.623 345.728 288.623 cv
345.952 288.623 346.151 288.766 346.223 288.978 cv
348.346 295.22 354.082 310.425 357.478 317.231 cv
358.409 319.097 360.81 319.554 360.834 319.558 cv
361.02 319.592 361.174 319.723 361.236 319.902 cv
361.26 319.97 363.632 326.805 364.573 330.542 cv
364.634 330.785 364.59 331.032 364.446 331.255 cv
363.936 332.039 362.012 332.425 361.435 332.525 cv
361.405 332.53 361.375 332.533 361.346 332.533 cv
cp
0 0 0 rgb
f
376.04 354.903 mo
373.918 356.29 370.777 355.072 369.219 351.014 cv
368.304 348.632 368.047 345.841 369.721 344.941 cv
372.287 343.561 374.2 344.817 375.568 346.614 cv
376.791 348.219 379.138 352.877 376.04 354.903 cv
cp
370.795 340.132 mo
367.979 339.003 365.122 330.921 365.122 330.921 cv
360.225 332.453 li
360.225 332.453 364.209 345.327 366.151 351.421 cv
368.303 358.177 372.082 360.873 377.754 358.453 cv
381.293 356.943 381.914 352.489 380.561 348.163 cv
378.198 340.608 371.951 340.595 370.795 340.132 cv
cp
1 .831373 .180392 rgb
f
371.829 344.882 mo
371.232 344.882 370.613 345.056 369.969 345.402 cv
368.627 346.124 368.871 348.647 369.708 350.826 cv
370.49 352.863 371.77 354.3 373.22 354.769 cv
374.112 355.057 375.012 354.95 375.753 354.464 cv
375.753 354.464 li
376.45 354.009 376.857 353.389 376.998 352.571 cv
377.329 350.647 376.075 348.143 375.152 346.931 cv
374.109 345.562 373.011 344.882 371.829 344.882 cv
cp
374.201 355.976 mo
373.772 355.976 373.334 355.906 372.898 355.766 cv
371.145 355.199 369.626 353.536 368.73 351.202 cv
367.757 348.668 367.442 345.572 369.473 344.479 cv
371.133 343.587 373.609 343.177 375.985 346.296 cv
376.875 347.465 378.449 350.318 378.03 352.749 cv
377.84 353.854 377.267 354.726 376.326 355.341 cv
375.682 355.762 374.954 355.976 374.201 355.976 cv
cp
360.88 332.797 mo
361.633 335.228 364.947 345.918 366.65 351.262 cv
367.832 354.974 369.493 357.342 371.584 358.299 cv
373.246 359.061 375.253 358.951 377.548 357.971 cv
381.151 356.434 381.153 351.811 380.061 348.319 cv
378.149 342.207 373.683 341.292 371.537 340.853 cv
371.12 340.767 370.819 340.705 370.6 340.618 cv
370.6 340.618 li
367.961 339.56 365.505 333.453 364.801 331.57 cv
360.88 332.797 li
cp
373.954 359.848 mo
372.952 359.848 372.015 359.649 371.147 359.252 cv
368.777 358.166 366.928 355.585 365.651 351.579 cv
363.731 345.554 359.764 332.736 359.724 332.608 cv
359.639 332.332 359.793 332.039 360.069 331.953 cv
364.966 330.421 li
365.236 330.335 365.522 330.48 365.616 330.746 cv
366.389 332.932 368.862 338.793 370.99 339.645 cv
370.99 339.645 li
371.122 339.698 371.412 339.758 371.747 339.826 cv
373.907 340.268 378.964 341.304 381.061 348.006 cv
382.671 353.154 381.454 357.444 377.959 358.935 cv
376.533 359.543 375.194 359.848 373.954 359.848 cv
cp
0 0 0 rgb
f
366.081 288.819 mo
367.834 292.989 368.449 296.911 368.042 301.757 cv
367.601 307.008 362.215 326.062 362.215 326.062 cv
353.407 332.642 li
353.407 332.642 350.45 332.336 350.603 331.49 cv
351.293 327.677 353.2 320.693 353.2 320.693 cv
353.2 320.693 355.829 320.04 356.747 317.838 cv
359.61 310.969 364.267 295.643 366.081 288.819 cv
cp
1 1 1 rgb
f
351.133 331.506 mo
351.362 331.715 352.307 331.978 353.26 332.098 cv
361.759 325.749 li
362.295 323.839 367.11 306.592 367.52 301.714 cv
367.871 297.532 367.466 294.087 366.171 290.487 cv
364.211 297.576 359.96 311.49 357.23 318.039 cv
356.407 320.015 354.399 320.854 353.63 321.111 cv
353.272 322.439 351.742 328.177 351.133 331.506 cv
cp
353.407 333.166 mo
353.389 333.166 353.371 333.165 353.353 333.163 cv
352.77 333.103 350.824 332.847 350.263 332.099 cv
350.103 331.887 350.043 331.644 350.088 331.397 cv
350.773 327.605 352.676 320.625 352.695 320.555 cv
352.745 320.372 352.89 320.23 353.074 320.184 cv
353.097 320.179 355.461 319.561 356.263 317.636 cv
359.189 310.617 363.881 295.057 365.575 288.684 cv
365.633 288.467 365.822 288.312 366.045 288.296 cv
366.271 288.277 366.477 288.409 366.564 288.616 cv
368.355 292.876 368.971 296.942 368.564 301.801 cv
368.124 307.042 362.939 325.424 362.719 326.204 cv
362.688 326.315 362.621 326.413 362.529 326.482 cv
353.72 333.062 li
353.629 333.13 353.52 333.166 353.407 333.166 cv
cp
0 0 0 rgb
f
340.3 356.48 mo
342.511 357.72 345.562 356.292 346.841 352.137 cv
347.592 349.699 347.659 346.897 345.928 346.112 cv
343.275 344.91 341.451 346.293 340.208 348.178 cv
339.097 349.862 337.071 354.669 340.3 356.48 cv
cp
344.53 341.387 mo
347.263 340.07 349.565 331.813 349.565 331.813 cv
354.555 333.009 li
354.555 333.009 351.454 346.124 349.93 352.335 cv
348.24 359.221 344.653 362.168 338.831 360.138 cv
335.197 358.872 334.275 354.47 335.332 350.062 cv
337.177 342.365 343.409 341.927 344.53 341.387 cv
cp
1 .831373 .180392 rgb
f
344.033 346.19 mo
342.767 346.19 341.649 346.944 340.645 348.466 cv
339.806 349.739 338.725 352.321 339.186 354.219 cv
339.382 355.026 339.83 355.616 340.556 356.023 cv
340.556 356.023 li
341.329 356.457 342.234 356.503 343.104 356.155 cv
344.519 355.589 345.699 354.068 346.341 351.983 cv
347.028 349.751 347.1 347.218 345.712 346.589 cv
345.124 346.323 344.566 346.19 344.033 346.19 cv
cp
341.94 357.435 mo
341.281 357.435 340.635 357.268 340.044 356.937 cv
339.064 356.387 338.433 355.556 338.168 354.466 cv
337.586 352.07 338.962 349.116 339.771 347.889 cv
341.929 344.617 344.428 344.857 346.144 345.635 cv
348.245 346.587 348.14 349.698 347.342 352.291 cv
346.606 354.681 345.203 356.444 343.493 357.128 cv
342.979 357.333 342.455 357.435 341.94 357.435 cv
cp
344.53 341.387 mo
344.534 341.387 li
344.53 341.387 li
cp
349.93 332.439 mo
349.355 334.365 347.32 340.624 344.758 341.859 cv
344.758 341.859 li
344.545 341.961 344.249 342.043 343.839 342.157 cv
341.728 342.741 337.335 343.956 335.841 350.184 cv
334.988 353.742 335.305 358.354 339.003 359.644 cv
341.36 360.465 343.369 360.439 344.976 359.566 cv
346.997 358.469 348.493 355.994 349.421 352.21 cv
350.757 346.764 353.339 335.873 353.925 333.397 cv
349.93 332.439 li
cp
342.184 361.29 mo
341.092 361.29 339.915 361.071 338.658 360.633 cv
335.071 359.382 333.565 355.185 334.823 349.94 cv
336.46 343.111 341.435 341.735 343.56 341.147 cv
343.89 341.056 344.175 340.977 344.303 340.915 cv
346.368 339.92 348.438 333.905 349.061 331.672 cv
349.137 331.4 349.414 331.239 349.688 331.303 cv
354.677 332.499 li
354.958 332.567 355.131 332.849 355.065 333.129 cv
355.034 333.26 351.946 346.318 350.439 352.46 cv
349.437 356.542 347.767 359.243 345.476 360.487 cv
344.49 361.022 343.39 361.29 342.184 361.29 cv
cp
0 0 0 rgb
f
356.724 323.582 mo
356.86 323.013 357.432 322.663 358 322.799 cv
358.569 322.935 358.919 323.507 358.783 324.076 cv
358.647 324.644 358.075 324.995 357.507 324.858 cv
356.938 324.722 356.587 324.151 356.724 323.582 cv
cp
f
77.5883 162.814 mo
77.673 182.009 li
98.5395 172.187 li
77.5883 162.814 li
cp
1 .831373 .180392 rgb
f
78.1157 163.624 mo
78.1932 181.185 li
97.284 172.199 li
78.1157 163.624 li
cp
77.673 182.532 mo
77.5754 182.532 77.4784 182.505 77.3933 182.452 cv
77.2421 182.356 77.15 182.19 77.1492 182.011 cv
77.0646 162.817 li
77.0638 162.639 77.1534 162.473 77.3025 162.376 cv
77.4516 162.279 77.64 162.264 77.8022 162.337 cv
98.7534 171.709 li
98.9402 171.793 99.0613 171.978 99.0633 172.182 cv
99.0652 172.387 98.9479 172.574 98.7626 172.661 cv
77.896 182.483 li
77.8252 182.516 77.749 182.532 77.673 182.532 cv
cp
0 0 0 rgb
f
45.2314 156.816 mo
45.2309 156.816 45.2303 156.816 45.2297 156.816 cv
44.9403 156.815 44.7067 156.579 44.7076 156.29 cv
44.7772 134.698 li
44.778 134.409 45.0124 134.176 45.3009 134.176 cv
45.3014 134.176 45.302 134.176 45.3026 134.176 cv
45.592 134.176 45.8256 134.412 45.8247 134.701 cv
45.7552 156.294 li
45.7543 156.583 45.5199 156.816 45.2314 156.816 cv
cp
f
60.0022 141.531 mo
60.0017 141.531 60.001 141.531 60.0005 141.531 cv
38.9087 141.46 li
38.6193 141.459 38.3856 141.224 38.3866 140.934 cv
38.3876 140.646 38.6219 140.412 38.9104 140.412 cv
38.9109 140.412 38.9116 140.412 38.9121 140.412 cv
60.0039 140.484 li
60.2933 140.484 60.527 140.72 60.526 141.009 cv
60.525 141.298 60.2907 141.531 60.0022 141.531 cv
cp
f
60.0022 204.176 mo
60.0017 204.176 60.001 204.176 60.0005 204.176 cv
38.9087 204.105 li
38.6193 204.104 38.3856 203.869 38.3866 203.58 cv
38.3876 203.291 38.6219 203.058 38.9104 203.058 cv
38.9109 203.058 38.9116 203.058 38.9121 203.058 cv
60.0039 203.129 li
60.2933 203.13 60.527 203.365 60.526 203.654 cv
60.525 203.943 60.2907 204.176 60.0022 204.176 cv
cp
f
45.0026 210.647 mo
45.002 210.647 45.0015 210.647 45.0009 210.647 cv
44.7117 210.646 44.4779 210.411 44.4788 210.122 cv
44.5482 188.53 li
44.549 188.241 44.7835 188.008 45.072 188.008 cv
45.0725 188.008 45.073 188.008 45.0737 188.008 cv
45.3628 188.009 45.5966 188.244 45.5957 188.533 cv
45.5263 210.125 li
45.5255 210.414 45.291 210.647 45.0026 210.647 cv
cp
f
125.544 210.647 mo
125.544 210.647 125.543 210.647 125.542 210.647 cv
125.253 210.646 125.02 210.411 125.02 210.122 cv
125.09 188.53 li
125.091 188.241 125.325 188.008 125.614 188.008 cv
125.614 188.008 125.615 188.008 125.615 188.008 cv
125.905 188.009 126.138 188.244 126.137 188.533 cv
126.068 210.125 li
126.067 210.414 125.833 210.647 125.544 210.647 cv
cp
f
131.935 204.411 mo
131.934 204.411 131.933 204.411 131.933 204.411 cv
110.841 204.339 li
110.552 204.339 110.318 204.103 110.319 203.814 cv
110.32 203.525 110.554 203.292 110.843 203.292 cv
110.843 203.292 110.844 203.292 110.844 203.292 cv
131.936 203.363 li
132.226 203.364 132.459 203.6 132.458 203.889 cv
132.457 204.178 132.223 204.411 131.935 204.411 cv
cp
f
131.935 141.765 mo
131.934 141.765 131.933 141.765 131.933 141.765 cv
110.841 141.694 li
110.552 141.693 110.318 141.458 110.319 141.169 cv
110.32 140.88 110.554 140.647 110.843 140.647 cv
110.843 140.647 110.844 140.647 110.844 140.647 cv
131.936 140.718 li
132.226 140.719 132.459 140.954 132.458 141.243 cv
132.457 141.532 132.223 141.765 131.935 141.765 cv
cp
f
125.773 156.816 mo
125.772 156.816 125.772 156.816 125.771 156.816 cv
125.482 156.815 125.248 156.579 125.249 156.29 cv
125.319 134.698 li
125.32 134.409 125.554 134.176 125.843 134.176 cv
125.843 134.176 125.844 134.176 125.844 134.176 cv
126.134 134.176 126.367 134.412 126.366 134.701 cv
126.297 156.294 li
126.296 156.583 126.062 156.816 125.773 156.816 cv
cp
f
52.2473 198.476 mo
118.598 198.476 li
118.598 146.347 li
52.2473 146.347 li
52.2473 198.476 li
cp
118.772 198.826 mo
52.0727 198.826 li
51.9762 198.826 51.8981 198.747 51.8981 198.651 cv
51.8981 146.172 li
51.8981 146.076 51.9762 145.998 52.0727 145.998 cv
118.772 145.998 li
118.869 145.998 118.947 146.076 118.947 146.172 cv
118.947 198.651 li
118.947 198.747 118.869 198.826 118.772 198.826 cv
cp
f
77.5883 162.814 mo
77.673 182.009 li
98.5395 172.187 li
77.5883 162.814 li
cp
1 .831373 .180392 rgb
f
78.1157 163.624 mo
78.1932 181.185 li
97.284 172.199 li
78.1157 163.624 li
cp
77.673 182.532 mo
77.5754 182.532 77.4784 182.505 77.3933 182.452 cv
77.2421 182.356 77.15 182.19 77.1492 182.011 cv
77.0646 162.817 li
77.0638 162.639 77.1534 162.473 77.3025 162.376 cv
77.4516 162.279 77.64 162.264 77.8022 162.337 cv
98.7534 171.709 li
98.9402 171.793 99.0613 171.978 99.0633 172.182 cv
99.0652 172.387 98.9479 172.574 98.7626 172.661 cv
77.896 182.483 li
77.8252 182.516 77.749 182.532 77.673 182.532 cv
cp
0 0 0 rgb
f
45.2314 156.816 mo
45.2309 156.816 45.2303 156.816 45.2297 156.816 cv
44.9403 156.815 44.7067 156.579 44.7076 156.29 cv
44.7772 134.698 li
44.778 134.409 45.0124 134.176 45.3009 134.176 cv
45.3014 134.176 45.302 134.176 45.3026 134.176 cv
45.592 134.176 45.8256 134.412 45.8247 134.701 cv
45.7552 156.294 li
45.7543 156.583 45.5199 156.816 45.2314 156.816 cv
cp
f
60.0022 141.531 mo
60.0017 141.531 60.001 141.531 60.0005 141.531 cv
38.9087 141.46 li
38.6193 141.459 38.3856 141.224 38.3866 140.934 cv
38.3876 140.646 38.6219 140.412 38.9104 140.412 cv
38.9109 140.412 38.9116 140.412 38.9121 140.412 cv
60.0039 140.484 li
60.2933 140.484 60.527 140.72 60.526 141.009 cv
60.525 141.298 60.2907 141.531 60.0022 141.531 cv
cp
f
60.0022 204.176 mo
60.0017 204.176 60.001 204.176 60.0005 204.176 cv
38.9087 204.105 li
38.6193 204.104 38.3856 203.869 38.3866 203.58 cv
38.3876 203.291 38.6219 203.058 38.9104 203.058 cv
38.9109 203.058 38.9116 203.058 38.9121 203.058 cv
60.0039 203.129 li
60.2933 203.13 60.527 203.365 60.526 203.654 cv
60.525 203.943 60.2907 204.176 60.0022 204.176 cv
cp
f
45.0026 210.647 mo
45.002 210.647 45.0015 210.647 45.0009 210.647 cv
44.7117 210.646 44.4779 210.411 44.4788 210.122 cv
44.5482 188.53 li
44.549 188.241 44.7835 188.008 45.072 188.008 cv
45.0725 188.008 45.073 188.008 45.0737 188.008 cv
45.3628 188.009 45.5966 188.244 45.5957 188.533 cv
45.5263 210.125 li
45.5255 210.414 45.291 210.647 45.0026 210.647 cv
cp
f
125.544 210.647 mo
125.544 210.647 125.543 210.647 125.542 210.647 cv
125.253 210.646 125.02 210.411 125.02 210.122 cv
125.09 188.53 li
125.091 188.241 125.325 188.008 125.614 188.008 cv
125.614 188.008 125.615 188.008 125.615 188.008 cv
125.905 188.009 126.138 188.244 126.137 188.533 cv
126.068 210.125 li
126.067 210.414 125.833 210.647 125.544 210.647 cv
cp
f
131.935 204.411 mo
131.934 204.411 131.933 204.411 131.933 204.411 cv
110.841 204.339 li
110.552 204.339 110.318 204.103 110.319 203.814 cv
110.32 203.525 110.554 203.292 110.843 203.292 cv
110.843 203.292 110.844 203.292 110.844 203.292 cv
131.936 203.363 li
132.226 203.364 132.459 203.6 132.458 203.889 cv
132.457 204.178 132.223 204.411 131.935 204.411 cv
cp
f
131.935 141.765 mo
131.934 141.765 131.933 141.765 131.933 141.765 cv
110.841 141.694 li
110.552 141.693 110.318 141.458 110.319 141.169 cv
110.32 140.88 110.554 140.647 110.843 140.647 cv
110.843 140.647 110.844 140.647 110.844 140.647 cv
131.936 140.718 li
132.226 140.719 132.459 140.954 132.458 141.243 cv
132.457 141.532 132.223 141.765 131.935 141.765 cv
cp
f
125.773 156.816 mo
125.772 156.816 125.772 156.816 125.771 156.816 cv
125.482 156.815 125.248 156.579 125.249 156.29 cv
125.319 134.698 li
125.32 134.409 125.554 134.176 125.843 134.176 cv
125.843 134.176 125.844 134.176 125.844 134.176 cv
126.134 134.176 126.367 134.412 126.366 134.701 cv
126.297 156.294 li
126.296 156.583 126.062 156.816 125.773 156.816 cv
cp
f
52.2473 198.476 mo
118.598 198.476 li
118.598 146.347 li
52.2473 146.347 li
52.2473 198.476 li
cp
118.772 198.826 mo
52.0727 198.826 li
51.9762 198.826 51.8981 198.747 51.8981 198.651 cv
51.8981 146.172 li
51.8981 146.076 51.9762 145.998 52.0727 145.998 cv
118.772 145.998 li
118.869 145.998 118.947 146.076 118.947 146.172 cv
118.947 198.651 li
118.947 198.747 118.869 198.826 118.772 198.826 cv
cp
f
163.72 107.776 mo
90.1303 107.776 li
89.8409 107.776 89.6065 107.541 89.6065 107.252 cv
89.6065 106.963 89.8409 106.728 90.1303 106.728 cv
163.72 106.728 li
164.009 106.728 164.243 106.963 164.243 107.252 cv
164.243 107.541 164.009 107.776 163.72 107.776 cv
cp
f
117.148 107.252 mo
117.148 101.15 118.633 100.771 120.465 100.771 cv
122.297 100.771 123.782 101.242 123.782 107.252 cv
123.782 113.886 122.297 113.733 120.465 113.733 cv
118.633 113.733 117.148 112.934 117.148 107.252 cv
cp
f
120.465 101.295 mo
119.092 101.295 117.671 101.295 117.671 107.252 cv
117.671 113.209 119.353 113.209 120.465 113.209 cv
120.587 113.209 li
121.377 113.213 121.883 113.192 122.263 112.813 cv
122.933 112.145 123.258 110.326 123.258 107.252 cv
123.258 101.295 121.838 101.295 120.465 101.295 cv
cp
120.704 114.257 mo
120.664 114.257 120.625 114.257 120.585 114.257 cv
120.465 114.257 li
117.737 114.257 116.624 112.227 116.624 107.252 cv
116.624 101.363 117.974 100.247 120.465 100.247 cv
122.898 100.247 124.306 101.393 124.306 107.252 cv
124.306 110.758 123.916 112.643 123.004 113.554 cv
122.33 114.227 121.508 114.257 120.704 114.257 cv
cp
f
104.741 105.508 mo
104.645 105.508 104.567 105.43 104.567 105.333 cv
104.567 100.771 li
104.567 100.674 104.645 100.596 104.741 100.596 cv
104.838 100.596 104.916 100.674 104.916 100.771 cv
104.916 105.333 li
104.916 105.43 104.838 105.508 104.741 105.508 cv
cp
f
119.53 105.508 mo
119.434 105.508 119.356 105.43 119.356 105.333 cv
119.356 100.771 li
119.356 100.674 119.434 100.596 119.53 100.596 cv
119.627 100.596 119.705 100.674 119.705 100.771 cv
119.705 105.333 li
119.705 105.43 119.627 105.508 119.53 105.508 cv
cp
f
134.319 105.508 mo
134.223 105.508 134.145 105.43 134.145 105.333 cv
134.145 100.771 li
134.145 100.674 134.223 100.596 134.319 100.596 cv
134.416 100.596 134.494 100.674 134.494 100.771 cv
134.494 105.333 li
134.494 105.43 134.416 105.508 134.319 105.508 cv
cp
f
149.109 105.508 mo
149.012 105.508 148.934 105.43 148.934 105.333 cv
148.934 100.771 li
148.934 100.674 149.012 100.596 149.109 100.596 cv
149.205 100.596 149.283 100.674 149.283 100.771 cv
149.283 105.333 li
149.283 105.43 149.205 105.508 149.109 105.508 cv
cp
f
433.394 375.852 mo
433.105 375.852 432.87 375.617 432.87 375.328 cv
432.87 348.441 li
432.87 348.152 433.105 347.917 433.394 347.917 cv
433.683 347.917 433.918 348.152 433.918 348.441 cv
433.918 375.328 li
433.918 375.617 433.683 375.852 433.394 375.852 cv
cp
f
426.98 370.963 mo
426.691 370.963 426.457 370.729 426.457 370.44 cv
426.457 353.329 li
426.457 353.04 426.691 352.806 426.98 352.806 cv
427.27 352.806 427.504 353.04 427.504 353.329 cv
427.504 370.44 li
427.504 370.729 427.27 370.963 426.98 370.963 cv
cp
f
420.748 366.162 mo
420.459 366.162 420.225 365.927 420.225 365.638 cv
420.225 358.131 li
420.225 357.842 420.459 357.607 420.748 357.607 cv
421.038 357.607 421.272 357.842 421.272 358.131 cv
421.272 365.638 li
421.272 365.927 421.038 366.162 420.748 366.162 cv
cp
f
439.604 370.963 mo
439.315 370.963 439.08 370.729 439.08 370.44 cv
439.08 353.329 li
439.08 353.04 439.315 352.806 439.604 352.806 cv
439.893 352.806 440.128 353.04 440.128 353.329 cv
440.128 370.44 li
440.128 370.729 439.893 370.963 439.604 370.963 cv
cp
f
445.836 366.162 mo
445.547 366.162 445.313 365.927 445.313 365.638 cv
445.313 358.131 li
445.313 357.842 445.547 357.607 445.836 357.607 cv
446.126 357.607 446.36 357.842 446.36 358.131 cv
446.36 365.638 li
446.36 365.927 446.126 366.162 445.836 366.162 cv
cp
f
502.771 375.852 mo
502.482 375.852 502.248 375.617 502.248 375.328 cv
502.248 348.441 li
502.248 348.152 502.482 347.917 502.771 347.917 cv
503.061 347.917 503.295 348.152 503.295 348.441 cv
503.295 375.328 li
503.295 375.617 503.061 375.852 502.771 375.852 cv
cp
f
496.358 370.963 mo
496.069 370.963 495.834 370.729 495.834 370.44 cv
495.834 353.329 li
495.834 353.04 496.069 352.806 496.358 352.806 cv
496.647 352.806 496.882 353.04 496.882 353.329 cv
496.882 370.44 li
496.882 370.729 496.647 370.963 496.358 370.963 cv
cp
f
490.126 366.162 mo
489.837 366.162 489.602 365.927 489.602 365.638 cv
489.602 358.131 li
489.602 357.842 489.837 357.607 490.126 357.607 cv
490.415 357.607 490.65 357.842 490.65 358.131 cv
490.65 365.638 li
490.65 365.927 490.415 366.162 490.126 366.162 cv
cp
f
508.982 370.963 mo
508.693 370.963 508.458 370.729 508.458 370.44 cv
508.458 353.329 li
508.458 353.04 508.693 352.806 508.982 352.806 cv
509.271 352.806 509.506 353.04 509.506 353.329 cv
509.506 370.44 li
509.506 370.729 509.271 370.963 508.982 370.963 cv
cp
f
515.214 366.162 mo
514.925 366.162 514.69 365.927 514.69 365.638 cv
514.69 358.131 li
514.69 357.842 514.925 357.607 515.214 357.607 cv
515.503 357.607 515.738 357.842 515.738 358.131 cv
515.738 365.638 li
515.738 365.927 515.503 366.162 515.214 366.162 cv
cp
f
470.757 375.852 mo
470.468 375.852 470.233 375.617 470.233 375.328 cv
470.233 348.441 li
470.233 348.152 470.468 347.917 470.757 347.917 cv
471.046 347.917 471.281 348.152 471.281 348.441 cv
471.281 375.328 li
471.281 375.617 471.046 375.852 470.757 375.852 cv
cp
f
458.204 370.963 mo
457.915 370.963 457.68 370.729 457.68 370.44 cv
457.68 353.329 li
457.68 353.04 457.915 352.806 458.204 352.806 cv
458.493 352.806 458.728 353.04 458.728 353.329 cv
458.728 370.44 li
458.728 370.729 458.493 370.963 458.204 370.963 cv
cp
f
451.974 363.936 mo
451.685 363.936 451.45 363.701 451.45 363.412 cv
451.45 360.357 li
451.45 360.068 451.685 359.833 451.974 359.833 cv
452.263 359.833 452.498 360.068 452.498 360.357 cv
452.498 363.412 li
452.498 363.701 452.263 363.936 451.974 363.936 cv
cp
f
521.113 363.936 mo
520.823 363.936 520.589 363.701 520.589 363.412 cv
520.589 360.357 li
520.589 360.068 520.823 359.833 521.113 359.833 cv
521.402 359.833 521.636 360.068 521.636 360.357 cv
521.636 363.412 li
521.636 363.701 521.402 363.936 521.113 363.936 cv
cp
f
464.434 366.162 mo
464.145 366.162 463.91 365.927 463.91 365.638 cv
463.91 358.131 li
463.91 357.842 464.145 357.607 464.434 357.607 cv
464.723 357.607 464.958 357.842 464.958 358.131 cv
464.958 365.638 li
464.958 365.927 464.723 366.162 464.434 366.162 cv
cp
f
476.967 370.963 mo
476.678 370.963 476.443 370.729 476.443 370.44 cv
476.443 353.329 li
476.443 353.04 476.678 352.806 476.967 352.806 cv
477.256 352.806 477.491 353.04 477.491 353.329 cv
477.491 370.44 li
477.491 370.729 477.256 370.963 476.967 370.963 cv
cp
f
483.549 368.563 mo
483.259 368.563 483.025 368.328 483.025 368.039 cv
483.025 355.73 li
483.025 355.441 483.259 355.206 483.549 355.206 cv
483.838 355.206 484.072 355.441 484.072 355.73 cv
484.072 368.039 li
484.072 368.328 483.838 368.563 483.549 368.563 cv
cp
f
302.761 59.4409 mo
302.472 59.4409 302.237 59.2064 302.237 58.9171 cv
302.237 32.0298 li
302.237 31.7404 302.472 31.506 302.761 31.506 cv
303.05 31.506 303.285 31.7404 303.285 32.0298 cv
303.285 58.9171 li
303.285 59.2064 303.05 59.4409 302.761 59.4409 cv
cp
f
296.347 54.5523 mo
296.058 54.5523 295.824 54.3178 295.824 54.0285 cv
295.824 36.9184 li
295.824 36.629 296.058 36.3946 296.347 36.3946 cv
296.637 36.3946 296.871 36.629 296.871 36.9184 cv
296.871 54.0285 li
296.871 54.3178 296.637 54.5523 296.347 54.5523 cv
cp
f
290.115 49.751 mo
289.826 49.751 289.591 49.5165 289.591 49.2272 cv
289.591 41.7197 li
289.591 41.4303 289.826 41.1959 290.115 41.1959 cv
290.405 41.1959 290.639 41.4303 290.639 41.7197 cv
290.639 49.2272 li
290.639 49.5165 290.405 49.751 290.115 49.751 cv
cp
f
308.971 54.5523 mo
308.682 54.5523 308.447 54.3178 308.447 54.0285 cv
308.447 36.9184 li
308.447 36.629 308.682 36.3946 308.971 36.3946 cv
309.261 36.3946 309.495 36.629 309.495 36.9184 cv
309.495 54.0285 li
309.495 54.3178 309.261 54.5523 308.971 54.5523 cv
cp
f
315.203 49.751 mo
314.914 49.751 314.68 49.5165 314.68 49.2272 cv
314.68 41.7197 li
314.68 41.4303 314.914 41.1959 315.203 41.1959 cv
315.493 41.1959 315.727 41.4303 315.727 41.7197 cv
315.727 49.2272 li
315.727 49.5165 315.493 49.751 315.203 49.751 cv
cp
f
340.124 59.4409 mo
339.835 59.4409 339.6 59.2064 339.6 58.9171 cv
339.6 32.0298 li
339.6 31.7404 339.835 31.506 340.124 31.506 cv
340.413 31.506 340.648 31.7404 340.648 32.0298 cv
340.648 58.9171 li
340.648 59.2064 340.413 59.4409 340.124 59.4409 cv
cp
f
327.571 54.5523 mo
327.282 54.5523 327.047 54.3178 327.047 54.0285 cv
327.047 36.9184 li
327.047 36.629 327.282 36.3946 327.571 36.3946 cv
327.86 36.3946 328.095 36.629 328.095 36.9184 cv
328.095 54.0285 li
328.095 54.3178 327.86 54.5523 327.571 54.5523 cv
cp
f
321.341 47.5249 mo
321.051 47.5249 320.817 47.2905 320.817 47.0011 cv
320.817 43.9457 li
320.817 43.6564 321.051 43.422 321.341 43.422 cv
321.63 43.422 321.865 43.6564 321.865 43.9457 cv
321.865 47.0011 li
321.865 47.2905 321.63 47.5249 321.341 47.5249 cv
cp
f
333.801 49.751 mo
333.512 49.751 333.277 49.5165 333.277 49.2272 cv
333.277 41.7197 li
333.277 41.4303 333.512 41.1959 333.801 41.1959 cv
334.09 41.1959 334.325 41.4303 334.325 41.7197 cv
334.325 49.2272 li
334.325 49.5165 334.09 49.751 333.801 49.751 cv
cp
f
346.334 54.5523 mo
346.045 54.5523 345.81 54.3178 345.81 54.0285 cv
345.81 36.9184 li
345.81 36.629 346.045 36.3946 346.334 36.3946 cv
346.624 36.3946 346.858 36.629 346.858 36.9184 cv
346.858 54.0285 li
346.858 54.3178 346.624 54.5523 346.334 54.5523 cv
cp
f
352.915 52.1516 mo
352.626 52.1516 352.392 51.9172 352.392 51.6278 cv
352.392 39.319 li
352.392 39.0297 352.626 38.7952 352.915 38.7952 cv
353.205 38.7952 353.439 39.0297 353.439 39.319 cv
353.439 51.6278 li
353.439 51.9172 353.205 52.1516 352.915 52.1516 cv
cp
f
668.186 209.003 mo
664.855 209.003 662.145 211.713 662.145 215.045 cv
662.145 218.376 664.855 221.086 668.186 221.086 cv
671.517 221.086 674.228 218.376 674.228 215.045 cv
674.228 211.713 671.517 209.003 668.186 209.003 cv
cp
668.186 222.134 mo
664.277 222.134 661.097 218.954 661.097 215.045 cv
661.097 211.136 664.277 207.956 668.186 207.956 cv
672.095 207.956 675.275 211.136 675.275 215.045 cv
675.275 218.954 672.095 222.134 668.186 222.134 cv
cp
f
490.618 292.857 mo
489.097 292.857 487.859 294.095 487.859 295.616 cv
487.859 297.137 489.097 298.375 490.618 298.375 cv
492.14 298.375 493.377 297.137 493.377 295.616 cv
493.377 294.095 492.14 292.857 490.618 292.857 cv
cp
490.618 299.422 mo
488.52 299.422 486.812 297.715 486.812 295.616 cv
486.812 293.517 488.52 291.81 490.618 291.81 cv
492.717 291.81 494.425 293.517 494.425 295.616 cv
494.425 297.715 492.717 299.422 490.618 299.422 cv
cp
f
260.889 352.049 mo
259.368 352.049 258.13 353.287 258.13 354.808 cv
258.13 356.329 259.368 357.567 260.889 357.567 cv
262.41 357.567 263.648 356.329 263.648 354.808 cv
263.648 353.287 262.41 352.049 260.889 352.049 cv
cp
260.889 358.614 mo
258.79 358.614 257.082 356.907 257.082 354.808 cv
257.082 352.709 258.79 351.002 260.889 351.002 cv
262.988 351.002 264.695 352.709 264.695 354.808 cv
264.695 356.907 262.988 358.614 260.889 358.614 cv
cp
f
571.928 44.7007 mo
570.407 44.7007 569.169 45.9382 569.169 47.4594 cv
569.169 48.9806 570.407 50.2183 571.928 50.2183 cv
573.449 50.2183 574.687 48.9806 574.687 47.4594 cv
574.687 45.9382 573.449 44.7007 571.928 44.7007 cv
cp
571.928 51.2659 mo
569.829 51.2659 568.121 49.5583 568.121 47.4594 cv
568.121 45.3606 569.829 43.6532 571.928 43.6532 cv
574.027 43.6532 575.734 45.3606 575.734 47.4594 cv
575.734 49.5583 574.027 51.2659 571.928 51.2659 cv
cp
f
289.591 94.0325 mo
288.07 94.0325 286.833 95.2701 286.833 96.7914 cv
286.833 98.3126 288.07 99.5501 289.591 99.5501 cv
291.113 99.5501 292.35 98.3126 292.35 96.7914 cv
292.35 95.2701 291.113 94.0325 289.591 94.0325 cv
cp
289.591 100.598 mo
287.493 100.598 285.785 98.8901 285.785 96.7914 cv
285.785 94.6925 287.493 92.9849 289.591 92.9849 cv
291.69 92.9849 293.398 94.6925 293.398 96.7914 cv
293.398 98.8901 291.69 100.598 289.591 100.598 cv
cp
f
100.799 231.614 mo
97.468 231.614 94.7578 234.324 94.7578 237.655 cv
94.7578 240.986 97.468 243.697 100.799 243.697 cv
104.131 243.697 106.841 240.986 106.841 237.655 cv
106.841 234.324 104.131 231.614 100.799 231.614 cv
cp
100.799 244.744 mo
96.8903 244.744 93.7103 241.564 93.7103 237.655 cv
93.7103 233.746 96.8903 230.566 100.799 230.566 cv
104.708 230.566 107.888 233.746 107.888 237.655 cv
107.888 241.564 104.708 244.744 100.799 244.744 cv
cp
f
653.84 257.996 mo
653.84 256.579 654.989 255.43 656.406 255.43 cv
657.823 255.43 658.972 256.579 658.972 257.996 cv
658.972 259.413 657.823 260.562 656.406 260.562 cv
654.989 260.562 653.84 259.413 653.84 257.996 cv
cp
f
656.406 255.954 mo
655.28 255.954 654.364 256.87 654.364 257.996 cv
654.364 259.122 655.28 260.038 656.406 260.038 cv
657.532 260.038 658.449 259.122 658.449 257.996 cv
658.449 256.87 657.532 255.954 656.406 255.954 cv
cp
656.406 261.086 mo
654.703 261.086 653.317 259.699 653.317 257.996 cv
653.317 256.292 654.703 254.906 656.406 254.906 cv
658.11 254.906 659.496 256.292 659.496 257.996 cv
659.496 259.699 658.11 261.086 656.406 261.086 cv
cp
f
159.353 314.026 mo
159.353 312.609 160.501 311.46 161.919 311.46 cv
163.336 311.46 164.484 312.609 164.484 314.026 cv
164.484 315.443 163.336 316.592 161.919 316.592 cv
160.501 316.592 159.353 315.443 159.353 314.026 cv
cp
f
161.919 311.984 mo
160.793 311.984 159.876 312.9 159.876 314.026 cv
159.876 315.152 160.793 316.068 161.919 316.068 cv
163.044 316.068 163.961 315.152 163.961 314.026 cv
163.961 312.9 163.044 311.984 161.919 311.984 cv
cp
161.919 317.115 mo
160.215 317.115 158.829 315.73 158.829 314.026 cv
158.829 312.322 160.215 310.936 161.919 310.936 cv
163.622 310.936 165.008 312.322 165.008 314.026 cv
165.008 315.73 163.622 317.115 161.919 317.115 cv
cp
f
91.1443 73.2911 mo
91.1443 71.874 92.2931 70.7252 93.7102 70.7252 cv
95.1273 70.7252 96.2761 71.874 96.2761 73.2911 cv
96.2761 74.7082 95.1273 75.857 93.7102 75.857 cv
92.2931 75.857 91.1443 74.7082 91.1443 73.2911 cv
cp
f
93.7103 71.2489 mo
92.5843 71.2489 91.6682 72.1652 91.6682 73.2912 cv
91.6682 74.4172 92.5843 75.3331 93.7103 75.3331 cv
94.8363 75.3331 95.7524 74.4172 95.7524 73.2912 cv
95.7524 72.1652 94.8363 71.2489 93.7103 71.2489 cv
cp
93.7103 76.3807 mo
92.0066 76.3807 90.6206 74.9948 90.6206 73.2912 cv
90.6206 71.5875 92.0066 70.2014 93.7103 70.2014 cv
95.4139 70.2014 96.7999 71.5875 96.7999 73.2912 cv
96.7999 74.9948 95.4139 76.3807 93.7103 76.3807 cv
cp
f
388.36 234.245 mo
388.36 231.722 390.405 229.677 392.928 229.677 cv
395.45 229.677 397.495 231.722 397.495 234.245 cv
397.495 236.767 395.45 238.812 392.928 238.812 cv
390.405 238.812 388.36 236.767 388.36 234.245 cv
cp
f
392.928 230.201 mo
390.698 230.201 388.884 232.015 388.884 234.245 cv
388.884 236.475 390.698 238.289 392.928 238.289 cv
395.157 238.289 396.971 236.475 396.971 234.245 cv
396.971 232.015 395.157 230.201 392.928 230.201 cv
cp
392.928 239.336 mo
390.12 239.336 387.836 237.052 387.836 234.245 cv
387.836 231.438 390.12 229.154 392.928 229.154 cv
395.735 229.154 398.019 231.438 398.019 234.245 cv
398.019 237.052 395.735 239.336 392.928 239.336 cv
cp
f
589.901 174.044 mo
588.371 182.559 592.239 192.102 599.871 196.175 cv
604.027 198.394 608.879 198.929 613.199 200.808 cv
617.518 202.687 621.579 206.794 620.882 211.453 cv
620.419 214.548 617.57 221.286 626.186 226.84 cv
633.293 231.421 628.606 249.471 603.754 253.489 cv
596.139 254.719 601.737 249.506 594.386 247.171 cv
587.127 244.866 581.037 239.606 576.765 233.301 cv
572.493 226.995 569.915 219.68 568.175 212.266 cv
566.171 203.727 565.277 194.501 568.608 186.387 cv
571.938 178.274 580.556 171.819 589.901 174.044 cv
cp
f
586.167 174.125 mo
578.37 174.125 571.762 180.081 569.092 186.586 cv
566.312 193.36 566.182 201.482 568.685 212.146 cv
570.69 220.686 573.474 227.509 577.199 233.007 cv
581.739 239.708 587.899 244.561 594.544 246.672 cv
598.3 247.865 598.936 249.848 599.401 251.296 cv
599.867 252.746 600.125 253.544 603.67 252.972 cv
619.773 250.369 627.073 241.864 628.43 235.373 cv
629.165 231.86 628.196 228.759 625.902 227.28 cv
618.06 222.226 619.344 216.242 620.111 212.667 cv
620.217 212.173 620.308 211.746 620.364 211.375 cv
621.028 206.938 617.007 203.036 612.99 201.289 cv
611.109 200.47 609.076 199.897 607.11 199.343 cv
604.593 198.634 601.99 197.9 599.625 196.638 cv
592.193 192.671 587.907 183.401 589.302 174.447 cv
588.241 174.229 587.193 174.125 586.167 174.125 cv
cp
601.815 254.194 mo
599.443 254.194 598.891 253.132 598.404 251.616 cv
597.965 250.249 597.468 248.7 594.227 247.671 cv
587.358 245.489 581.003 240.49 576.331 233.594 cv
572.534 227.989 569.699 221.052 567.665 212.385 cv
565.11 201.498 565.256 193.174 568.123 186.189 cv
571.362 178.297 580.137 171.179 590.022 173.534 cv
590.293 173.599 590.466 173.863 590.417 174.137 cv
588.859 182.807 592.939 191.882 600.118 195.714 cv
602.383 196.923 604.931 197.641 607.394 198.335 cv
609.394 198.898 611.461 199.481 613.408 200.328 cv
617.78 202.229 622.146 206.546 621.4 211.53 cv
621.339 211.934 621.24 212.397 621.135 212.887 cv
620.379 216.411 619.236 221.737 626.469 226.4 cv
629.137 228.119 630.281 231.64 629.456 235.587 cv
628.03 242.404 620.465 251.318 603.837 254.006 cv
603.045 254.134 602.378 254.194 601.815 254.194 cv
cp
f
560.006 153.442 mo
562.527 165.733 548.741 183.15 543.707 194.643 cv
542.071 198.378 539.693 201.779 538.349 205.629 cv
536.751 210.206 536.701 215.181 537.138 220.008 cv
537.964 229.134 540.705 238.496 547.122 245.036 cv
553.539 251.577 564.275 254.428 572.192 249.814 cv
579.138 245.766 582.31 237.067 581.873 229.038 cv
581.436 221.01 578.01 213.475 574.395 206.293 cv
565.711 189.04 571.81 168.321 560.006 153.442 cv
cp
f
560.795 155.387 mo
561.386 164.004 555.388 174.495 550.05 183.833 cv
547.771 187.821 545.617 191.588 544.187 194.853 cv
543.492 196.441 542.656 197.983 541.848 199.475 cv
540.748 201.506 539.61 203.607 538.843 205.801 cv
537.508 209.627 537.132 214.126 537.66 219.962 cv
538.632 230.695 541.941 239.008 547.496 244.669 cv
554.233 251.537 564.736 253.554 571.928 249.362 cv
578.125 245.75 581.824 237.783 581.35 229.067 cv
580.911 221.006 577.443 213.512 573.927 206.529 cv
569.978 198.682 569.05 190.102 568.154 181.805 cv
567.117 172.213 566.134 163.117 560.795 155.387 cv
cp
563.447 252.58 mo
557.556 252.58 551.317 250.06 546.748 245.403 cv
541.02 239.565 537.611 231.037 536.616 220.056 cv
536.074 214.067 536.468 209.427 537.854 205.456 cv
538.648 203.182 539.807 201.044 540.927 198.976 cv
541.725 197.503 542.55 195.98 543.228 194.433 cv
544.68 191.117 546.847 187.327 549.141 183.314 cv
554.818 173.382 561.253 162.126 559.493 153.548 cv
559.444 153.31 559.565 153.07 559.785 152.967 cv
560.004 152.865 560.266 152.927 560.417 153.117 cv
567.004 161.42 568.069 171.267 569.195 181.693 cv
570.082 189.897 570.999 198.38 574.863 206.057 cv
578.428 213.14 581.946 220.747 582.396 229.01 cv
582.891 238.115 578.989 246.459 572.455 250.267 cv
569.775 251.829 566.662 252.58 563.447 252.58 cv
cp
f
576.885 216.78 mo
576.66 210.228 576.769 203.765 577.033 198.866 cv
574.389 197.542 571.535 196.621 568.614 196.149 cv
567.302 195.937 565.823 195.855 564.813 196.648 cv
564.18 197.144 561.184 194.501 560.873 195.229 cv
558.74 200.231 556.568 212.278 554.435 217.28 cv
554.27 217.665 544.248 219.037 544.083 219.425 cv
543.388 221.054 548.51 227.63 549.027 227.974 cv
576.374 246.156 591.132 218.927 591.132 218.927 cv
591.132 218.927 584.584 218.252 576.885 216.78 cv
cp
1 1 1 rgb
f
544.384 219.842 mo
544.384 219.842 li
544.384 219.842 li
cp
544.528 219.789 mo
544.405 221.277 548.6 226.962 549.33 227.547 cv
557.528 232.996 565.393 234.846 572.693 233.033 cv
582.664 230.559 588.704 221.865 590.266 219.358 cv
588.273 219.128 582.859 218.456 576.787 217.294 cv
576.547 217.249 576.37 217.042 576.362 216.798 cv
576.163 211.023 576.211 204.626 576.492 199.183 cv
573.974 197.959 571.297 197.113 568.53 196.666 cv
567.413 196.486 566.019 196.368 565.136 197.06 cv
564.544 197.524 563.637 196.994 562.489 196.322 cv
562.106 196.097 561.561 195.778 561.258 195.666 cv
560.238 198.162 559.183 202.338 558.162 206.381 cv
557.099 210.592 556 214.946 554.917 217.486 cv
554.752 217.87 554.722 217.94 549.36 218.865 cv
547.583 219.172 545.206 219.583 544.528 219.789 cv
cp
567.156 234.756 mo
561.261 234.756 555.089 232.633 548.737 228.41 cv
548.384 228.174 542.713 221.3 543.601 219.219 cv
543.766 218.833 543.795 218.763 549.182 217.833 cv
550.982 217.523 553.399 217.105 554.024 216.904 cv
555.053 214.415 556.117 210.202 557.147 206.125 cv
558.21 201.915 559.309 197.561 560.391 195.023 cv
560.474 194.828 560.631 194.684 560.832 194.618 cv
561.332 194.453 561.958 194.796 563.018 195.418 cv
563.491 195.695 564.266 196.149 564.557 196.184 cv
565.754 195.297 567.394 195.422 568.698 195.632 cv
571.682 196.114 574.565 197.044 577.268 198.398 cv
577.454 198.491 577.568 198.686 577.556 198.894 cv
577.267 204.251 577.21 210.586 577.395 216.344 cv
584.807 217.741 591.121 218.399 591.185 218.406 cv
591.36 218.424 591.514 218.528 591.595 218.682 cv
591.677 218.837 591.676 219.023 591.592 219.176 cv
591.528 219.295 585.039 231.043 572.954 234.048 cv
571.055 234.52 569.121 234.756 567.156 234.756 cv
cp
0 0 0 rgb
f
551.673 153.161 mo
550.187 159.098 548.984 165.468 545.301 170.507 cv
543.292 173.255 537.201 188.856 547.941 198.238 cv
553.586 203.169 561.321 205.676 569.723 204.25 cv
575.422 203.283 584.43 196.833 586.723 187.798 cv
590.108 190.359 594.883 189.282 596.281 185.879 cv
597.087 183.918 595.892 180.587 593.55 179.79 cv
591.738 179.174 591.519 179.107 589.757 179.605 cv
590.43 175.207 591.495 170.88 593.407 166.271 cv
590.97 159.799 585.004 154.623 578.485 150.84 cv
576.329 149.59 574.062 148.447 571.62 147.816 cv
564.639 146.013 553.199 147.063 551.673 153.161 cv
cp
1 1 1 rgb
f
551.673 153.161 mo
551.677 153.161 li
551.673 153.161 li
cp
564.872 147.545 mo
561.332 147.545 557.68 148.176 555.133 149.69 cv
553.534 150.641 552.541 151.852 552.181 153.288 cv
552.181 153.288 li
552.001 154.008 551.825 154.734 551.649 155.463 cv
550.357 160.793 549.021 166.304 545.724 170.816 cv
544.346 172.701 537.371 188.309 548.285 197.843 cv
554.166 202.981 561.748 205.072 569.635 203.734 cv
574.975 202.827 583.952 196.585 586.215 187.669 cv
586.259 187.498 586.384 187.361 586.55 187.303 cv
586.715 187.244 586.899 187.274 587.039 187.38 cv
588.612 188.57 590.648 188.981 592.485 188.479 cv
594.033 188.057 595.24 187.036 595.797 185.68 cv
596.154 184.812 596.058 183.573 595.546 182.447 cv
595.06 181.376 594.271 180.589 593.381 180.286 cv
591.624 179.688 591.519 179.652 589.899 180.109 cv
589.728 180.157 589.544 180.115 589.41 179.997 cv
589.277 179.879 589.212 179.702 589.239 179.526 cv
589.984 174.656 591.131 170.435 592.843 166.264 cv
590.15 159.345 583.419 154.309 578.222 151.294 cv
576.441 150.26 574.066 148.989 571.489 148.323 cv
569.58 147.83 567.251 147.545 564.872 147.545 cv
cp
565.006 205.177 mo
558.565 205.177 552.511 202.926 547.596 198.633 cv
536.84 189.236 542.417 173.565 544.878 170.198 cv
548.052 165.855 549.363 160.446 550.63 155.216 cv
550.808 154.485 550.984 153.756 551.165 153.034 cv
551.595 151.316 552.75 149.889 554.598 148.79 cv
559.101 146.113 566.796 146.029 571.751 147.309 cv
574.452 148.007 576.909 149.32 578.748 150.387 cv
584.14 153.517 591.146 158.78 593.897 166.086 cv
593.944 166.211 593.941 166.348 593.891 166.472 cv
592.261 170.4 591.145 174.367 590.4 178.894 cv
591.618 178.611 592.1 178.744 593.719 179.294 cv
594.881 179.689 595.894 180.681 596.5 182.014 cv
597.127 183.394 597.229 184.952 596.766 186.079 cv
596.084 187.738 594.625 188.981 592.761 189.49 cv
590.852 190.011 588.761 189.693 587.034 188.642 cv
584.36 197.714 575.424 203.814 569.81 204.766 cv
568.193 205.041 566.588 205.177 565.006 205.177 cv
cp
0 0 0 rgb
f
581.238 179.816 mo
581.242 179.816 li
581.238 179.816 li
cp
573.662 169.259 mo
572.228 169.259 570.799 169.7 569.513 170.557 cv
567.693 171.77 566.378 173.668 565.812 175.9 cv
564.647 180.486 567.046 185.068 571.159 186.112 cv
573.142 186.616 575.227 186.231 577.03 185.029 cv
578.85 183.816 580.164 181.919 580.73 179.687 cv
581.297 177.455 581.047 175.161 580.026 173.227 cv
579.014 171.31 577.366 169.977 575.383 169.474 cv
574.815 169.33 574.238 169.259 573.662 169.259 cv
cp
572.884 187.376 mo
572.221 187.376 571.557 187.294 570.902 187.127 cv
566.229 185.941 563.49 180.788 564.796 175.642 cv
565.427 173.158 566.896 171.043 568.931 169.686 cv
570.984 168.318 573.367 167.882 575.641 168.459 cv
577.914 169.036 579.801 170.555 580.952 172.738 cv
582.094 174.902 582.376 177.461 581.746 179.945 cv
581.746 179.945 li
581.115 182.428 579.647 184.543 577.611 185.9 cv
576.15 186.874 574.521 187.376 572.884 187.376 cv
cp
f
550.667 161.351 mo
549.233 161.351 547.804 161.793 546.517 162.65 cv
544.697 163.863 543.383 165.76 542.817 167.992 cv
542.25 170.224 542.5 172.518 543.521 174.452 cv
544.533 176.369 546.181 177.702 548.164 178.204 cv
550.147 178.708 552.232 178.323 554.035 177.121 cv
555.855 175.908 557.169 174.011 557.735 171.779 cv
557.735 171.779 li
558.9 167.192 556.501 162.611 552.388 161.567 cv
551.82 161.423 551.243 161.351 550.667 161.351 cv
cp
549.889 179.469 mo
549.226 179.469 548.562 179.386 547.906 179.22 cv
545.633 178.643 543.746 177.124 542.595 174.941 cv
541.453 172.777 541.171 170.218 541.801 167.734 cv
542.432 165.251 543.901 163.135 545.936 161.778 cv
547.989 160.41 550.372 159.975 552.646 160.551 cv
557.318 161.738 560.057 166.891 558.751 172.037 cv
558.751 172.037 li
558.12 174.521 556.652 176.636 554.616 177.993 cv
553.155 178.967 551.526 179.469 549.889 179.469 cv
cp
f
612.467 137.36 mo
613.166 128.852 606.836 121.387 598.327 120.688 cv
589.819 119.989 582.354 126.319 581.655 134.827 cv
580.955 143.336 587.286 150.8 595.794 151.5 cv
604.303 152.199 611.767 145.869 612.467 137.36 cv
cp
f
597.036 121.159 mo
593.506 121.159 590.124 122.395 587.401 124.704 cv
584.359 127.284 582.504 130.895 582.177 134.87 cv
581.502 143.077 587.63 150.303 595.837 150.977 cv
599.81 151.305 603.677 150.064 606.72 147.484 cv
609.762 144.903 611.618 141.293 611.944 137.317 cv
611.944 137.317 li
612.271 133.342 611.03 129.477 608.451 126.435 cv
605.87 123.392 602.26 121.537 598.284 121.21 cv
597.867 121.176 597.45 121.159 597.036 121.159 cv
cp
597.088 152.077 mo
596.644 152.077 596.198 152.058 595.751 152.022 cv
586.969 151.3 580.411 143.567 581.133 134.784 cv
581.483 130.53 583.468 126.666 586.724 123.905 cv
589.98 121.144 594.112 119.817 598.37 120.166 cv
602.625 120.516 606.488 122.501 609.249 125.757 cv
612.01 129.013 613.338 133.149 612.988 137.403 cv
612.639 141.658 610.653 145.521 607.397 148.283 cv
604.484 150.753 600.865 152.077 597.088 152.077 cv
cp
f
589.029 179.999 mo
587.623 172.898 587.005 167.941 588.534 160.58 cv
571.91 163.222 558.637 159.4 545.939 153.804 cv
546.534 151.503 548.917 146.831 550.651 145.114 cv
554.904 140.903 559.437 137.594 568.599 137.197 cv
575.02 136.919 583.004 138.204 588.571 141.392 cv
594.103 144.559 597.891 149.728 600.488 155.163 cv
602.554 159.488 603.347 165.551 602.373 170.848 cv
601.539 175.385 599.279 178.08 595.696 181.62 cv
594.864 180.631 594.098 179.66 592.777 179.411 cv
591.457 179.162 590.42 179.472 589.029 179.999 cv
cp
f
591.865 178.8 mo
592.188 178.8 592.522 178.83 592.875 178.897 cv
594.17 179.141 594.986 179.975 595.731 180.848 cv
599.275 177.301 601.113 174.803 601.857 170.753 cv
602.786 165.705 602.063 159.674 600.015 155.389 cv
597.031 149.141 593.092 144.585 588.311 141.846 cv
582.35 138.434 574.234 137.477 568.622 137.72 cv
559.205 138.128 554.763 141.78 551.02 145.486 cv
549.494 146.997 547.308 151.146 546.569 153.508 cv
557.595 158.332 571.176 162.808 588.451 160.063 cv
588.621 160.036 588.794 160.094 588.912 160.219 cv
589.031 160.343 589.082 160.518 589.046 160.687 cv
587.524 168.018 588.214 173.097 589.424 179.295 cv
590.245 179.006 591.017 178.8 591.865 178.8 cv
cp
595.697 182.144 mo
595.689 182.144 595.681 182.144 595.672 182.143 cv
595.526 182.137 595.39 182.069 595.296 181.958 cv
595.192 181.834 li
594.425 180.92 593.762 180.13 592.68 179.926 cv
591.559 179.715 590.668 179.939 589.214 180.488 cv
589.07 180.542 588.909 180.531 588.774 180.456 cv
588.64 180.382 588.545 180.251 588.515 180.1 cv
587.251 173.714 586.461 168.572 587.873 161.212 cv
570.463 163.79 556.81 159.167 545.728 154.283 cv
545.493 154.18 545.367 153.921 545.432 153.673 cv
546.059 151.25 548.524 146.484 550.283 144.741 cv
554.171 140.891 558.787 137.097 568.577 136.673 cv
574.332 136.423 582.677 137.413 588.831 140.937 cv
593.801 143.783 597.882 148.494 600.961 154.938 cv
603.13 159.478 603.868 165.611 602.888 170.943 cv
601.992 175.819 599.383 178.714 596.065 181.993 cv
595.966 182.09 595.834 182.144 595.697 182.144 cv
cp
f
563.085 194.247 mo
561.13 194.247 559.502 193.391 558.713 191.943 cv
558.574 191.689 558.668 191.37 558.922 191.232 cv
559.176 191.095 559.495 191.187 559.633 191.441 cv
560.248 192.571 561.588 193.232 563.188 193.199 cv
564.99 193.166 566.753 192.421 568.153 191.103 cv
568.363 190.905 568.695 190.914 568.893 191.125 cv
569.092 191.335 569.082 191.667 568.871 191.865 cv
567.282 193.363 565.271 194.208 563.207 194.246 cv
563.166 194.247 563.125 194.247 563.085 194.247 cv
cp
f
572.74 178.028 mo
572.928 177.286 572.447 176.523 571.665 176.325 cv
570.882 176.126 570.096 176.567 569.907 177.309 cv
569.719 178.051 570.2 178.813 570.983 179.012 cv
571.765 179.21 572.552 178.77 572.74 178.028 cv
cp
f
552.206 171.121 mo
552.394 170.379 551.913 169.617 551.131 169.418 cv
550.349 169.22 549.562 169.66 549.373 170.402 cv
549.185 171.144 549.666 171.906 550.449 172.105 cv
551.231 172.303 552.018 171.863 552.206 171.121 cv
cp
f
556.69 182.377 mo
556.564 182.377 556.437 182.332 556.336 182.24 cv
554.778 180.816 li
554.586 180.641 554.228 180.314 554.233 179.827 cv
554.239 179.236 554.752 178.919 555.028 178.749 cv
557.141 177.442 558.552 175.224 558.801 172.814 cv
558.83 172.527 559.087 172.32 559.375 172.347 cv
559.663 172.377 559.872 172.635 559.843 172.922 cv
559.56 175.652 557.966 178.163 555.579 179.64 cv
555.519 179.676 555.353 179.779 555.291 179.848 cv
555.312 179.872 555.365 179.933 555.484 180.043 cv
557.043 181.467 li
557.256 181.662 557.271 181.993 557.076 182.207 cv
556.973 182.32 556.832 182.377 556.69 182.377 cv
cp
f
566.32 172.66 mo
566.13 172.66 565.947 172.557 565.854 172.377 cv
565.019 170.762 563.276 169.564 561.414 169.326 cv
560.476 169.204 559.387 169.45 559.123 170.15 cv
559.021 170.421 558.719 170.558 558.449 170.456 cv
558.178 170.354 558.041 170.052 558.143 169.781 cv
558.622 168.508 560.2 168.114 561.547 168.286 cv
563.74 168.567 565.796 169.984 566.784 171.896 cv
566.917 172.153 566.817 172.469 566.56 172.601 cv
566.483 172.641 566.401 172.66 566.32 172.66 cv
cp
f
588.576 179.851 mo
588.513 179.851 588.448 179.839 588.385 179.815 cv
581.722 177.199 li
581.452 177.093 581.32 176.789 581.425 176.52 cv
581.531 176.25 581.835 176.118 582.104 176.223 cv
588.768 178.84 li
589.037 178.945 589.17 179.25 589.064 179.519 cv
588.983 179.725 588.786 179.851 588.576 179.851 cv
cp
f
587.959 184.954 mo
587.893 184.954 587.826 184.942 587.761 184.915 cv
587.493 184.806 587.365 184.5 587.474 184.233 cv
588.133 182.617 588.46 180.842 588.418 179.098 cv
588.411 178.809 588.64 178.569 588.93 178.562 cv
589.205 178.561 589.459 178.784 589.466 179.074 cv
589.51 180.96 589.157 182.881 588.444 184.628 cv
588.361 184.831 588.166 184.954 587.959 184.954 cv
cp
f
601.773 274.193 mo
608.246 270.43 618.984 257.084 616.045 246.268 cv
614.479 240.506 611.715 219.762 581.466 217.821 cv
580.856 227.464 571.454 231.816 565.451 232.534 cv
562.183 232.924 549.856 232.558 549.856 218.248 cv
541.695 218.697 531.387 219.958 515.523 226.276 cv
503.503 231.063 483.007 234.231 483.007 234.231 cv
483.007 234.231 462.285 207.72 454.843 196.848 cv
450.758 190.88 443.385 215.615 438.826 205.171 cv
438.134 203.588 460.051 247.423 461.832 250.737 cv
471.143 268.063 514.117 257.098 522.434 257.098 cv
521.621 269.169 526.773 276.31 530.97 279.973 cv
532.264 307.842 525.45 327.128 525.45 327.128 cv
525.45 327.128 563.566 341.289 603.032 329.631 cv
606.059 328.737 595.474 304.336 601.773 274.193 cv
cp
1 .831373 .180392 rgb
f
526.109 326.805 mo
528.21 327.533 537.089 330.445 549.544 332.237 cv
562.681 334.127 582.598 335.121 602.883 329.129 cv
602.886 329.128 603.172 328.965 603.021 327.243 cv
602.897 325.828 602.53 323.814 602.065 321.264 cv
600.328 311.741 597.095 294.016 601.26 274.086 cv
601.291 273.94 601.381 273.815 601.51 273.74 cv
608.043 269.942 618.331 256.679 615.539 246.405 cv
615.428 245.995 615.31 245.51 615.178 244.962 cv
613.39 237.575 609.217 220.34 581.948 218.379 cv
580.975 228.533 570.829 232.419 565.513 233.054 cv
564.792 233.14 558.339 233.777 553.707 229.664 cv
550.912 227.184 549.444 223.531 549.339 218.802 cv
541.327 219.277 531.057 220.653 515.717 226.763 cv
503.78 231.517 483.292 234.716 483.087 234.748 cv
482.899 234.776 482.711 234.703 482.594 234.553 cv
482.387 234.288 461.777 207.905 454.411 197.144 cv
453.924 196.432 453.518 196.43 453.385 196.429 cv
453.383 196.429 453.382 196.429 453.381 196.429 cv
452.022 196.429 450.008 199.315 448.232 201.861 cv
445.843 205.285 443.592 208.509 441.266 208.288 cv
441.175 208.279 441.084 208.265 440.995 208.245 cv
441.404 209.054 441.875 209.988 442.397 211.023 cv
444.274 214.746 446.803 219.78 449.431 225.01 cv
455.034 236.159 461.383 248.795 462.293 250.489 cv
469.545 263.983 498.21 259.832 513.609 257.603 cv
517.578 257.028 520.712 256.574 522.434 256.574 cv
522.579 256.574 522.718 256.634 522.817 256.74 cv
522.915 256.846 522.966 256.988 522.957 257.133 cv
522.118 269.585 527.833 276.54 531.314 279.578 cv
531.422 279.672 531.486 279.805 531.493 279.948 cv
532.664 305.155 527.146 323.594 526.109 326.805 cv
cp
569.693 334.741 mo
561.997 334.741 555.052 334.089 549.367 333.27 cv
535.015 331.203 525.364 327.654 525.268 327.619 cv
525 327.519 524.861 327.223 524.956 326.953 cv
525.024 326.762 531.685 307.536 530.456 280.218 cv
526.871 277.027 521.229 269.985 521.877 257.636 cv
520.137 257.716 517.28 258.129 513.76 258.639 cv
498.107 260.906 468.97 265.125 461.371 250.984 cv
460.454 249.278 454.374 237.18 448.495 225.48 cv
444.574 217.678 440.546 209.66 439.009 206.645 cv
438.777 206.284 438.556 205.863 438.345 205.381 cv
438.17 204.979 438.427 204.73 438.587 204.655 cv
439.05 204.437 439.241 204.808 439.506 205.319 cv
439.61 205.519 439.747 205.786 439.914 206.114 cv
440.375 206.817 440.862 207.195 441.37 207.246 cv
443.082 207.415 445.36 204.146 447.373 201.262 cv
449.574 198.107 451.476 195.382 453.381 195.382 cv
453.384 195.382 453.387 195.382 453.39 195.382 cv
454.111 195.385 454.746 195.779 455.276 196.552 cv
462.245 206.733 481.126 230.969 483.229 233.665 cv
485.816 233.249 504.294 230.185 515.33 225.79 cv
531.16 219.485 541.652 218.175 549.828 217.725 cv
549.97 217.719 550.112 217.769 550.216 217.867 cv
550.321 217.967 550.38 218.104 550.38 218.248 cv
550.38 222.935 551.733 226.512 554.402 228.881 cv
557.886 231.974 562.947 232.304 565.389 232.014 cv
570.497 231.404 580.32 227.645 580.943 217.788 cv
580.952 217.649 581.016 217.52 581.12 217.428 cv
581.224 217.336 581.36 217.289 581.5 217.298 cv
610.002 219.127 614.502 237.717 616.196 244.715 cv
616.326 245.253 616.441 245.728 616.55 246.13 cv
619.568 257.234 608.787 270.575 602.239 274.526 cv
598.187 294.164 601.378 311.659 603.095 321.076 cv
604.175 326.994 604.667 329.695 603.18 330.134 cv
591.492 333.586 579.928 334.741 569.693 334.741 cv
cp
0 0 0 rgb
f
441.988 130.41 mo
530.97 134.549 li
519.241 220.772 li
429.806 219.128 li
441.988 130.41 li
cp
1 1 1 rgb
f
430.405 218.616 mo
518.785 220.239 li
530.374 135.046 li
442.442 130.955 li
430.405 218.616 li
cp
519.241 221.296 mo
519.238 221.296 519.234 221.296 519.231 221.296 cv
429.796 219.652 li
429.647 219.65 429.505 219.583 429.408 219.469 cv
429.311 219.355 429.267 219.206 429.287 219.057 cv
441.469 130.338 li
441.506 130.07 441.743 129.876 442.012 129.886 cv
530.994 134.026 li
531.141 134.033 531.278 134.101 531.372 134.214 cv
531.466 134.327 531.508 134.474 531.489 134.62 cv
519.76 220.842 li
519.724 221.102 519.503 221.296 519.241 221.296 cv
cp
0 0 0 rgb
f
541.372 232.522 mo
538.608 229.758 535.457 227.173 532.557 220.443 cv
530.705 216.145 524.484 206.685 522.194 205.528 cv
518.355 203.587 516.036 201.831 512.425 201.342 cv
509.41 200.934 503.478 201.711 503.307 202.762 cv
502.775 206.038 510.649 203.961 511.316 204.196 cv
513.644 205.017 515.939 205.947 518.013 208.581 cv
514.79 208.703 509.159 209.428 507.728 210.32 cv
506.221 211.259 502.3 216.122 501.853 216.985 cv
501.076 218.483 501.887 219.961 503.755 218.398 cv
503.856 218.313 507.651 215.641 509.025 213.949 cv
509.58 213.267 515.241 212.744 517.836 213.248 cv
515.163 212.365 510.108 212.956 508.995 213.964 cv
508.73 214.204 504.541 218.77 504.279 219.231 cv
503.183 221.157 505.053 221.88 506.536 220.771 cv
508.215 219.515 509.987 217.463 510.421 217.24 cv
512.801 216.022 515.255 216.716 517.297 216.962 cv
515.293 216.576 512.979 216.176 510.529 217.11 cv
510.093 217.277 505.614 220.853 506.65 222.622 cv
507.207 223.571 509.335 223.066 511.937 220.151 cv
513.479 220.37 514.355 220.732 515.644 221.04 cv
516.543 221.254 519.589 228.027 523.055 229.999 cv
523.75 230.395 526.107 236.269 530.342 244.22 cv
531.256 245.936 535.472 248.623 540.092 242.202 cv
541.759 239.886 543.986 235.136 541.372 232.522 cv
cp
1 1 1 rgb
f
515.467 221.529 mo
515.467 221.529 li
515.467 221.529 li
cp
511.937 219.628 mo
511.961 219.628 511.986 219.629 512.01 219.633 cv
513.062 219.782 513.828 220 514.57 220.21 cv
514.947 220.317 515.337 220.428 515.765 220.53 cv
516.283 220.653 516.759 221.368 517.88 223.117 cv
519.22 225.208 521.244 228.366 523.314 229.544 cv
523.797 229.819 524.347 230.93 526.012 234.401 cv
527.184 236.844 528.789 240.19 530.805 243.974 cv
531.151 244.625 532.229 245.631 533.777 245.735 cv
535.135 245.825 537.264 245.236 539.667 241.896 cv
541.163 239.816 543.368 235.258 541.002 232.892 cv
541.002 232.892 li
540.692 232.582 540.377 232.274 540.057 231.962 cv
537.542 229.503 534.69 226.716 532.076 220.65 cv
530.173 216.234 524.008 207.032 521.957 205.995 cv
521.001 205.512 520.154 205.048 519.334 204.6 cv
516.9 203.268 514.978 202.216 512.355 201.861 cv
509.332 201.452 504.359 202.261 503.818 202.89 cv
503.764 203.285 503.893 203.471 503.997 203.577 cv
504.853 204.457 508.141 204.016 509.722 203.803 cv
510.828 203.654 511.224 203.608 511.491 203.702 cv
513.934 204.564 516.303 205.562 518.425 208.258 cv
518.547 208.412 518.571 208.622 518.489 208.801 cv
518.406 208.98 518.23 209.098 518.033 209.105 cv
514.483 209.239 509.217 210.009 508.004 210.765 cv
506.618 211.628 502.762 216.369 502.318 217.226 cv
501.994 217.851 502.049 218.367 502.214 218.499 cv
502.337 218.598 502.761 218.546 503.419 217.996 cv
503.432 217.985 503.5 217.934 503.613 217.852 cv
505.625 216.389 506.885 215.342 507.674 214.604 cv
508.192 214.044 508.572 213.641 508.644 213.577 cv
510.005 212.342 515.34 211.872 518.001 212.751 cv
518.263 212.838 518.413 213.113 518.343 213.38 cv
518.273 213.648 518.008 213.814 517.736 213.762 cv
515.124 213.254 509.968 213.846 509.413 214.3 cv
509.206 214.556 508.886 214.903 508.398 215.36 cv
507.098 216.77 504.934 219.17 504.732 219.494 cv
504.44 220.008 504.392 220.431 504.608 220.621 cv
504.885 220.865 505.581 220.832 506.222 220.352 cv
506.455 220.177 506.691 219.986 506.926 219.786 cv
508.092 218.225 509.971 216.762 510.343 216.621 cv
510.734 216.472 511.122 216.355 511.505 216.265 cv
512.182 216.084 512.854 216.017 513.512 216.016 cv
514.97 215.982 516.302 216.237 517.396 216.448 cv
517.674 216.501 517.858 216.765 517.815 217.043 cv
517.771 217.322 517.51 217.514 517.235 217.482 cv
516.886 217.44 516.526 217.386 516.155 217.329 cv
515.256 217.192 514.341 217.055 513.424 217.064 cv
512.9 217.081 512.375 217.141 511.842 217.26 cv
511.448 217.361 511.053 217.506 510.66 217.707 cv
510.531 217.783 510.066 218.245 509.655 218.652 cv
509.104 219.2 508.404 219.894 507.675 220.523 cv
507.4 220.907 507.185 221.29 507.081 221.644 cv
506.991 221.946 506.998 222.179 507.102 222.357 cv
507.139 222.42 507.214 222.507 507.435 222.529 cv
508.146 222.605 509.648 221.928 511.546 219.803 cv
511.646 219.69 511.789 219.628 511.937 219.628 cv
cp
534.037 246.791 mo
533.923 246.791 533.813 246.788 533.707 246.78 cv
531.858 246.656 530.427 245.494 529.88 244.467 cv
527.854 240.663 526.243 237.306 525.068 234.854 cv
524.042 232.716 523.073 230.697 522.769 230.437 cv
520.502 229.149 518.477 225.99 516.998 223.683 cv
516.409 222.764 515.743 221.724 515.483 221.54 cv
515.049 221.435 514.66 221.325 514.284 221.218 cv
513.614 221.028 512.978 220.847 512.136 220.711 cv
510.366 222.631 508.584 223.695 507.331 223.571 cv
506.83 223.522 506.428 223.278 506.199 222.887 cv
505.988 222.528 505.923 222.114 506.004 221.65 cv
505.224 221.933 504.427 221.859 503.915 221.407 cv
503.688 221.206 503.016 220.449 503.789 219.035 cv
502.572 219.914 501.832 219.535 501.558 219.316 cv
500.933 218.814 500.863 217.757 501.388 216.744 cv
501.88 215.794 505.868 210.861 507.451 209.875 cv
508.949 208.942 513.905 208.318 516.926 208.115 cv
515.17 206.232 513.269 205.442 511.173 204.701 cv
510.998 204.686 510.395 204.77 509.862 204.842 cv
507.133 205.208 504.375 205.468 503.246 204.308 cv
502.964 204.018 502.657 203.501 502.79 202.678 cv
503.071 200.952 509.903 200.472 512.495 200.823 cv
515.31 201.204 517.408 202.352 519.837 203.681 cv
520.649 204.125 521.49 204.585 522.43 205.06 cv
524.876 206.296 531.159 215.874 533.039 220.236 cv
535.57 226.112 538.224 228.705 540.789 231.213 cv
541.111 231.528 541.43 231.839 541.743 232.152 cv
541.743 232.152 li
544.601 235.009 542.317 240.006 540.517 242.508 cv
538.009 245.994 535.66 246.791 534.037 246.791 cv
cp
0 0 0 rgb
f
426.831 167.846 mo
425.946 163.25 428.179 154.753 430.081 153.03 cv
433.269 150.142 435.04 147.834 438.392 146.406 cv
441.192 145.214 447.118 144.393 447.561 145.361 cv
448.941 148.38 440.798 148.461 440.217 148.865 cv
438.19 150.273 436.223 151.777 434.921 154.867 cv
438.061 154.131 443.683 153.339 445.299 153.82 cv
447.001 154.326 452.069 157.977 452.73 158.691 cv
453.875 159.93 453.484 161.57 451.27 160.557 cv
451.15 160.502 446.783 158.931 445.009 157.663 cv
444.294 157.152 438.696 158.147 436.327 159.32 cv
438.671 157.761 443.702 156.992 445.042 157.67 cv
445.361 157.831 450.61 161.125 450.985 161.499 cv
452.552 163.066 450.94 164.259 449.217 163.582 cv
447.265 162.816 445.013 161.306 444.535 161.207 cv
441.918 160.662 439.735 161.981 437.831 162.759 cv
439.662 161.856 441.787 160.858 444.396 161.109 cv
444.861 161.154 450.128 163.417 449.596 165.397 cv
449.311 166.46 447.125 166.536 443.845 164.415 cv
442.416 165.034 441.666 165.615 440.505 166.253 cv
439.694 166.698 438.551 174.036 435.731 176.856 cv
435.165 177.421 434.674 182.635 434.141 187.41 cv
433.532 192.865 427.776 172.754 426.831 167.846 cv
cp
1 1 1 rgb
f
447.122 145.635 mo
447.122 145.635 li
447.122 145.635 li
cp
440.805 166.678 mo
440.805 166.678 li
440.805 166.678 li
cp
445.939 145.454 mo
444.122 145.454 440.726 145.982 438.598 146.888 cv
436.163 147.926 434.588 149.448 432.594 151.376 cv
431.922 152.026 431.227 152.699 430.433 153.418 cv
428.745 154.947 426.475 163.228 427.345 167.746 cv
427.345 167.746 427.345 167.746 427.345 167.747 cv
428.23 172.339 432.065 185.384 433.591 187.567 cv
433.601 187.506 433.611 187.435 433.62 187.352 cv
433.691 186.718 433.761 186.077 433.83 185.439 cv
434.477 179.518 434.796 177.05 435.361 176.485 cv
437.044 174.802 438.16 171.22 438.898 168.85 cv
439.517 166.865 439.786 166.05 440.253 165.794 cv
440.638 165.582 440.985 165.372 441.319 165.17 cv
441.979 164.77 442.661 164.357 443.636 163.934 cv
443.798 163.865 443.982 163.88 444.129 163.975 cv
446.522 165.522 448.15 165.771 448.815 165.515 cv
449.022 165.436 449.072 165.332 449.091 165.261 cv
449.144 165.063 449.089 164.836 448.922 164.568 cv
448.727 164.255 448.419 163.942 448.052 163.644 cv
447.182 163.231 446.324 162.747 445.647 162.365 cv
445.143 162.081 444.573 161.759 444.423 161.718 cv
443.978 161.625 443.546 161.59 443.127 161.602 cv
442.614 161.63 442.12 161.706 441.637 161.82 cv
440.733 162.051 439.873 162.434 439.028 162.811 cv
438.687 162.963 438.353 163.111 438.029 163.244 cv
437.767 163.351 437.469 163.232 437.353 162.975 cv
437.237 162.717 437.346 162.414 437.599 162.29 cv
438.595 161.798 439.809 161.2 441.22 160.847 cv
441.859 160.672 442.531 160.557 443.238 160.553 cv
443.631 160.538 444.032 160.548 444.446 160.588 cv
444.842 160.626 447.042 161.539 448.579 162.735 cv
448.859 162.867 449.138 162.989 449.408 163.095 cv
450.154 163.388 450.833 163.236 451.036 162.927 cv
451.193 162.686 451.036 162.291 450.614 161.87 cv
450.336 161.613 447.609 159.869 445.982 158.853 cv
445.395 158.544 444.992 158.294 444.716 158.097 cv
444.684 158.085 444.651 158.074 444.615 158.063 cv
443.693 157.874 438.854 158.652 436.56 159.79 cv
436.313 159.913 436.012 159.822 435.874 159.582 cv
435.736 159.343 435.807 159.037 436.037 158.884 cv
438.37 157.332 443.638 156.373 445.279 157.202 cv
445.365 157.246 445.837 157.534 446.485 157.936 cv
447.44 158.439 448.932 159.114 451.26 159.992 cv
451.393 160.042 451.472 160.073 451.488 160.081 cv
452.267 160.437 452.69 160.376 452.783 160.246 cv
452.906 160.075 452.823 159.564 452.345 159.047 cv
451.689 158.338 446.715 154.788 445.15 154.322 cv
443.78 153.915 438.5 154.566 435.041 155.377 cv
434.849 155.423 434.648 155.356 434.521 155.206 cv
434.394 155.055 434.362 154.846 434.438 154.664 cv
435.771 151.502 437.791 149.913 439.919 148.435 cv
440.151 148.274 440.545 148.214 441.65 148.064 cv
443.23 147.85 446.519 147.405 447.111 146.33 cv
447.183 146.2 447.258 145.987 447.102 145.62 cv
446.936 145.508 446.517 145.454 445.939 145.454 cv
cp
433.846 187.843 mo
433.849 187.843 li
433.846 187.843 li
cp
433.677 188.866 mo
433.147 188.866 432.23 188.475 429.543 179.898 cv
428.041 175.101 426.723 170.053 426.317 167.945 cv
426.317 167.945 li
425.407 163.225 427.64 154.534 429.729 152.641 cv
430.511 151.934 431.2 151.268 431.866 150.623 cv
433.855 148.699 435.574 147.038 438.187 145.924 cv
440.595 144.899 447.31 143.553 448.037 145.143 cv
448.383 145.901 448.224 146.482 448.029 146.836 cv
447.247 148.254 444.519 148.733 441.79 149.102 cv
441.257 149.174 440.655 149.256 440.489 149.314 cv
438.664 150.583 437.041 151.848 435.846 154.13 cv
438.813 153.526 443.756 152.814 445.449 153.318 cv
447.235 153.849 452.387 157.55 453.114 158.336 cv
453.889 159.173 454.101 160.212 453.631 160.861 cv
453.426 161.144 452.814 161.704 451.405 161.18 cv
452.525 162.339 452.078 163.247 451.912 163.501 cv
451.538 164.074 450.79 164.353 449.962 164.29 cv
450.163 164.714 450.21 165.131 450.102 165.533 cv
449.984 165.972 449.661 166.312 449.192 166.493 cv
448.018 166.945 446.016 166.39 443.801 165.008 cv
443.024 165.362 442.458 165.705 441.862 166.065 cv
441.528 166.268 441.183 166.477 440.792 166.693 cv
440.591 166.939 440.223 168.118 439.899 169.161 cv
439.084 171.777 437.968 175.36 436.102 177.226 cv
435.722 177.762 435.251 182.082 434.872 185.553 cv
434.802 186.191 434.732 186.834 434.661 187.468 cv
434.619 187.842 434.509 188.834 433.757 188.864 cv
433.731 188.865 433.705 188.866 433.677 188.866 cv
cp
0 0 0 rgb
f
474.626 162.654 mo
474.711 181.848 li
495.577 172.026 li
474.626 162.654 li
cp
f
475.153 163.463 mo
475.231 181.024 li
494.322 172.038 li
475.153 163.463 li
cp
474.711 182.372 mo
474.613 182.372 474.516 182.344 474.431 182.291 cv
474.28 182.195 474.188 182.029 474.187 181.85 cv
474.102 162.656 li
474.102 162.478 474.191 162.312 474.34 162.214 cv
474.49 162.117 474.678 162.102 474.84 162.175 cv
495.791 171.548 li
495.978 171.632 496.099 171.817 496.101 172.021 cv
496.103 172.226 495.986 172.413 495.8 172.501 cv
474.934 182.322 li
474.863 182.355 474.787 182.372 474.711 182.372 cv
cp
f
449.137 136.75 mo
449.129 136.75 449.122 136.75 449.115 136.75 cv
444.928 136.573 li
444.639 136.561 444.415 136.317 444.427 136.028 cv
444.439 135.739 444.686 135.514 444.972 135.527 cv
449.159 135.703 li
449.448 135.715 449.672 135.959 449.66 136.248 cv
449.648 136.53 449.416 136.75 449.137 136.75 cv
cp
457.51 137.104 mo
457.503 137.104 457.495 137.103 457.487 137.103 cv
453.301 136.926 li
453.012 136.914 452.788 136.67 452.8 136.381 cv
452.812 136.092 453.062 135.866 453.345 135.88 cv
457.532 136.057 li
457.821 136.069 458.045 136.313 458.033 136.602 cv
458.021 136.883 457.789 137.104 457.51 137.104 cv
cp
465.883 137.457 mo
465.875 137.457 465.868 137.457 465.86 137.456 cv
461.674 137.28 li
461.385 137.268 461.161 137.024 461.173 136.734 cv
461.185 136.446 461.43 136.218 461.718 136.233 cv
465.905 136.41 li
466.194 136.422 466.418 136.666 466.406 136.955 cv
466.394 137.237 466.162 137.457 465.883 137.457 cv
cp
474.256 137.811 mo
474.248 137.811 474.241 137.81 474.233 137.81 cv
470.047 137.633 li
469.758 137.621 469.534 137.377 469.546 137.088 cv
469.558 136.799 469.806 136.576 470.091 136.587 cv
474.278 136.764 li
474.567 136.776 474.791 137.02 474.779 137.309 cv
474.767 137.59 474.535 137.811 474.256 137.811 cv
cp
482.629 138.164 mo
482.622 138.164 482.614 138.164 482.607 138.163 cv
478.42 137.987 li
478.131 137.975 477.907 137.73 477.919 137.441 cv
477.931 137.152 478.181 136.928 478.464 136.94 cv
482.651 137.117 li
482.94 137.129 483.164 137.373 483.152 137.662 cv
483.14 137.944 482.908 138.164 482.629 138.164 cv
cp
491.002 138.517 mo
490.995 138.517 490.987 138.517 490.98 138.517 cv
486.793 138.34 li
486.504 138.328 486.28 138.084 486.292 137.795 cv
486.304 137.506 486.55 137.28 486.837 137.294 cv
491.024 137.47 li
491.313 137.482 491.537 137.727 491.525 138.016 cv
491.513 138.297 491.281 138.517 491.002 138.517 cv
cp
499.375 138.871 mo
499.368 138.871 499.36 138.871 499.353 138.87 cv
495.166 138.693 li
494.877 138.681 494.653 138.437 494.665 138.148 cv
494.677 137.859 494.925 137.632 495.21 137.647 cv
499.397 137.824 li
499.686 137.836 499.91 138.08 499.898 138.369 cv
499.886 138.651 499.654 138.871 499.375 138.871 cv
cp
507.748 139.224 mo
507.741 139.224 507.733 139.224 507.726 139.224 cv
503.539 139.047 li
503.25 139.035 503.026 138.791 503.038 138.502 cv
503.05 138.213 503.294 137.991 503.583 138 cv
507.77 138.177 li
508.059 138.189 508.283 138.433 508.271 138.723 cv
508.259 139.004 508.027 139.224 507.748 139.224 cv
cp
516.121 139.578 mo
516.114 139.578 516.106 139.577 516.099 139.577 cv
511.912 139.4 li
511.623 139.388 511.399 139.144 511.411 138.855 cv
511.423 138.566 511.676 138.343 511.956 138.354 cv
516.143 138.531 li
516.432 138.543 516.656 138.787 516.644 139.076 cv
516.632 139.357 516.4 139.578 516.121 139.578 cv
cp
524.494 139.931 mo
524.487 139.931 524.479 139.931 524.471 139.93 cv
520.285 139.754 li
519.996 139.742 519.772 139.498 519.784 139.209 cv
519.796 138.92 520.045 138.695 520.329 138.707 cv
524.516 138.884 li
524.805 138.896 525.029 139.14 525.017 139.429 cv
525.005 139.711 524.773 139.931 524.494 139.931 cv
cp
f
439.262 214.219 mo
439.259 214.219 439.257 214.219 439.254 214.219 cv
435.064 214.161 li
434.775 214.157 434.544 213.919 434.548 213.63 cv
434.552 213.343 434.786 213.113 435.072 213.113 cv
435.074 213.113 435.076 213.113 435.079 213.113 cv
439.269 213.171 li
439.558 213.175 439.789 213.413 439.785 213.702 cv
439.781 213.989 439.548 214.219 439.262 214.219 cv
cp
447.641 214.334 mo
447.639 214.334 447.636 214.334 447.634 214.334 cv
443.444 214.276 li
443.155 214.272 442.924 214.035 442.928 213.745 cv
442.932 213.456 443.181 213.219 443.459 213.229 cv
447.648 213.287 li
447.937 213.291 448.169 213.529 448.165 213.818 cv
448.161 214.105 447.927 214.334 447.641 214.334 cv
cp
456.021 214.45 mo
456.018 214.45 456.016 214.45 456.014 214.45 cv
451.824 214.392 li
451.535 214.388 451.303 214.15 451.307 213.861 cv
451.311 213.574 451.545 213.345 451.831 213.345 cv
451.833 213.345 451.836 213.345 451.838 213.345 cv
456.028 213.402 li
456.317 213.406 456.549 213.644 456.545 213.933 cv
456.54 214.22 456.307 214.45 456.021 214.45 cv
cp
464.401 214.566 mo
464.398 214.566 464.396 214.566 464.393 214.566 cv
460.203 214.508 li
459.914 214.504 459.683 214.266 459.687 213.977 cv
459.691 213.688 459.934 213.466 460.218 213.46 cv
464.408 213.518 li
464.697 213.522 464.928 213.76 464.924 214.049 cv
464.92 214.336 464.687 214.566 464.401 214.566 cv
cp
472.78 214.681 mo
472.778 214.681 472.775 214.681 472.773 214.681 cv
468.583 214.624 li
468.294 214.619 468.063 214.382 468.067 214.092 cv
468.071 213.806 468.304 213.576 468.59 213.576 cv
468.593 213.576 468.595 213.576 468.598 213.576 cv
472.787 213.634 li
473.076 213.638 473.308 213.876 473.304 214.165 cv
473.3 214.452 473.066 214.681 472.78 214.681 cv
cp
481.16 214.797 mo
481.157 214.797 481.155 214.797 481.153 214.797 cv
476.963 214.739 li
476.674 214.735 476.442 214.498 476.446 214.208 cv
476.45 213.922 476.684 213.692 476.97 213.692 cv
476.972 213.692 476.975 213.692 476.977 213.692 cv
481.167 213.749 li
481.456 213.754 481.688 213.991 481.684 214.28 cv
481.679 214.567 481.446 214.797 481.16 214.797 cv
cp
489.54 214.913 mo
489.537 214.913 489.535 214.913 489.533 214.913 cv
485.343 214.855 li
485.053 214.851 484.822 214.613 484.826 214.324 cv
484.83 214.035 485.074 213.796 485.357 213.807 cv
489.547 213.865 li
489.836 213.87 490.067 214.107 490.063 214.396 cv
490.059 214.683 489.826 214.913 489.54 214.913 cv
cp
497.919 215.029 mo
497.917 215.029 497.914 215.029 497.912 215.029 cv
493.722 214.971 li
493.433 214.967 493.202 214.729 493.206 214.44 cv
493.21 214.15 493.44 213.92 493.737 213.923 cv
497.926 213.981 li
498.215 213.985 498.447 214.223 498.443 214.512 cv
498.439 214.799 498.205 215.029 497.919 215.029 cv
cp
f
570.947 258.778 mo
570.92 258.778 570.895 258.776 570.871 258.774 cv
569.429 258.607 547.299 238.989 541.008 232.898 cv
540.8 232.697 540.795 232.365 540.996 232.158 cv
541.198 231.949 541.529 231.945 541.737 232.145 cv
549.217 239.387 569.241 256.875 571.023 257.732 cv
573.163 257.558 591.97 243.159 599.073 237.721 cv
599.303 237.545 599.631 237.589 599.807 237.818 cv
599.983 238.048 599.939 238.377 599.71 238.553 cv
580.53 253.237 572.656 258.778 570.947 258.778 cv
cp
f
567.513 291.922 mo
566.388 291.922 565.382 291.772 564.49 291.474 cv
558.026 289.317 537.918 261.439 531.31 252.278 cv
530.545 251.218 li
528.911 248.957 527.27 244.203 528.581 241.521 cv
528.707 241.262 529.021 241.154 529.281 241.281 cv
529.541 241.408 529.649 241.721 529.522 241.981 cv
528.448 244.179 529.914 248.556 531.394 250.604 cv
532.16 251.665 li
549.756 276.06 560.745 289.12 564.821 290.481 cv
571.208 292.613 584.814 286.076 605.264 271.052 cv
605.496 270.881 605.825 270.931 605.996 271.164 cv
606.167 271.397 606.117 271.725 605.884 271.897 cv
587.604 285.326 574.982 291.922 567.513 291.922 cv
cp
f
534.131 250.467 mo
534.045 250.467 533.97 250.404 533.958 250.316 cv
533.945 250.221 534.012 250.133 534.107 250.119 cv
537.819 249.606 540.618 246.716 543.393 243.544 cv
543.456 243.471 543.567 243.464 543.639 243.527 cv
543.712 243.591 543.719 243.701 543.655 243.773 cv
540.835 246.997 537.987 249.935 534.155 250.465 cv
534.147 250.466 534.139 250.467 534.131 250.467 cv
cp
f
536.228 253.32 mo
536.147 253.32 536.076 253.264 536.057 253.183 cv
536.037 253.089 536.096 252.996 536.19 252.975 cv
537.744 252.633 539.169 251.868 540.314 250.765 cv
540.383 250.699 540.494 250.7 540.561 250.77 cv
540.628 250.839 540.626 250.95 540.556 251.017 cv
539.365 252.165 537.882 252.96 536.265 253.316 cv
536.253 253.319 536.24 253.32 536.228 253.32 cv
cp
f
570.521 328.511 mo
551.871 328.511 535.395 325.043 529.199 323.557 cv
529.105 323.534 529.047 323.44 529.07 323.346 cv
529.092 323.252 529.185 323.193 529.28 323.217 cv
538.59 325.451 571.159 332.168 599.347 324.807 cv
599.441 324.781 599.536 324.838 599.56 324.932 cv
599.585 325.025 599.529 325.12 599.435 325.145 cv
589.941 327.624 579.952 328.511 570.521 328.511 cv
cp
f
526.763 145.109 mo
526.761 145.109 526.758 145.109 526.755 145.109 cv
442.634 141.072 li
442.538 141.068 442.464 140.986 442.469 140.89 cv
442.473 140.794 442.542 140.716 442.651 140.724 cv
526.772 144.76 li
526.868 144.765 526.942 144.846 526.938 144.943 cv
526.933 145.036 526.856 145.109 526.763 145.109 cv
cp
f
504.797 210.105 mo
504.796 210.105 504.794 210.105 504.793 210.105 cv
435.068 208.747 li
434.972 208.745 434.895 208.666 434.897 208.569 cv
434.899 208.473 434.97 208.397 435.075 208.398 cv
504.8 209.756 li
504.897 209.758 504.973 209.837 504.971 209.934 cv
504.969 210.029 504.891 210.105 504.797 210.105 cv
cp
f
522.188 258.144 mo
522.125 258.144 522.061 258.133 521.998 258.109 cv
521.729 258.004 521.595 257.7 521.699 257.431 cv
525.551 247.518 li
525.655 247.248 525.959 247.115 526.229 247.219 cv
526.498 247.324 526.632 247.628 526.527 247.897 cv
522.676 257.81 li
522.596 258.017 522.398 258.144 522.188 258.144 cv
cp
f
390.636 82.5444 mo
390.636 72.7672 li
441.738 72.7672 li
441.738 82.5444 li
390.636 82.5444 li
cp
f
391.16 82.0207 mo
441.214 82.0207 li
441.214 73.291 li
391.16 73.291 li
391.16 82.0207 li
cp
441.738 83.0682 mo
390.636 83.0682 li
390.347 83.0682 390.112 82.8338 390.112 82.5445 cv
390.112 72.7672 li
390.112 72.4779 390.347 72.2435 390.636 72.2435 cv
441.738 72.2435 li
442.027 72.2435 442.262 72.4779 442.262 72.7672 cv
442.262 82.5445 li
442.262 82.8338 442.027 83.0682 441.738 83.0682 cv
cp
f
441.103 101.68 mo
441.103 91.9027 li
484.089 91.9027 li
484.089 101.68 li
441.103 101.68 li
cp
1 .831373 .180392 rgb
f
441.627 101.156 mo
483.565 101.156 li
483.565 92.4265 li
441.627 92.4265 li
441.627 101.156 li
cp
484.089 102.204 mo
441.103 102.204 li
440.814 102.204 440.579 101.969 440.579 101.68 cv
440.579 91.9028 li
440.579 91.6134 440.814 91.379 441.103 91.379 cv
484.089 91.379 li
484.378 91.379 484.612 91.6134 484.612 91.9028 cv
484.612 101.68 li
484.612 101.969 484.378 102.204 484.089 102.204 cv
cp
0 0 0 rgb
f
419.395 64.2569 mo
419.395 54.4797 li
505.797 54.4797 li
505.797 64.2569 li
419.395 64.2569 li
cp
1 1 1 rgb
f
419.919 63.7331 mo
505.273 63.7331 li
505.273 55.0034 li
419.919 55.0034 li
419.919 63.7331 li
cp
505.797 64.7806 mo
419.395 64.7806 li
419.105 64.7806 418.871 64.5462 418.871 64.2569 cv
418.871 54.4796 li
418.871 54.1903 419.105 53.9559 419.395 53.9559 cv
505.797 53.9559 li
506.086 53.9559 506.321 54.1903 506.321 54.4796 cv
506.321 64.2569 li
506.321 64.5462 506.086 64.7806 505.797 64.7806 cv
cp
0 0 0 rgb
f
76.188 299.72 mo
76.188 289.943 li
127.29 289.943 li
127.29 299.72 li
76.188 299.72 li
cp
f
76.7118 299.196 mo
126.766 299.196 li
126.766 290.467 li
76.7118 290.467 li
76.7118 299.196 li
cp
127.29 300.244 mo
76.1881 300.244 li
75.8987 300.244 75.6643 300.009 75.6643 299.72 cv
75.6643 289.943 li
75.6643 289.654 75.8987 289.419 76.1881 289.419 cv
127.29 289.419 li
127.579 289.419 127.814 289.654 127.814 289.943 cv
127.814 299.72 li
127.814 300.009 127.579 300.244 127.29 300.244 cv
cp
f
104.947 281.433 mo
104.947 271.655 li
191.349 271.655 li
191.349 281.433 li
104.947 281.433 li
cp
1 1 1 rgb
f
105.471 280.909 mo
190.825 280.909 li
190.825 272.179 li
105.471 272.179 li
105.471 280.909 li
cp
191.349 281.956 mo
104.947 281.956 li
104.657 281.956 104.423 281.722 104.423 281.433 cv
104.423 271.655 li
104.423 271.366 104.657 271.132 104.947 271.132 cv
191.349 271.132 li
191.638 271.132 191.872 271.366 191.872 271.655 cv
191.872 281.433 li
191.872 281.722 191.638 281.956 191.349 281.956 cv
cp
0 0 0 rgb
f
240.937 112.616 mo
239.15 120.288 239.478 129.759 239.478 129.759 cv
246.425 132.458 li
246.425 132.458 250.685 149.974 223.836 144.606 cv
218.62 143.563 203.519 132.095 203.519 132.095 cv
215.46 128.68 li
215.46 128.68 216.605 111.32 217.06 102.696 cv
223.336 105.619 233.407 110.265 240.937 112.616 cv
cp
1 1 1 rgb
f
204.678 132.308 mo
207.917 134.715 219.596 143.224 223.939 144.093 cv
233.62 146.028 240.261 145.209 243.675 141.66 cv
246.733 138.48 246.168 133.967 245.968 132.842 cv
239.288 130.247 li
239.093 130.171 238.961 129.986 238.954 129.777 cv
238.951 129.683 238.657 120.535 240.32 112.97 cv
232.849 110.578 222.878 105.981 217.542 103.498 cv
217.067 112.255 215.994 128.546 215.983 128.714 cv
215.968 128.935 215.817 129.123 215.604 129.184 cv
204.678 132.308 li
cp
232.994 146.155 mo
230.278 146.155 227.188 145.811 223.734 145.12 cv
218.46 144.066 203.822 132.983 203.202 132.512 cv
203.044 132.392 202.967 132.193 203.004 131.998 cv
203.04 131.803 203.184 131.645 203.374 131.591 cv
214.962 128.278 li
215.13 125.72 216.124 110.498 216.537 102.668 cv
216.546 102.494 216.641 102.337 216.79 102.247 cv
216.939 102.157 217.124 102.147 217.281 102.221 cv
222.483 104.644 233.306 109.685 241.093 112.116 cv
241.355 112.198 241.51 112.468 241.447 112.735 cv
239.886 119.434 239.957 127.633 239.993 129.397 cv
246.615 131.97 li
246.775 132.031 246.894 132.168 246.934 132.334 cv
246.993 132.577 248.334 138.318 244.438 142.378 cv
242.024 144.894 238.191 146.155 232.994 146.155 cv
cp
0 0 0 rgb
f
257.385 64.3118 mo
259.837 64.8983 262.286 62.4156 262.335 59.7903 cv
262.384 57.1649 260.542 54.7891 258.279 53.6366 cv
256.016 52.4841 253.408 52.3519 250.868 51.9866 cv
251.826 49.4408 250.614 46.3778 248.5 44.7473 cv
246.387 43.1169 243.592 42.7284 240.99 43.0479 cv
239.281 43.2577 237.559 43.7729 236.21 44.885 cv
234.861 45.997 233.944 47.7859 234.016 49.704 cv
231.742 46.8373 228.071 44.9102 224.609 45.7396 cv
221.147 46.569 218.535 50.7994 218.274 53.7105 cv
216.589 51.6429 214.386 49.9436 211.792 50.0836 cv
206.643 50.3613 205.481 54.7377 207.798 60.368 cv
205.057 59.0186 200.972 60.1983 199.67 64.1806 cv
198.7 67.1458 199.787 71.864 201.852 74.1836 cv
202.211 74.5867 202.73 74.9786 203.365 75.3333 cv
204.167 79.7371 205.169 84.3476 206.685 90.1592 cv
207.78 94.3593 209.68 99.013 211.905 102.84 cv
212.951 104.64 213.767 105.514 215.875 106.497 cv
215.992 104.674 217.892 103.769 218.187 101.956 cv
218.55 99.7261 217.115 97.7631 218.459 95.7878 cv
221.019 92.0257 222.763 87.8985 223.581 83.6649 cv
224.253 80.1886 224.278 76.5306 222.637 73.3214 cv
222.053 72.1783 221.221 71.1066 220.204 70.1837 cv
220.657 69.2798 221.008 68.3586 221.294 67.4573 cv
222.801 70.0472 223.906 71.829 227.683 73.0673 cv
230.439 73.971 233.715 72.8741 234.643 70.2459 cv
235.231 72.898 239.355 76.6426 241.946 76.9055 cv
244.538 77.1683 245.51 75.9734 246.553 73.4867 cv
248.854 75.5242 250.578 77.6025 252.926 78.4938 cv
256.514 79.8557 260.952 77.6093 262.141 73.8302 cv
263.329 70.0511 261.038 65.4663 257.385 64.3118 cv
cp
1 .831373 .180392 rgb
f
205.432 60.3578 mo
204.728 60.3578 204.012 60.4988 203.34 60.7817 cv
201.839 61.4139 200.712 62.6787 200.167 64.3433 cv
199.271 67.0836 200.26 71.6078 202.243 73.8354 cv
202.557 74.1885 203.034 74.5485 203.621 74.876 cv
203.757 74.9522 203.853 75.0855 203.881 75.2393 cv
204.743 79.9709 205.795 84.6698 207.192 90.0271 cv
208.293 94.2495 210.176 98.8236 212.358 102.576 cv
213.214 104.049 213.889 104.879 215.487 105.721 cv
215.711 104.985 216.167 104.396 216.612 103.823 cv
217.094 103.2 217.55 102.612 217.67 101.872 cv
217.801 101.068 217.667 100.264 217.537 99.4861 cv
217.322 98.1925 217.099 96.855 218.026 95.4932 cv
220.561 91.7675 222.257 87.7545 223.067 83.5654 cv
223.846 79.536 223.553 76.263 222.171 73.5597 cv
221.62 72.4818 220.818 71.4486 219.852 70.5715 cv
219.678 70.4136 219.631 70.1594 219.736 69.9495 cv
220.136 69.1492 220.483 68.282 220.795 67.2988 cv
220.858 67.1013 221.031 66.9595 221.237 66.9366 cv
221.442 66.9139 221.643 67.0147 221.747 67.1939 cv
223.156 69.6159 224.175 71.3659 227.846 72.5696 cv
230.193 73.3396 233.285 72.519 234.149 70.0715 cv
234.227 69.8513 234.44 69.7086 234.675 69.7231 cv
234.908 69.7373 235.104 69.9044 235.155 70.1325 cv
235.696 72.5766 239.598 76.1408 241.999 76.3844 cv
244.288 76.6166 245.073 75.6605 246.07 73.2842 cv
246.135 73.1284 246.272 73.0138 246.437 72.9761 cv
246.601 72.9381 246.774 72.9824 246.9 73.0946 cv
247.479 73.6071 248.019 74.1197 248.542 74.6153 cv
250.1 76.0944 251.446 77.3718 253.112 78.0042 cv
254.645 78.5859 256.459 78.4664 258.088 77.6763 cv
259.809 76.8417 261.104 75.3826 261.641 73.6731 cv
262.739 70.1818 260.594 65.8751 257.227 64.8112 cv
256.958 64.7262 256.805 64.4436 256.88 64.1718 cv
256.956 63.8998 257.233 63.737 257.507 63.8023 cv
258.358 64.0062 259.274 63.7743 260.082 63.1486 cv
261.125 62.3414 261.788 61.0509 261.811 59.7805 cv
261.859 57.2094 259.953 55.0764 258.042 54.1032 cv
256.279 53.2057 254.306 52.9567 252.218 52.6931 cv
251.742 52.6331 251.267 52.5731 250.794 52.5051 cv
250.637 52.4824 250.498 52.3898 250.418 52.2532 cv
250.337 52.1167 250.322 51.9508 250.378 51.8023 cv
251.2 49.6171 250.255 46.7624 248.18 45.1619 cv
246.4 43.7882 243.87 43.2218 241.054 43.5677 cv
239.165 43.7996 237.647 44.3788 236.543 45.2891 cv
235.245 46.359 234.478 48.0431 234.54 49.6841 cv
234.548 49.9104 234.41 50.1165 234.198 50.1951 cv
233.986 50.2741 233.747 50.2067 233.606 50.0294 cv
231.214 47.0146 227.731 45.5314 224.731 46.2489 cv
221.4 47.047 219.029 51.16 218.795 53.7574 cv
218.776 53.9695 218.63 54.149 218.427 54.2114 cv
218.223 54.2733 218.002 54.2067 217.867 54.0413 cv
215.92 51.651 213.888 50.4938 211.82 50.6067 cv
209.966 50.7066 208.645 51.3605 207.894 52.5499 cv
206.822 54.2478 206.96 56.9534 208.283 60.1688 cv
208.366 60.3701 208.315 60.6018 208.156 60.7507 cv
207.997 60.8993 207.763 60.9343 207.567 60.838 cv
206.917 60.5181 206.182 60.3578 205.432 60.3578 cv
cp
215.875 107.021 mo
215.8 107.021 215.724 107.005 215.654 106.972 cv
213.362 105.903 212.505 104.915 211.452 103.103 cv
209.224 99.2715 207.302 94.6018 206.178 90.2913 cv
204.798 84.9983 203.752 80.3435 202.894 75.6661 cv
202.297 75.3115 201.816 74.9307 201.461 74.5319 cv
199.229 72.0251 198.16 67.1117 199.172 64.0176 cv
199.812 62.0601 201.148 60.5681 202.933 59.8163 cv
204.209 59.2789 205.627 59.1718 206.907 59.4896 cv
205.85 56.4128 205.879 53.778 207.008 51.9905 cv
207.938 50.5186 209.582 49.6783 211.764 49.5605 cv
213.909 49.4436 215.985 50.4442 217.942 52.5342 cv
218.689 49.4591 221.287 45.9967 224.487 45.2303 cv
227.536 44.4997 230.993 45.7391 233.582 48.4141 cv
233.845 46.8988 234.656 45.4874 235.877 44.4809 cv
237.137 43.4417 238.836 42.7846 240.926 42.528 cv
244.017 42.149 246.82 42.7896 248.82 44.3326 cv
251.056 46.0571 252.158 49.057 251.55 51.5515 cv
251.816 51.5864 252.082 51.6202 252.349 51.6538 cv
254.435 51.917 256.592 52.1891 258.517 53.1699 cv
261.163 54.5172 262.908 57.1817 262.859 59.8 cv
262.829 61.38 262.011 62.9805 260.723 63.9771 cv
260.296 64.308 259.842 64.5544 259.375 64.7124 cv
262.197 66.6505 263.709 70.5876 262.64 73.9872 cv
262.017 75.9706 260.524 77.6588 258.545 78.6188 cv
256.658 79.5344 254.542 79.6674 252.74 78.9835 cv
250.878 78.2765 249.393 76.8671 247.821 75.3752 cv
247.47 75.0424 247.111 74.7021 246.74 74.3609 cv
245.709 76.5694 244.523 77.694 241.893 77.4265 cv
239.426 77.1762 235.875 74.2073 234.563 71.543 cv
233.166 73.566 230.27 74.467 227.52 73.565 cv
224.009 72.4138 222.67 70.7628 221.419 68.6999 cv
221.24 69.178 221.049 69.6312 220.844 70.0657 cv
221.774 70.9668 222.551 72.0031 223.103 73.083 cv
224.596 76.0025 224.921 79.4964 224.096 83.7642 cv
223.259 88.0939 221.508 92.2385 218.892 96.0824 cv
218.201 97.0972 218.372 98.1245 218.57 99.3141 cv
218.714 100.176 218.862 101.066 218.704 102.04 cv
218.541 103.043 217.956 103.798 217.439 104.464 cv
216.93 105.122 216.448 105.744 216.398 106.53 cv
216.387 106.703 216.291 106.859 216.142 106.947 cv
216.06 106.996 215.968 107.021 215.875 107.021 cv
cp
0 0 0 rgb
f
253.403 79.0579 mo
253.403 78.9244 253.402 78.7877 253.4 78.6488 cv
253.241 78.603 253.082 78.5531 252.926 78.4938 cv
250.578 77.6025 248.854 75.5242 246.553 73.4867 cv
245.51 75.9734 244.538 77.1683 241.946 76.9055 cv
239.355 76.6426 235.231 72.898 234.643 70.2459 cv
233.715 72.8741 230.439 73.971 227.683 73.0673 cv
223.906 71.829 222.801 70.0472 221.294 67.4573 cv
220.47 70.0506 219.129 72.812 216.297 74.837 cv
215.261 75.5783 214.133 76.0836 212.978 76.4041 cv
212.936 76.9125 212.891 77.4064 212.837 77.8775 cv
212.638 79.6212 212.185 83.4133 212.59 87.2482 cv
209.651 84.8082 207.216 85.2165 205.391 87.0647 cv
203.566 88.9128 203.716 91.8293 205.502 93.6469 cv
207.289 95.4645 210.425 96.1531 213.181 95.5706 cv
213.897 100.213 214.963 109.512 218.188 113.622 cv
221.618 117.993 227.686 120.79 233.961 120.894 cv
240.235 120.998 246.55 118.405 250.376 114.154 cv
254.721 109.326 255.689 102.937 255.323 96.9491 cv
254.957 90.9617 253.422 85.0587 253.403 79.0579 cv
cp
1 1 1 rgb
f
213.181 95.0468 mo
213.287 95.0468 213.391 95.0787 213.479 95.1397 cv
213.597 95.2216 213.677 95.3484 213.699 95.4906 cv
213.772 95.9694 213.85 96.4972 213.933 97.0638 cv
214.629 101.798 215.793 109.721 218.6 113.299 cv
221.944 117.559 227.833 120.269 233.969 120.37 cv
240.11 120.478 246.25 117.956 249.987 113.804 cv
253.616 109.77 255.236 104.11 254.8 96.981 cv
254.642 94.3948 254.256 91.7706 253.883 89.2329 cv
253.395 85.9146 252.89 82.4834 252.88 79.0596 cv
252.88 79.0594 252.88 79.0592 252.88 79.0592 cv
252.88 79.0509 252.88 79.0425 252.88 79.034 cv
252.833 79.018 252.787 79.0011 252.741 78.9837 cv
250.878 78.2765 249.393 76.8671 247.821 75.3752 cv
247.47 75.0424 247.111 74.7021 246.74 74.3609 cv
245.709 76.5694 244.523 77.694 241.893 77.4265 cv
239.426 77.1762 235.875 74.2073 234.563 71.543 cv
233.166 73.566 230.27 74.467 227.52 73.565 cv
224.01 72.4143 222.671 70.764 221.421 68.702 cv
220.65 70.7679 219.306 73.329 216.602 75.263 cv
215.667 75.9316 214.615 76.4496 213.47 76.8054 cv
213.433 77.2311 213.396 77.5969 213.357 77.9368 cv
213.344 78.0529 li
213.142 79.8205 212.72 83.4986 213.111 87.1932 cv
213.134 87.4051 213.026 87.6094 212.838 87.71 cv
212.649 87.8106 212.42 87.7874 212.256 87.6513 cv
209.81 85.6208 207.626 85.5472 205.764 87.4327 cv
204.18 89.0361 204.23 91.6045 205.876 93.2797 cv
207.482 94.9138 210.374 95.6287 213.073 95.058 cv
213.109 95.0505 213.145 95.0468 213.181 95.0468 cv
cp
234.327 121.421 mo
234.202 121.421 234.077 121.42 233.952 121.418 cv
227.508 121.311 221.31 118.448 217.776 113.945 cv
214.797 110.148 213.653 102.366 212.897 97.2161 cv
212.844 96.8548 212.793 96.5092 212.744 96.1822 cv
209.869 96.6214 206.865 95.7811 205.129 94.0139 cv
203.077 91.9261 203.028 88.7118 205.018 86.6965 cv
207.012 84.6778 209.451 84.4941 211.971 86.1379 cv
211.752 82.746 212.118 79.5539 212.303 77.9338 cv
212.317 77.818 li
212.365 77.3977 212.409 76.9348 212.456 76.3612 cv
212.474 76.1425 212.626 75.958 212.838 75.8994 cv
214.001 75.5766 215.063 75.0758 215.992 74.4109 cv
218.942 72.3016 220.146 69.3417 220.795 67.2988 cv
220.858 67.1013 221.031 66.9593 221.237 66.9366 cv
221.442 66.9139 221.643 67.0147 221.747 67.1939 cv
223.156 69.6159 224.175 71.3659 227.846 72.5696 cv
230.193 73.3396 233.285 72.5188 234.149 70.0716 cv
234.227 69.8513 234.44 69.7086 234.675 69.7231 cv
234.908 69.7373 235.104 69.9044 235.155 70.1325 cv
235.696 72.5766 239.598 76.1408 241.999 76.3844 cv
244.288 76.6166 245.073 75.6605 246.07 73.2842 cv
246.135 73.1284 246.272 73.0138 246.437 72.9761 cv
246.601 72.9388 246.774 72.9826 246.9 73.0946 cv
247.479 73.6071 248.019 74.1197 248.542 74.6153 cv
250.1 76.0944 251.446 77.3718 253.112 78.0042 cv
253.255 78.0582 253.399 78.1036 253.545 78.1455 cv
253.766 78.2095 253.92 78.4103 253.923 78.6405 cv
253.925 78.7815 253.927 78.9206 253.927 79.0562 cv
253.927 79.0562 li
253.938 82.4052 254.437 85.7986 254.92 89.0804 cv
255.296 91.6398 255.685 94.2865 255.846 96.9172 cv
256.299 104.337 254.59 110.255 250.765 114.504 cv
246.908 118.79 240.638 121.421 234.327 121.421 cv
cp
0 0 0 rgb
f
247.836 87.7468 mo
247.92 87.0088 247.357 86.3392 246.577 86.2512 cv
245.798 86.1632 245.098 86.6901 245.014 87.4281 cv
244.93 88.1661 245.494 88.8357 246.273 88.9237 cv
247.053 89.0117 247.753 88.4848 247.836 87.7468 cv
cp
f
228.049 88.8142 mo
228.132 88.0762 227.569 87.4066 226.789 87.3186 cv
226.01 87.2306 225.31 87.7575 225.226 88.4955 cv
225.143 89.2335 225.706 89.9031 226.486 89.9911 cv
227.265 90.0791 227.965 89.5522 228.049 88.8142 cv
cp
f
233.934 112.059 mo
231.784 112.059 229.642 111.124 228.234 109.48 cv
228.046 109.26 228.072 108.929 228.292 108.741 cv
228.511 108.554 228.842 108.579 229.03 108.799 cv
230.584 110.614 233.182 111.423 235.495 110.812 cv
235.774 110.737 236.061 110.905 236.135 111.184 cv
236.209 111.464 236.042 111.751 235.763 111.824 cv
235.164 111.983 234.548 112.059 233.934 112.059 cv
cp
f
237.302 104.624 mo
236.959 104.624 236.623 104.599 236.296 104.549 cv
234.799 104.319 233.509 103.545 232.757 102.424 cv
232.596 102.184 232.66 101.858 232.9 101.697 cv
233.14 101.536 233.465 101.6 233.626 101.84 cv
234.207 102.705 235.265 103.331 236.455 103.513 cv
237.507 103.674 238.682 103.526 239.949 103.072 cv
240.379 102.918 240.859 102.714 241.161 102.367 cv
241.528 101.945 241.655 101.257 241.5 100.526 cv
241.37 99.9081 241.081 99.3253 240.775 98.7085 cv
240.629 98.4109 li
238.857 94.7794 237.931 90.7242 237.952 86.6837 cv
237.953 86.3944 238.178 86.1606 238.478 86.1625 cv
238.767 86.164 239.001 86.3997 238.999 86.6888 cv
238.98 90.5694 239.869 94.464 241.57 97.9516 cv
241.714 98.2435 li
242.035 98.8916 242.367 99.5618 242.525 100.31 cv
242.75 101.375 242.541 102.376 241.952 103.054 cv
241.492 103.583 240.86 103.858 240.302 104.058 cv
239.252 104.435 238.247 104.624 237.302 104.624 cv
cp
f
212.906 90.824 mo
212.648 90.824 212.423 90.6322 212.388 90.3688 cv
212.17 88.7183 212.089 87.8406 211.943 86.2472 cv
211.916 85.9591 212.128 85.704 212.416 85.6776 cv
212.703 85.65 212.959 85.8629 212.986 86.1511 cv
213.131 87.7313 213.211 88.6019 213.426 90.2317 cv
213.464 90.5185 213.262 90.7817 212.976 90.8196 cv
212.952 90.8226 212.929 90.824 212.906 90.824 cv
cp
f
258.482 75.0811 mo
258.438 75.0811 258.394 75.0646 258.36 75.0315 cv
258.291 74.9643 258.289 74.8537 258.357 74.7846 cv
259.614 73.4946 260.074 71.4818 259.501 69.7758 cv
259.47 69.6844 259.519 69.5854 259.611 69.5547 cv
259.702 69.5248 259.801 69.5734 259.832 69.6646 cv
260.445 71.4916 259.953 73.647 258.607 75.0284 cv
258.572 75.0636 258.527 75.0811 258.482 75.0811 cv
cp
f
206.124 73.2302 mo
206.083 73.2302 206.041 73.2158 206.008 73.1863 cv
203.65 71.1033 202.727 67.5738 203.764 64.6031 cv
203.796 64.5121 203.896 64.4645 203.986 64.4957 cv
204.077 64.5276 204.125 64.6272 204.093 64.7181 cv
203.102 67.5584 203.984 70.9332 206.239 72.9246 cv
206.312 72.9886 206.318 73.0989 206.255 73.1712 cv
206.22 73.2102 206.172 73.2302 206.124 73.2302 cv
cp
f
333.823 171.135 mo
339.758 157.489 346.713 132.377 353.749 119.037 cv
358.293 116.141 363.448 111.05 366.114 105.996 cv
367.199 103.94 367.368 103.044 366.222 101.258 cv
365.384 99.9538 363.427 99.9126 362.086 100.387 cv
362.924 99.126 364.503 98.1526 363.091 96.3915 cv
362.455 95.5984 361.432 95.035 360.479 95.3895 cv
361.516 92.6991 358.749 90.3982 356.438 92.7086 cv
358.494 89.5524 360.366 86.7301 362.416 83.8421 cv
363.685 82.0546 365.006 79.8753 363.944 78.8136 cv
362.583 77.4525 360.518 79.3073 358.055 82.2481 cv
353.854 87.2652 352.46 88.9366 348.061 93.3354 cv
343.922 97.4748 339.508 105.769 341.23 109.535 cv
339.848 115.269 318.91 148.51 312.044 155.376 cv
309.538 157.882 311.583 160.296 312.172 163.792 cv
312.884 168.014 315.967 182.879 326.689 178.045 cv
329.727 176.675 333.468 171.951 333.823 171.135 cv
cp
1 1 1 rgb
f
333.823 171.135 mo
333.826 171.135 li
333.823 171.135 li
cp
362.901 78.8826 mo
362.886 78.8826 362.871 78.8829 362.856 78.8836 cv
361.646 78.9372 359.766 81.0214 358.457 82.5844 cv
358.365 82.6943 li
354.213 87.6525 352.814 89.3229 348.431 93.7058 cv
344.122 98.0145 340.162 105.939 341.706 109.317 cv
341.755 109.424 341.767 109.544 341.739 109.658 cv
340.247 115.85 319.144 149.016 312.414 155.746 cv
310.838 157.322 311.31 158.829 311.962 160.914 cv
312.222 161.744 312.517 162.685 312.689 163.705 cv
313.4 167.923 315.259 175.356 319.724 177.738 cv
321.66 178.771 323.931 178.714 326.474 177.568 cv
329.374 176.26 333.024 171.659 333.343 170.926 cv
335.796 165.284 338.408 157.725 341.173 149.722 cv
345.094 138.372 349.15 126.635 353.286 118.793 cv
353.329 118.713 353.391 118.645 353.468 118.596 cv
357.524 116.01 362.864 111.036 365.651 105.752 cv
366.672 103.816 366.794 103.119 365.781 101.541 cv
365.133 100.533 363.484 100.448 362.261 100.881 cv
362.048 100.956 361.812 100.887 361.673 100.709 cv
361.535 100.532 361.525 100.285 361.65 100.097 cv
361.843 99.807 362.065 99.5388 362.28 99.2797 cv
363.123 98.2628 363.492 97.7291 362.682 96.7191 cv
362.193 96.1094 361.379 95.614 360.661 95.8804 cv
360.468 95.9523 360.251 95.9041 360.106 95.7576 cv
359.961 95.6112 359.916 95.3933 359.99 95.2009 cv
360.462 93.9779 359.978 92.9663 359.329 92.544 cv
358.576 92.0538 357.634 92.254 356.809 93.0789 cv
356.619 93.2686 356.317 93.2843 356.108 93.1154 cv
355.9 92.9464 355.853 92.6475 356 92.4228 cv
357.827 89.6158 359.818 86.5969 361.989 83.5388 cv
362.599 82.6797 364.455 80.0655 363.574 79.1839 cv
363.369 78.9791 363.154 78.8826 362.901 78.8826 cv
cp
322.692 179.524 mo
321.464 179.524 320.307 179.237 319.23 178.662 cv
314.371 176.069 312.399 168.287 311.656 163.879 cv
311.496 162.93 311.225 162.064 310.963 161.227 cv
310.287 159.068 309.649 157.03 311.674 155.005 cv
318.659 148.02 339.036 115.382 340.678 109.576 cv
339 105.385 343.66 96.996 347.691 92.9651 cv
352.041 88.6148 353.432 86.9534 357.562 82.0217 cv
357.654 81.9119 li
360.03 79.0744 361.523 77.8939 362.81 77.8371 cv
363.38 77.8139 363.887 78.016 364.314 78.4432 cv
365.642 79.7714 364.316 82.071 362.843 84.1451 cv
361.121 86.571 359.511 88.9746 358.006 91.267 cv
358.736 91.1502 359.4 91.3406 359.9 91.6659 cv
360.896 92.3135 361.37 93.5138 361.184 94.7609 cv
362.007 94.7963 362.853 95.2575 363.5 96.064 cv
364.71 97.574 364.061 98.7218 363.372 99.597 cv
364.667 99.5173 365.978 99.9103 366.662 100.975 cv
367.927 102.945 367.75 104.017 366.577 106.241 cv
363.728 111.643 358.306 116.723 354.149 119.404 cv
350.071 127.175 346.051 138.81 342.163 150.064 cv
339.391 158.087 336.773 165.664 334.303 171.344 cv
334.303 171.344 li
333.901 172.269 330.1 177.082 326.904 178.523 cv
325.424 179.19 324.016 179.524 322.692 179.524 cv
cp
0 0 0 rgb
f
358.465 108.323 mo
357.986 108.323 357.536 108.176 357.193 107.891 cv
356.597 107.397 356.359 106.52 356.586 105.656 cv
356.773 104.945 357.216 104.363 357.617 103.874 cv
358.987 102.2 359.36 101.905 360.356 101.117 cv
360.71 100.837 361.15 100.489 361.75 99.9857 cv
361.971 99.7999 362.302 99.829 362.488 100.05 cv
362.673 100.272 362.645 100.602 362.423 100.788 cv
361.812 101.301 361.365 101.654 361.006 101.938 cv
360.049 102.696 359.726 102.951 358.428 104.537 cv
358.082 104.96 357.733 105.415 357.599 105.923 cv
357.501 106.296 357.541 106.819 357.861 107.085 cv
358.124 107.303 358.573 107.336 359.004 107.171 cv
359.47 106.992 359.885 106.629 360.286 106.278 cv
362.354 104.466 li
362.571 104.275 362.902 104.297 363.093 104.515 cv
363.284 104.732 363.262 105.063 363.044 105.254 cv
360.976 107.066 li
360.528 107.458 360.02 107.903 359.38 108.149 cv
359.076 108.266 358.765 108.323 358.465 108.323 cv
cp
f
354.707 106.52 mo
354.432 106.52 354.158 106.467 353.894 106.332 cv
352.953 105.853 352.745 104.657 352.956 103.686 cv
353.294 102.126 355.589 99.334 359.971 95.1506 cv
360.117 95.011 li
360.326 94.8113 360.657 94.8183 360.857 95.0275 cv
361.057 95.2366 361.05 95.568 360.841 95.768 cv
360.694 95.9083 li
355.504 100.864 354.178 102.993 353.979 103.908 cv
353.854 104.486 353.948 105.184 354.37 105.399 cv
354.709 105.572 355.221 105.407 355.677 105.223 cv
356.179 105.02 356.68 104.802 357.168 104.573 cv
357.429 104.45 357.742 104.563 357.864 104.825 cv
357.987 105.087 357.875 105.399 357.613 105.521 cv
357.108 105.758 356.589 105.985 356.069 106.194 cv
355.644 106.366 355.174 106.52 354.707 106.52 cv
cp
f
350.958 110.059 mo
350.876 110.059 350.792 110.039 350.714 109.998 cv
350.458 109.863 350.36 109.546 350.495 109.29 cv
351.513 107.363 350.615 105.298 349.895 103.638 cv
349.343 102.369 348.907 101.367 349.533 100.697 cv
350.306 99.8711 352.364 99.6353 354.405 99.4643 cv
354.792 99.4321 355.23 99.3954 355.333 99.3669 cv
356.349 99.035 356.703 98.5332 356.823 98.2636 cv
356.938 98.0058 356.908 97.8214 356.888 97.777 cv
356.711 97.3757 356.027 96.6186 355.763 96.5312 cv
354.598 96.1448 351.128 96.2969 349.263 96.3787 cv
348.913 96.3941 348.61 96.4074 348.375 96.4151 cv
347.424 96.4461 345.165 97.4931 345.019 97.9712 cv
344.934 98.2468 344.643 98.4065 344.367 98.3225 cv
344.091 98.2398 343.932 97.9528 344.013 97.6763 cv
344.364 96.4821 347.331 95.4011 348.341 95.3682 cv
348.573 95.3605 348.872 95.3474 349.217 95.3322 cv
351.891 95.2152 354.849 95.1244 356.093 95.5368 cv
356.772 95.7622 357.626 96.8563 357.846 97.3533 cv
358.012 97.7266 357.987 98.2263 357.78 98.6902 cv
357.547 99.2132 356.989 99.9282 355.654 100.364 cv
355.469 100.425 355.164 100.452 354.492 100.508 cv
353.313 100.607 350.86 100.812 350.298 101.413 cv
350.142 101.58 350.589 102.607 350.855 103.221 cv
351.623 104.987 352.674 107.407 351.422 109.779 cv
351.328 109.957 351.146 110.059 350.958 110.059 cv
cp
f
353.749 96.2799 mo
353.66 96.2799 353.57 96.257 353.487 96.2091 cv
353.237 96.064 353.151 95.7436 353.296 95.4933 cv
353.63 94.9167 354.504 93.9742 355.275 93.1426 cv
355.635 92.7546 355.975 92.388 356.201 92.121 cv
356.388 91.9007 356.719 91.8727 356.939 92.0603 cv
357.16 92.2475 357.187 92.5779 357 92.7986 cv
356.758 93.0833 356.411 93.4581 356.043 93.8548 cv
355.346 94.6071 354.478 95.5431 354.203 96.0185 cv
354.105 96.1861 353.93 96.2799 353.749 96.2799 cv
cp
f
352.807 104.837 mo
352.199 104.837 351.562 104.505 351.16 103.953 cv
350.842 103.515 350.227 102.293 351.391 100.417 cv
351.543 100.171 351.866 100.095 352.112 100.248 cv
352.358 100.4 352.433 100.723 352.281 100.969 cv
351.697 101.91 351.598 102.773 352.007 103.337 cv
352.274 103.704 352.682 103.836 352.931 103.775 cv
353.212 103.706 353.496 103.877 353.565 104.158 cv
353.634 104.439 353.462 104.723 353.182 104.792 cv
353.06 104.822 352.934 104.837 352.807 104.837 cv
cp
f
155.939 192.877 mo
159.671 173.262 159.699 152.208 175.499 139.019 cv
183.084 132.689 201.063 129.956 211.603 129.279 cv
212.248 139.484 222.224 141.911 228.609 141.501 cv
239.273 140.817 241.17 138.721 243.879 130.624 cv
246.273 131.577 260.676 132.3 270.029 140.657 cv
287.391 156.167 310.129 153.755 311.368 154.994 cv
313.09 156.716 308.854 171.769 324.162 178.859 cv
330.603 181.841 292.006 187.978 265.425 180.942 cv
266.421 194.853 258.283 233.378 255.399 248.999 cv
227.672 268.335 173.789 248.527 173.789 248.527 cv
173.789 248.527 178.149 235.692 178.149 226.01 cv
178.149 221.209 161.355 231.144 159.125 231.539 cv
158.384 231.671 156.703 231.064 156.407 230.373 cv
154.533 225.988 152.505 210.921 155.939 192.877 cv
cp
f
311.026 155.389 mo
311.027 155.389 311.027 155.389 311.027 155.389 cv
311.026 155.389 li
cp
174.446 248.205 mo
176.985 249.095 189.359 253.266 204.292 255.499 cv
219.581 257.785 240.746 258.451 254.923 248.692 cv
255.377 246.24 255.948 243.281 256.607 239.871 cv
260.021 222.192 265.734 192.603 264.902 180.98 cv
264.89 180.811 264.96 180.647 265.09 180.539 cv
265.221 180.43 265.396 180.393 265.559 180.436 cv
279.666 184.17 295.564 183.881 303.786 183.379 cv
316.733 182.586 323.865 180.544 324.34 179.589 cv
324.304 179.547 324.202 179.454 323.942 179.334 cv
312.153 173.874 311.674 163.84 311.416 158.449 cv
311.352 157.098 311.285 155.701 311.012 155.381 cv
310.7 155.217 309.216 155.11 307.646 154.997 cv
300.372 154.473 283.337 153.247 269.68 141.047 cv
262.482 134.617 252.346 132.793 246.901 131.814 cv
245.748 131.607 244.836 131.443 244.211 131.277 cv
241.495 139.224 239.227 141.345 228.642 142.024 cv
226.787 142.143 222.008 142.167 217.704 139.831 cv
213.819 137.721 211.551 134.273 211.122 129.836 cv
199.038 130.665 182.75 133.649 175.835 139.421 cv
163.154 150.006 160.795 165.456 158.297 181.813 cv
157.736 185.485 157.156 189.281 156.453 192.975 cv
155.939 192.877 li
156.453 192.975 li
152.889 211.702 155.26 226.357 156.889 230.167 cv
157.059 230.564 158.46 231.125 159.033 231.024 cv
159.573 230.928 161.413 230.038 163.361 229.095 cv
170.111 225.83 175.865 223.232 177.913 224.516 cv
178.259 224.734 178.673 225.169 178.673 226.01 cv
178.673 234.598 175.237 245.75 174.446 248.205 cv
cp
222.352 257.973 mo
215.906 257.973 209.635 257.358 204.119 256.532 cv
187.323 254.018 173.743 249.069 173.608 249.019 cv
173.341 248.921 173.201 248.628 173.293 248.359 cv
173.336 248.232 177.625 235.492 177.625 226.01 cv
177.625 225.622 177.481 225.482 177.356 225.404 cv
175.632 224.321 167.947 228.041 163.817 230.038 cv
161.314 231.249 159.867 231.94 159.216 232.055 cv
158.307 232.219 156.34 231.547 155.926 230.579 cv
153.779 225.556 152.134 210.068 155.424 192.779 cv
156.124 189.104 156.702 185.317 157.261 181.655 cv
159.679 165.825 162.179 149.456 175.164 138.617 cv
182.371 132.6 199.28 129.545 211.569 128.757 cv
211.71 128.748 211.845 128.794 211.949 128.886 cv
212.053 128.978 212.117 129.107 212.126 129.246 cv
212.402 133.619 214.447 136.871 218.203 138.91 cv
222.268 141.117 226.811 141.092 228.575 140.978 cv
239.047 140.307 240.73 138.385 243.383 130.458 cv
243.428 130.321 243.528 130.209 243.659 130.149 cv
243.789 130.088 243.939 130.084 244.073 130.137 cv
244.547 130.326 245.668 130.528 247.086 130.783 cv
252.633 131.781 262.959 133.638 270.378 140.266 cv
283.768 152.228 300.554 153.436 307.721 153.952 cv
310.46 154.149 311.345 154.23 311.738 154.623 cv
312.309 155.195 312.367 156.401 312.462 158.399 cv
312.709 163.569 313.169 173.19 324.382 178.383 cv
325.507 178.904 325.465 179.564 325.34 179.911 cv
324.564 182.06 313.924 183.809 303.814 184.426 cv
295.673 184.923 280.047 185.207 265.99 181.63 cv
266.569 193.803 261.208 221.571 257.635 240.07 cv
256.958 243.577 256.373 246.605 255.914 249.095 cv
255.889 249.23 255.811 249.35 255.698 249.429 cv
246.366 255.937 234.074 257.973 222.352 257.973 cv
cp
f
268.709 237.579 mo
256.237 237.846 243.765 238.114 231.293 238.382 cv
231.245 232.026 li
272.89 231.009 li
268.709 237.579 li
cp
1 1 1 rgb
f
268.709 237.579 mo
268.712 237.579 li
268.709 237.579 li
cp
231.773 232.538 mo
231.813 237.846 li
268.418 237.061 li
271.92 231.557 li
231.773 232.538 li
cp
231.293 238.905 mo
231.157 238.905 231.026 238.852 230.928 238.757 cv
230.828 238.659 230.771 238.526 230.77 238.385 cv
230.721 232.031 li
230.719 231.745 230.947 231.51 231.232 231.503 cv
272.877 230.486 li
273.068 230.486 273.251 230.583 273.346 230.751 cv
273.441 230.92 273.435 231.127 273.332 231.291 cv
269.151 237.86 li
269.057 238.008 268.895 238.099 268.72 238.102 cv
231.305 238.905 li
231.301 238.905 231.297 238.905 231.293 238.905 cv
cp
0 0 0 rgb
f
375.028 179.552 mo
293.691 179.997 li
265.656 237.577 li
346.231 237.374 li
375.028 179.552 li
cp
1 1 1 rgb
f
294.02 180.52 mo
266.495 237.051 li
345.906 236.851 li
374.18 180.08 li
294.02 180.52 li
cp
265.656 238.101 mo
265.476 238.101 265.309 238.008 265.213 237.856 cv
265.117 237.702 265.107 237.51 265.186 237.348 cv
293.22 179.768 li
293.307 179.589 293.489 179.475 293.688 179.474 cv
375.025 179.028 li
375.026 179.028 375.027 179.028 375.028 179.028 cv
375.209 179.028 375.377 179.121 375.473 179.275 cv
375.569 179.429 375.578 179.622 375.497 179.785 cv
346.699 237.608 li
346.611 237.785 346.43 237.898 346.232 237.898 cv
265.658 238.101 li
265.657 238.101 265.657 238.101 265.656 238.101 cv
cp
0 0 0 rgb
f
323.581 203.014 mo
325.89 202.788 328.413 203.405 329.353 205.525 cv
330.294 207.646 329.573 210.304 327.86 211.868 cv
326.146 213.432 323.612 213.935 321.349 213.426 cv
320.126 213.151 318.915 212.558 318.212 211.521 cv
317.724 210.802 317.516 209.918 317.51 209.048 cv
317.491 206.193 318.793 203.484 323.581 203.014 cv
cp
1 1 1 rgb
f
323.581 203.014 mo
323.584 203.014 li
323.581 203.014 li
cp
324.451 203.496 mo
324.111 203.496 323.826 203.516 323.632 203.535 cv
323.632 203.535 li
319.843 203.907 318.012 205.709 318.034 209.045 cv
318.038 209.635 318.147 210.493 318.645 211.227 cv
319.189 212.029 320.19 212.628 321.464 212.915 cv
323.677 213.414 325.992 212.863 327.507 211.481 cv
329.121 210.007 329.697 207.591 328.875 205.738 cv
328.019 203.81 325.8 203.496 324.451 203.496 cv
cp
323.081 214.142 mo
322.467 214.142 321.847 214.075 321.234 213.937 cv
320.148 213.693 318.667 213.126 317.778 211.815 cv
317.267 211.062 316.994 210.106 316.987 209.052 cv
316.968 206.355 318.09 203.027 323.53 202.493 cv
323.53 202.493 li
326.563 202.195 328.917 203.25 329.832 205.313 cv
330.832 207.566 330.151 210.486 328.213 212.255 cv
326.874 213.476 325.012 214.142 323.081 214.142 cv
cp
0 0 0 rgb
f
175.585 210.536 mo
190.613 209.698 205.731 208.662 220.851 207.623 cv
222.205 207.4 228.931 206.438 230.591 206.194 cv
231.997 205.988 233.339 205.469 234.63 204.874 cv
239.127 202.798 248.776 198.723 250.927 199.928 cv
255.888 201.387 260.384 204.968 263.897 209.501 cv
265.87 212.046 267.486 216.261 266.67 216.986 cv
266.15 217.447 265.367 217.637 264.792 217.158 cv
262.452 212.149 258.285 208.017 253.255 205.722 cv
255.595 207.044 257.775 208.648 259.733 210.49 cv
261.717 212.355 263.54 214.605 263.987 217.292 cv
264.021 217.501 264.044 217.731 263.934 217.912 cv
263.664 218.357 262.977 218.098 262.567 217.777 cv
261.764 217.148 251.426 208.752 249.494 208.975 cv
252.063 209.944 261.22 217.375 261.258 218.167 cv
261.276 218.544 261.203 218.942 260.966 219.236 cv
260.641 219.639 260.065 219.767 259.555 219.683 cv
259.045 219.599 258.584 219.335 258.142 219.067 cv
255.186 217.272 252.479 215.02 249.286 213.691 cv
247.692 213.028 245.744 212.645 244.326 213.632 cv
247.175 214.711 249.841 216.282 252.074 218.335 cv
252.431 218.663 252.73 219.049 252.967 219.472 cv
253.318 220.101 253.714 221.01 253.226 221.529 cv
252.429 222.378 251.755 221.951 251.071 221.551 cv
248.33 219.744 245.531 218.254 242.602 217.087 cv
241.693 216.725 240.609 216.408 239.785 216.935 cv
239.072 217.392 235.622 219.534 228.532 219.901 cv
226.112 220.027 223.78 220.657 220.754 221.491 cv
180.909 232.47 169.007 236.852 159.355 232.702 cv
157.465 231.889 156.828 230.897 157.458 227.653 cv
159.14 218.992 160.784 214.069 175.585 210.536 cv
cp
1 1 1 rgb
f
175.661 211.056 mo
161.185 214.52 159.639 219.167 157.972 227.753 cv
157.361 230.901 158.02 231.558 159.562 232.221 cv
167.757 235.744 177.422 233.042 206.112 225.02 cv
210.421 223.814 215.305 222.449 220.615 220.986 cv
223.488 220.194 225.97 219.51 228.505 219.378 cv
234.88 219.048 238.32 217.251 239.503 216.494 cv
240.531 215.836 241.803 216.205 242.796 216.601 cv
245.719 217.766 248.52 219.242 251.359 221.114 cv
251.385 221.128 li
252.104 221.549 252.376 221.669 252.844 221.171 cv
252.933 221.076 253.078 220.746 252.509 219.727 cv
252.295 219.344 252.029 219.005 251.72 218.721 cv
249.599 216.771 247.048 215.224 244.14 214.121 cv
243.959 214.052 243.83 213.889 243.806 213.696 cv
243.783 213.503 243.867 213.313 244.027 213.202 cv
245.712 212.029 247.927 212.558 249.488 213.208 cv
251.666 214.114 253.635 215.449 255.539 216.739 cv
256.474 217.373 257.441 218.028 258.414 218.619 cv
258.825 218.869 259.227 219.098 259.64 219.166 cv
259.953 219.219 260.356 219.158 260.558 218.908 cv
260.676 218.762 260.738 218.535 260.737 218.265 cv
260.05 217.12 251.717 210.374 249.309 209.464 cv
249.083 209.379 248.944 209.15 248.974 208.91 cv
249.004 208.67 249.194 208.482 249.434 208.454 cv
249.927 208.398 251.431 208.223 262.542 217.088 cv
262.71 217.221 262.828 217.316 262.89 217.364 cv
263.161 217.576 263.436 217.646 263.511 217.623 cv
263.488 217.627 263.502 217.571 263.47 217.378 cv
263.113 215.232 261.812 213.164 259.374 210.871 cv
257.447 209.059 255.301 207.48 252.997 206.178 cv
252.753 206.04 252.661 205.734 252.788 205.484 cv
252.915 205.234 253.217 205.128 253.472 205.245 cv
258.547 207.561 262.818 211.773 265.209 216.814 cv
265.56 217.028 266.022 216.86 266.322 216.594 cv
266.669 216.086 265.534 212.469 263.483 209.822 cv
259.822 205.098 255.311 201.763 250.78 200.431 cv
250.742 200.419 250.706 200.404 250.671 200.385 cv
249.303 199.619 242.944 201.613 234.849 205.349 cv
233.742 205.86 232.265 206.478 230.667 206.713 cv
230.229 206.777 229.439 206.891 228.488 207.028 cv
225.876 207.406 221.928 207.977 220.936 208.14 cv
220.92 208.143 220.904 208.145 220.887 208.146 cv
206.122 209.16 190.855 210.209 175.661 211.056 cv
cp
167.442 234.787 mo
164.268 234.787 161.656 234.261 159.148 233.183 cv
156.844 232.193 156.308 230.824 156.943 227.554 cv
158.648 218.776 160.348 213.634 175.464 210.026 cv
175.494 210.019 175.525 210.014 175.556 210.012 cv
190.75 209.166 206.021 208.117 220.791 207.103 cv
221.832 206.932 225.743 206.367 228.338 205.992 cv
229.288 205.854 230.077 205.74 230.515 205.676 cv
231.98 205.461 233.366 204.88 234.41 204.398 cv
238.593 202.467 248.546 198.145 251.126 199.44 cv
255.917 200.863 260.475 204.23 264.311 209.18 cv
265.982 211.337 268.337 216.207 267.018 217.377 cv
266.255 218.055 265.25 218.15 264.538 217.625 cv
264.533 217.811 264.492 218.002 264.382 218.184 cv
264.23 218.434 263.986 218.601 263.695 218.654 cv
263.184 218.748 262.61 218.475 262.244 218.189 cv
262.181 218.14 262.06 218.043 261.889 217.907 cv
261.767 217.809 261.647 217.714 261.527 217.619 cv
261.691 217.842 261.775 218.017 261.781 218.142 cv
261.808 218.709 261.667 219.201 261.374 219.565 cv
260.956 220.082 260.226 220.325 259.47 220.199 cv
258.872 220.101 258.352 219.807 257.87 219.515 cv
256.875 218.91 255.897 218.247 254.951 217.606 cv
253.09 216.345 251.166 215.041 249.085 214.175 cv
248.098 213.764 246.816 213.399 245.691 213.62 cv
248.239 214.725 250.501 216.178 252.429 217.949 cv
252.82 218.309 253.155 218.735 253.424 219.216 cv
253.672 219.661 254.428 221.014 253.608 221.888 cv
252.544 223.021 251.527 222.426 250.855 222.032 cv
250.807 222.003 li
248.004 220.156 245.264 218.712 242.408 217.574 cv
241.648 217.271 240.695 216.975 240.068 217.376 cv
238.814 218.178 235.184 220.081 228.559 220.425 cv
226.138 220.55 223.708 221.22 220.893 221.996 cv
215.585 223.458 210.702 224.824 206.394 226.028 cv
185.944 231.747 175.071 234.787 167.442 234.787 cv
cp
0 0 0 rgb
f
184.551 210.538 mo
184.496 210.538 184.441 210.53 184.387 210.512 cv
184.112 210.421 183.963 210.125 184.053 209.85 cv
189.679 192.814 192.862 182.038 192.862 158.699 cv
192.862 158.41 193.097 158.175 193.386 158.175 cv
193.676 158.175 193.91 158.41 193.91 158.699 cv
193.91 182.199 190.708 193.04 185.048 210.179 cv
184.976 210.399 184.771 210.538 184.551 210.538 cv
cp
f
265.076 180.551 mo
265.075 180.551 265.075 180.552 265.075 180.552 cv
265.075 180.552 265.076 180.551 265.076 180.551 cv
cp
265.425 181.466 mo
265.281 181.466 265.138 181.407 265.034 181.291 cv
264.878 181.117 264.861 180.867 264.973 180.676 cv
265.037 180.375 265.055 179.135 265.081 177.295 cv
265.118 174.72 265.18 170.41 265.423 163.861 cv
265.434 163.573 265.672 163.349 265.966 163.357 cv
266.255 163.368 266.481 163.611 266.47 163.9 cv
266.228 170.436 266.166 174.739 266.129 177.31 cv
266.079 180.78 266.075 181.063 265.774 181.332 cv
265.674 181.422 265.549 181.466 265.425 181.466 cv
cp
f
235.549 171.863 mo
224.081 171.863 211.484 170.771 202.255 169.479 cv
202.159 169.465 202.093 169.377 202.106 169.281 cv
202.12 169.186 202.208 169.122 202.303 169.133 cv
220.056 171.618 250.286 173.37 260.809 168.014 cv
260.896 167.97 261.001 168.004 261.044 168.09 cv
261.088 168.176 261.054 168.281 260.968 168.325 cv
255.868 170.921 246.194 171.863 235.549 171.863 cv
cp
1 1 1 rgb
f
224.188 186.811 mo
216.587 186.811 208.639 186.161 200.655 184.528 cv
200.561 184.508 200.5 184.416 200.519 184.321 cv
200.538 184.227 200.631 184.165 200.725 184.185 cv
223.486 188.842 245.983 185.488 260.847 181.855 cv
260.94 181.832 261.035 181.889 261.059 181.983 cv
261.081 182.077 261.024 182.171 260.93 182.194 cv
251.243 184.562 238.317 186.811 224.188 186.811 cv
cp
f
154.695 215.219 mo
154.655 215.219 154.615 215.206 154.582 215.178 cv
154.509 215.115 154.499 215.005 154.562 214.932 cv
161.453 206.82 172.684 202.736 183.177 204.526 cv
183.272 204.542 183.336 204.632 183.319 204.728 cv
183.303 204.823 183.214 204.887 183.118 204.87 cv
172.745 203.101 161.641 207.139 154.828 215.158 cv
154.794 215.198 154.745 215.219 154.695 215.219 cv
cp
f
155.937 207.82 mo
155.868 207.82 155.802 207.779 155.775 207.711 cv
155.739 207.621 155.782 207.52 155.872 207.484 cv
156.918 207.062 157.793 206.281 158.639 205.524 cv
158.944 205.251 159.26 204.969 159.582 204.705 cv
161.563 203.082 163.95 202.025 166.484 201.65 cv
166.58 201.633 166.668 201.702 166.682 201.797 cv
166.697 201.893 166.63 201.981 166.535 201.995 cv
164.063 202.361 161.736 203.391 159.803 204.975 cv
159.488 205.234 159.174 205.514 158.872 205.785 cv
158.003 206.561 157.105 207.363 156.002 207.807 cv
155.981 207.816 155.959 207.82 155.937 207.82 cv
cp
f
308.956 170.002 mo
308.887 170.002 308.822 169.961 308.794 169.894 cv
307.027 165.576 306.159 160.829 306.285 156.166 cv
306.288 156.07 306.367 156.001 306.465 155.996 cv
306.561 155.999 306.637 156.079 306.634 156.176 cv
306.51 160.79 307.368 165.488 309.117 169.762 cv
309.154 169.851 309.111 169.953 309.022 169.989 cv
309 169.998 308.978 170.002 308.956 170.002 cv
cp
f
302.584 161.401 mo
302.504 161.401 302.432 161.346 302.414 161.266 cv
302.032 159.587 301.926 157.867 302.097 156.154 cv
302.107 156.058 302.191 155.987 302.288 155.997 cv
302.384 156.007 302.454 156.092 302.444 156.188 cv
302.277 157.864 302.381 159.546 302.755 161.188 cv
302.776 161.282 302.717 161.376 302.623 161.397 cv
302.61 161.4 302.597 161.401 302.584 161.401 cv
cp
f
183.148 211.555 mo
183.102 211.555 183.056 211.55 183.01 211.537 cv
182.731 211.461 182.566 211.173 182.642 210.894 cv
186.457 196.867 189.061 182.447 190.381 168.034 cv
190.407 167.746 190.664 167.535 190.95 167.56 cv
191.238 167.587 191.451 167.841 191.424 168.13 cv
190.098 182.603 187.484 197.084 183.653 211.169 cv
183.589 211.402 183.378 211.555 183.148 211.555 cv
cp
f
266.568 184.097 mo
266.282 184.097 266.048 183.868 266.044 183.581 cv
265.8 167.58 li
265.796 167.291 266.027 167.053 266.316 167.048 cv
266.611 167.056 266.843 167.275 266.848 167.564 cv
267.092 183.566 li
267.096 183.855 266.865 184.093 266.576 184.097 cv
266.573 184.097 266.57 184.097 266.568 184.097 cv
cp
f
525.728 101.641 mo
525.609 101.641 525.49 101.601 525.392 101.519 cv
525.17 101.334 525.141 101.003 525.326 100.781 cv
532.729 91.9326 536.601 80.2514 535.95 68.7328 cv
535.934 68.444 536.155 68.1968 536.443 68.1804 cv
536.739 68.1661 536.98 68.3852 536.996 68.6739 cv
537.661 80.4551 533.701 92.4028 526.13 101.453 cv
526.026 101.577 525.878 101.641 525.728 101.641 cv
cp
0 0 0 rgb
f
536.344 106.549 mo
536.2 106.549 536.057 106.491 535.953 106.374 cv
535.761 106.159 535.779 105.828 535.995 105.635 cv
540.335 101.761 544.343 97.4643 547.907 92.8649 cv
548.084 92.6362 548.413 92.5946 548.642 92.7718 cv
548.87 92.9489 548.912 93.278 548.735 93.5067 cv
545.132 98.1564 541.08 102.5 536.693 106.416 cv
536.593 106.506 536.469 106.549 536.344 106.549 cv
cp
f
545.405 115.626 mo
545.259 115.626 545.114 115.565 545.01 115.447 cv
544.82 115.23 544.842 114.899 545.059 114.708 cv
550.088 110.305 556.181 107.152 562.68 105.592 cv
562.963 105.524 563.243 105.698 563.311 105.979 cv
563.379 106.26 563.205 106.543 562.924 106.61 cv
556.589 108.131 550.651 111.204 545.749 115.496 cv
545.65 115.583 545.527 115.626 545.405 115.626 cv
cp
f
629.013 287.233 mo
626.79 289.365 626.957 293.571 628.552 296.264 cv
630.268 299.165 633.248 301 636.153 302.63 cv
637.608 303.446 639.179 304.242 640.805 304.929 cv
640.889 304.18 640.958 303.424 640.976 302.679 cv
641.148 295.31 635.693 288.3 629.013 287.233 cv
cp
594.138 355.332 mo
594.028 355.332 593.918 355.298 593.823 355.227 cv
593.592 355.053 593.545 354.725 593.719 354.494 cv
596.754 350.449 600.398 346.124 605.248 345.997 cv
606.832 345.951 608.437 346.379 609.986 346.788 cv
612.391 347.424 614.664 348.025 616.611 346.845 cv
618.026 345.989 618.861 344.415 619.745 342.748 cv
620.441 341.434 621.161 340.075 622.211 339.03 cv
624.382 336.865 627.341 336.533 630.202 336.211 cv
631.743 336.039 633.337 335.86 634.772 335.392 cv
639.34 333.906 642.774 328.865 642.76 323.665 cv
642.754 321.39 642.156 319.118 641.579 316.92 cv
641.004 314.733 640.409 312.471 640.364 310.143 cv
640.337 308.749 640.508 307.361 640.674 306.018 cv
640.674 306.015 640.675 306.012 640.675 306.009 cv
638.911 305.28 637.211 304.425 635.64 303.543 cv
632.612 301.843 629.5 299.922 627.65 296.797 cv
625.808 293.685 625.61 288.78 628.502 286.282 cv
628.616 286.184 628.766 286.14 628.916 286.16 cv
636.207 287.164 642.209 294.74 642.023 302.703 cv
642.002 303.587 641.914 304.471 641.812 305.337 cv
647.448 307.528 653.58 308.249 657.769 304.053 cv
659.089 302.731 660.027 301.081 661.02 299.333 cv
661.556 298.391 662.11 297.416 662.727 296.506 cv
664.95 293.221 667.856 291.574 670.497 292.095 cv
670.781 292.151 670.965 292.427 670.909 292.71 cv
670.853 292.994 670.579 293.179 670.294 293.122 cv
667.014 292.47 664.336 295.997 663.594 297.093 cv
663.001 297.97 662.457 298.926 661.931 299.851 cv
660.947 301.582 659.93 303.372 658.511 304.793 cv
654.006 309.305 647.575 308.647 641.681 306.408 cv
641.531 307.633 641.388 308.892 641.411 310.123 cv
641.454 312.325 642.032 314.526 642.592 316.654 cv
643.186 318.915 643.801 321.254 643.808 323.663 cv
643.823 329.297 640.078 334.768 635.096 336.389 cv
633.56 336.889 631.912 337.074 630.319 337.253 cv
627.513 337.568 624.863 337.865 622.95 339.772 cv
622.013 340.706 621.33 341.994 620.67 343.239 cv
619.758 344.958 618.816 346.736 617.154 347.741 cv
614.826 349.151 612.229 348.464 609.718 347.801 cv
608.241 347.41 606.72 347.007 605.276 347.044 cv
600.893 347.159 597.445 351.274 594.557 355.122 cv
594.454 355.26 594.297 355.332 594.138 355.332 cv
cp
f
405.717 144.928 mo
405.555 144.928 405.395 144.853 405.293 144.712 cv
400.649 138.31 394.959 132.837 388.382 128.445 cv
388.142 128.284 388.077 127.959 388.238 127.718 cv
388.398 127.478 388.724 127.413 388.964 127.574 cv
395.645 132.035 401.424 137.594 406.141 144.097 cv
406.311 144.331 406.259 144.658 406.025 144.829 cv
405.932 144.896 405.824 144.928 405.717 144.928 cv
cp
f
397.84 151.106 mo
397.763 151.106 397.685 151.09 397.612 151.054 cv
393.552 149.089 389.304 147.428 384.988 146.119 cv
384.711 146.035 384.555 145.742 384.638 145.465 cv
384.722 145.189 385.014 145.032 385.292 145.116 cv
389.661 146.441 393.959 148.122 398.068 150.111 cv
398.329 150.237 398.438 150.551 398.311 150.811 cv
398.221 150.998 398.034 151.106 397.84 151.106 cv
cp
f
184.062 47.9832 mo
183.909 47.9832 183.758 47.9165 183.654 47.7882 cv
180.229 43.5406 176.952 39.0894 173.912 34.558 cv
173.751 34.3177 173.815 33.9924 174.055 33.8313 cv
174.295 33.6696 174.621 33.7343 174.782 33.9745 cv
177.805 38.4805 181.064 42.9069 184.47 47.1307 cv
184.651 47.3558 184.616 47.6855 184.391 47.8671 cv
184.294 47.9452 184.178 47.9832 184.062 47.9832 cv
cp
f
193.216 42.6169 mo
192.965 42.6169 192.743 42.4358 192.7 42.1799 cv
190.781 30.7582 li
190.733 30.4729 190.926 30.2028 191.211 30.1548 cv
191.497 30.1091 191.766 30.2993 191.815 30.5846 cv
193.733 42.0063 li
193.781 42.2915 193.589 42.5616 193.303 42.6097 cv
193.274 42.6145 193.245 42.6169 193.216 42.6169 cv
cp
f
175.745 57.1903 mo
175.625 57.1903 175.504 57.149 175.405 57.0646 cv
170.774 53.1045 165.147 50.4969 159.132 49.5237 cv
158.846 49.4775 158.652 49.2084 158.699 48.9228 cv
158.745 48.6374 159.012 48.4454 159.299 48.4894 cv
165.504 49.4935 171.309 52.1835 176.086 56.2684 cv
176.306 56.4564 176.331 56.787 176.144 57.0068 cv
176.04 57.128 175.893 57.1903 175.745 57.1903 cv
cp
f
239.025 308.755 mo
240.479 311.242 242.685 313.309 245.285 314.511 cv
246.125 314.9 247.687 315.441 248.708 314.698 cv
249.669 313.999 249.637 312.385 248.967 311.409 cv
248.328 310.478 247.238 309.811 245.537 309.307 cv
243.417 308.68 241.2 308.515 239.025 308.755 cv
cp
199.956 340.29 mo
197.881 340.29 195.806 340.009 193.792 339.417 cv
193.514 339.335 193.355 339.044 193.437 338.766 cv
193.518 338.489 193.809 338.331 194.087 338.411 cv
204.421 341.449 216.444 335.936 220.887 326.124 cv
221.442 324.898 221.898 323.593 222.339 322.331 cv
222.917 320.677 223.514 318.966 224.352 317.373 cv
226.958 312.415 231.978 308.993 237.426 307.944 cv
237.016 307.052 236.695 306.122 236.474 305.169 cv
235.422 300.634 236.466 295.428 239.414 290.509 cv
242.024 286.157 245.675 282.582 249.207 279.125 cv
249.414 278.923 249.745 278.926 249.948 279.133 cv
250.15 279.34 250.146 279.671 249.94 279.874 cv
246.455 283.285 242.853 286.811 240.313 291.048 cv
237.505 295.733 236.504 300.664 237.494 304.932 cv
237.721 305.91 238.062 306.862 238.5 307.769 cv
240.944 307.443 243.446 307.596 245.834 308.303 cv
247.752 308.87 249.059 309.693 249.83 310.815 cv
250.795 312.22 250.822 314.456 249.324 315.545 cv
247.943 316.549 246.126 316.054 244.845 315.461 cv
241.925 314.112 239.468 311.748 237.913 308.913 cv
232.658 309.83 227.786 313.092 225.279 317.861 cv
224.478 319.384 223.893 321.058 223.328 322.677 cv
222.879 323.961 222.416 325.288 221.841 326.556 cv
218.057 334.913 209.019 340.29 199.956 340.29 cv
cp
f
228.164 293.017 mo
227.885 293.017 227.653 292.797 227.641 292.515 cv
227.386 286.461 229.559 280.402 233.603 275.89 cv
233.796 275.675 234.128 275.656 234.343 275.849 cv
234.558 276.042 234.576 276.374 234.383 276.589 cv
230.52 280.899 228.444 286.688 228.688 292.471 cv
228.7 292.76 228.475 293.004 228.186 293.016 cv
228.179 293.017 228.171 293.017 228.164 293.017 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 26.3.1
%%For: ( ) ()
%%Title: (2206.w039.n003.255B.p1.255-temp_01.eps)
%%CreationDate: 6/10/2022 3:19 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj26De+!81^97>t,Tt/P@J0j=%1,=b9gE[<+W2Dcbq,H]+.hBhf$Z_1'?C6a"N58>OOWo#<F&m70/GJn>49s5jkAC&rSOH9
%Q<LLL/`k\i9)J(,VP[[cpVKtg')?jY;[mO0h.F>;[T^4fV;?#?V/eeQ>&#QIK-rtMI9<Jus%0=nK&Qs`a_obOKlSIje=5!]ST6J(
%!R5,Sr3cd:TE4sAi#B(5V,I_FTmg+tW5A-A4`QPIbC8)]"+&=pNYq/cYH#Ydb4sl<a1^uDghJd#G.CrV4GuY7)\.)'+#X1L!0'9+
%nD=X:9]a1@TMoP\2Q=2#Hu.-+Y_i2*:'2XkWoZK93rPt5s7i)O70*/@Jr]lO`@cYWcUQ&N=kq?kDBA[/\:C?N//oWLU4Rin",+l0
%P/tOnYhH#Ym>qP"FR>$X=thcBrhs17@2L"7\,a2ofUA"E>p)IT`:J6#_]S"0T;C&\0IVWL0t,bIHb]Id`Xmh,KLLFc3gHrF[T78J
%X10=FRD2`TKbYXk;8#d4E&^jPi,;cX+D@@#D32tfV1ZEf8pO8egR[VAn2"mhA:smO:*Zh\e.2l5"ZPJoT'rHp04XfK<5pdo\nN'3
%?ao)U\R%leAA9siU318Z)j4L:3&J5iK0.?K=h1uJi)gICb]e_fXuFP#=?Kk6jmb!=46%diI/-P\%4l2%_j[Af2i_r`ED%ud>Pk.U
%KC_k2U_]2WKn]hcV*)\2'r8O/&)%'VlfgSAdD)[2T5C#X)Z5sLrcT:ZmJHZ?Q]k7p`4r1+:JDLpRO16N'W=&oEuZan3;Ca<YaFHY
%0uk^WA>?l"AUGTCq!^Z$I34CC4r2%3p`#.QE`alZ_lC6e50;oj9VHu4$O+SEl@f9T-ks0(,L%Vm7bf@U`N&L>BgQt?K>ip)r/J[W
%/kIWZ6_a'/Q9h872pj82_3L-8r/KTq./]'!0seB(,RT#7mJ$^u8/M!B4Cnr*(m9WgYtUjA0KDaY4EHs:afNA:>a;:$!Z6@*Nr(3b
%j\X&Cr.DtM7f86?nN\kkr(IM=I_]D`UE!u[%9H";nMbna!a-$&[m2!#p`#,7NVJtJPJr6Db8=WZ;AKO`.7nRD(e*RM(1ZJuhD"Ur
%!$T[eER3FK*&]DnJ$9=o-tO)!V!:W65=QR]2\on+7iIdK>T&$$)'fcn9.?2`M:optYbXp3Q9lhXNf[n9@A/dH7#ij?TCHFJF3i&m
%6=(.\UlWpD@^:K$Sf?VNr$.<dM9;"+A'YSC-49C_U)_L.Xom59m#C1rA6(f'=OQ:NLaA1`a3l5GIQZ>IfC<Ms:6M/I4_BO==/%6m
%k(^FHY&!Z^ItaoP`K+HsU\HMB=;HCIs7-\"[qu>gJ,.--q0W%+Ilre,HX>46-[r@(IMDhDT@Hs@*rk=DW1M<k./qCSCMWi2rl[N0
%oHWujNZnDan`B61)ui>F%4c)EKmWp3.Xl$t66YZ+]gBQ[(\5-\^?%3[59\5o(fZ8DntCu6i311T\,lTL-(re?K]72DP'V.Mh7RP#
%"ZH\:mAN;i)hBA^r`dG_-9eaFHtmsQ*jTXak2tU:eXYs/_2"OVaD4O(Cp<Y6UfM!4=.*65<?bQo0Q&lUS&r3Db?^AB'($<7pm]1D
%e=T"Vb&ZUF%5R7Ls,]c7X!3&T?UPd2PT8:4r+%cXUPn,?lbKq[;et\q^a<M1Y*u.GqBsW[k6"pI,hfhiT<_KuMu%YQ*01@`9Vcq;
%i'$XhO=)N_2;MW7a*&(q)CG:](fW@tq%'N)6#A1llSZM,W599ZI^j1G-T@&sE8XRX@*3*idGIL_Ua/PR&<%/Z-112PKsa0N:6'N^
%(1oLD)an\;KZaFG+Qn=E.',<C;eCQTneut8`XGp&E/eHLMJ:k8GSKa/l8K>,'^5\t6fe24<f=pnOH;DD0trsL<c__Ji-RbXYVA1@
%`,KRG79?/MMl*fFF;7`oe0KHsb>"si"Z_9m,Pd_;DI,l)^*\uNltB@nd?RhU15;j0Mb&&ZArN7QF%o)i/#'\=e,^@VBOT>>6lUiI
%bKLk?=G>omQQ4"ukIW8AUIQ(s#(m`:/eVMhPWT.,X<9#/F$?0gq09QkpbSA3@1hT&ZT#)`N/LLK;S!%N:+Ug6cH#3*@]2`GR9nP_
%$OEe,72BV&]"g?M'7r1uhjId?>UP12<VkcI:<N[&GiHM!b']-683B0QVV3Rjpd<;g(D.g\bK?dkL23'm8`OEdcur;abAkHiFAkk+
%AHkUjlpa[WV*sg_Y:?li+NE%Mo^[*\)UW]1b-b@+Gd46pM+rSa$KnfiH3d/7jJ-u8o/pbCWXoQ*KSgYFfMorrTo>i?-aYUmi5n^R
%Y-LNWC8;[uU"+jm]8g\;nKHKJ<f@RiD:b'd+@ej+NMl]NcR:[`MHMT5%[&sec_5T89TiDM>o>Jf<F!VrCcrOY(15lsq<tZQlrp]=
%ah2<`GYC8?+[S?VgT47l9;9ECa=/Pq%.XTmRV.4E4&Y*2@?_:Eit=FZ`Qef3Yg?S$eBC@6jKV<.#]5o)AWcm`WO$qk(\u6Q#Cd+I
%+t5t+5]oCn:Iqj^O@)+\H\.YD@0V4\3jJlc<965cO.mL?]e1[ud`BESVhT-naHN8<4oS-,6rT@N)fjem[CBV;(Gd\;0QIakI`/g8
%ZR9`(W"Z46Bjl)29X<XnMYa?&/2gdYjWm$peE'Y^/3Tmt9W9VgU/9s1@jH1WWVE8l<r(#c'!#Z28hg^$iR^pk1%gZ=W+pe#]+CPm
%d2oiI6L)LR+PW&u%KssSh@o4<eslnB.]SjaT(h$.`)(D:7["mLTV1&fo9:!H%Ug<16IZrIEb)-%'gW7-K\>s+CSVdrJO?5'A)E1)
%?nL\iQKmLCfqXisP=.sHTPd&`F4-C28Fsh'7oeZ,dQ]`S3Pg?<oJG>CKF)N3!ea+j,M`R8r60ND#9=c.59IXE=m/`J?oK8Cn=\Wl
%Nj5BtQa=sqeD;F$c"4#IK<^K,P=>oY6e"B-;ZVc>Er<kPW!SAT*+F,_NE#n_ld)r<^($QB<nJ$h[]iXQ`+mq5b9E2#.L1Geq-.!]
%_EnLtPC=O^pfSQO3e!6s@b-hY<JJ4b\DTlkNH@Ra_CUMQ3>hfc`&TCEg]WHC`fGW[`K=:2WPVKL`L1<OU@:Q;ThNb_U_uNg*RA@Y
%<Ru,B%Fk>?7P0Jd(]VZ'h<5QJKnW>=$K_)g?P(]pHX[o[AJ,q`\PIk=!HBCf/_]:#%Q`;TV6*U^NPR>iI$MIQYfIq`BH(J$[P'uj
%K<bbN-X`.GrO"2Q,nM`]P%4iJ?DYr.ll-lhRHhRY;iCd*k9pgmFqbmS++7hS0#Z-WdFUH3+9Qaphd^jt]@-Ki(*G7V&-sLm'BbW(
%aak6/g<G]kFAE<)rX_D#Lf6Kt,%8mSmf"T!#tZ-I%ascT3fh]><gMtDj5."bGFT=8'87jbTt7.'RSEEi[@G-46(D"HOodtqSO?DR
%#:$(5:a2;eppZJ!+g9oR?"b7G817;PQ?oHi9$g"+CYXF+j,$5M0k-=mFBtEA&Y]@@=/l[nGau-#cC!^L]+K$fCfb_Nk>rhsO5(DJ
%FbKq8[Z2Tr#W\#'MNVm?N&7&t/@)iDUXGZ$ToeM,(#;:E<01T3\SK(.6?XR9S]#mlJ$W0<pS:S8"\Egr/,!8.?k\,9A?<R,Ph>!8
%2D-/p1ojG-Ti;c$49>,g.NGjto`&GEk/u=)NmP+=g_Z%BAMI6&5j6$"Pin6[ZVIq?He)dKbHAtoS+meX"gK/:PanUYM_):F;V/JW
%(&th1WjI"97I[k-UOYp2l2kfBjias.=8<qe`p'.N!j(c6H,i/f/W`=;1GCj8Y%$8+\eV>]:?YeEnOt3b`.ZB]U;\,9FSp#T#T2eg
%r+t>R3b7nGl8rWi=jott[&'Bi`JmEIEP1rqVI@U@^dbVLdO>ZOic$<k=iie+oQ&`WiUFeIEHbYXnlg24P+UbS\[*&5WfbXTe&mW1
%PL(o*qq0pF%XB5dXtf>/qS9*`A9r!m<l.jOnM++Kil6RN["?!GXB4\"ibA=ET'_=#:?0+%1/EG\m5e2pf5R#Q^]3!LBAW/rV#q7[
%S+TNdUNTi@mserTV><cN3Xgr6HF*N"/>[Mb^;6/he-t^m8KBX?,.%C.UGA71gmB,/@%e2i_\>=h](B#%*N"9L4KUQCE<?VTX8N;S
%onLmKQQ)g@h6>RI!"%a/Z?hB87?.$jTKF-m/)7AUXJOK?A`-[OhYNPks!MIrcSs#pXeGTl"LXoUe\NT[&V(/*gqnYOqqWrCk(64%
%I+A]EkN-/f[Fo8bV[i"b9%<bRc_GC-BClIFp?r^JEIM)oQ,7-J^Jf$*EBj,2"*\%Ip<S?qK&`$kf,0F:)V2NX&31;-1h<(mXtq=(
%GL9Vol`-Q7iLeWCIZZU2<?K=Q;*P,0%sq_s<Phq='fF<Ej*#Eg12JAOIo]A1Q#`oDUT6Y'K4_`#XG$I8>O>6aLA!?($Iob?/.Alt
%]#G9T&(_3N8fP7F/Ol@29CV?)f&h.h'[l/\ZPi]-%:)`Rr*-;Q!5;8l03:cj&4h9P<1SaKS`WKKkV'fC?JKH$)J=%ur)F-)+Vh`f
%nW0?kiTGN%E<DG1ibA:&K-)`.b=12'(Gp&^-9'Bq]p\R:8n(bZCS7[M"VTH=T6/dqM[I=b\C1$UC5/icV*,MaUE`5PFa\:6m4t&#
%gnWO@85lY):SgQO<s$#"'6b(r_Ep'Vh>u%#3KQ?TUY2CeXUDW('3FL!GDbeG`t/>cN/fG(X!dkh?D$<-OF3H3GrPIuje6Z40Hg8c
%:9te?Z[XpF_(!uR,&$(A0DW./F[m9ST+D9TRK8'K"0(NFK""!<N7?eMdX,GbDfLj$`-GHK4!/8rF\S>D*U>"Lf9`:_b,'871O*!N
%#b8%nbeJc^is<d%pEh-o@GF@D_Mucb\MTD&m)F%RdPqbtob"4XdS5O+I737>##\I!Cmf;rCimTAclA^-(\?U"C3^fA%2d@=AcV7+
%A\28dNJ"c]0R&;gg^'2+-t>8Q*6X=O\T'/ZNoe9cgc1T=a)ZZW/2onB5*"_o&^.9]SQ;d2e5e)jqlIbl%"1ls;fT!-T:m8_RW\A\
%9l%.0q=$nBY(sP`&O@&5>DNT/:/>*Q5cMEre##l^oMGX=g>j-R*k9n).1Q!"7Q=IA2tDDiKAE.sddZkjZi&NuJ%&ae[5Wkt/adTW
%%i2DR]Ue)DpTYOuk)t)ZBE&lDL+ujeIf42YJ%4AAMk*JeUhN)`L@=M'BXN=j#-S82"<e.A\j,YUoA9;W>Obc#a6QCLOCfQC2",O4
%PoJKQ>O[Tj"BkW2;6P\]@F@ss'Xp`Vh13:9o/%kMqo)s!fepYFC.Z'U5&e&YXjmo9)7\(T>E%;gKJn=sElVOdp-qg%m4I/L;2XE&
%>f$6*2*e"nVLq_V6j5]_2;C:?BfAok(VPtLb%f8dLd5co5_F?SHl9lb"uH`(WDV)_1Kj!siSDS<I]GpmBU7E9eZ_2/FnNKga(q0g
%Xg!'d@Z>_N15E(eGHi,a^7?"-#;RKuG@6.EO$T9X-.i1n*DG%:g;,UDC2S"rdt7)ip+VJlLg/ZRZl8oL/,SKqWW(3aS4gE!>s;Kc
%B&ajaO;U%-pHP#e@BO:V_.VuB2+ed)Zn\d&PffQ5HNNla#`kTNS8L(P.[BPS=+=,top;V^5N7LM&8LPT.'HJh+;l]5^JoJAPg,pM
%,P7IDG6>rScs6>EE;^>P6l5ia4ed?Op\7;Ws#)F;HmJ]%P]lRtFk.u(qlM<L&WXlUPh,VE!p+0K&WYEjY9k+FDT#bnRNPsT2=Le.
%G^]3bd(%+3BNTE5CQH>7?2o(j4iI&aOm;8%mE?HflASQ<DJ40Ig-n.k10QWm55d9]*n4q5AO!9C-1Z\TAk';AF:#GBe+`<Rl.[09
%'&Zd^rGIg__t,Te!OO\&"n]M64Onm[r.1Qe#_VBr[@O)Bf=)O\h"qI8#a)s[ZBg[RV(R2G'-B_7YXJGeqX'`A$>S[;mr\2Md!)>&
%GBh?a]uKn,P&6a/=kD,CV(tH1.L^fd0LNfMh11l)]m?;o.l0@J1-b0!3Q1WMb!3_g&^"4/fC_^MfC)Y$!3s'u%4C,f&@POWiID2m
%Y"oB-)o\rUi2sRHQ#\Gb7^tB;7dTt>7BLD?q?&,bi[14#TW\aD)\?.%Q18-_"6jTUPc,KDBb=r9TW2,\<',M/T[b$$D3RF;L^j'+
%qF#<6m..=l.dPiKHq"u1gfibp_U5mX,0r-L/K<gIrpdC-_bKpcGULZ4RI?mjN8**Dif//Vgmc7KKA;;]Hmh'R7QTFF9kfT2UAU(T
%b4psO]nj;?<g6J<qDI,fE_V8d;"gX]!=F10]dP,UfXJ:*AX#N(RsS"%kUqqjU@b*s]GG.l(ZhOSF5+OV6eRAQ;LNt/_9R\hMk^7I
%HVsd2<LVo7=f!##FLj?#0OCTddoDjOog6!Ib2)HdU-4U#)!O*KGU3.QS@`\A0o4qdAG;'\*T-:/+)go&+3Nu"p'BomXipZ4.U'<+
%\R2LGYH3b/>PRtFV;fVlrkaG6F8q>g:5s:Bm-hZ/lHaTnL=>%*ir/E2f>bgVD62>AdH$8Zg/tQW:;&PPJK!j^Z!R;hr3`b3n!Wnh
%X0l/3CMV#fZ+"o6`pW<FC(JKl)f)iCenT\sYP*`f0=fXtJ.Z\D\F)P2LH^2eEB50>NjJ74qMitF*D`GW0o\X^%X1!o*l\q!qC&Q%
%\]m4ERUNV\o2_3)FN;r7]UNZWXjDAd?T,9UDSpBE"ojnI1]1O5#H9f<rB.g/C*5C9#2W`F3f6CNIh`p[]q0g;^:\3.GuaG+WbZDH
%7MrN(6Q"d&XV@@mCZSDGH7@JUp0\tWKJDh1>pFd2q"RRT6O+^.*LIEY$G"2Slj_7O<ZC^4Dl*.4.=e-<AZ%?$pY+Nm4^OnS3k':S
%_OW7ih<;S,TiY6?No1p2WJn4bCOq7]S_r7:[bFgf,PQ+oU^Sl%/NG6$K[CB_f\D"3?@+0ijIe#4Es!<bMq'4i\="o@_XMGR8\\9c
%(c9G'o4lo!V8<2hNTAuC<qMErk4m`qr=P3dQ4\>as+Zfp9(;HIhI"V+LRs@7&XC$cj=uY&QEj"o?51<^bjb0!ms+g*emra4rl_5M
%\c,5o!`sm]D0a&,A%^rNSMf;[qp(r+RdY/@D7o!m?Lo2@q;1ugms**$eFDM8?M"+W"/UeD1>6`@oKTDA>7QmHL6YC0TB3Ck(tP!=
%h1a&1/<nKGb<O/B9%[HfL8F!X1T9uj:6$QtE<LDW&QAoegOnYs7D-`k*(Gq*W#e?d_l+N/;>E!"QWe`WR&`.6ct<]7Q)gHaY0Z`0
%R-0Bh\j#/l$6V0i^[@&B+9eg^U=NDE:/<sRE)UH=HRr5cL?Bj0k^c.cJ&GsC_4g\G#N]RF3=k6N:iD=3q*)RlS%^taeS1V,h_H0S
%,J6Q1M:_Fb)Tq+,%\?-[?8m2^-W&$U>eNU]s#u;#-.Hhtmu117j-7qNATS$;L.iJA";.Pj7/hut8)oi]3+XpA)3%Qaj-7qNATZNf
%dh!+%V%3n,-@Qr4^AaqXf7"qqJlZSLSD71=:c(@p4NdSgjSITF%5<^X`9F$jZ<T`a"pA6[JM^9a7[l\q=QrUR+3C2u5(>CU-%6`B
%>B#'5ck5l)VqUTmU@J&"`-$I\`#l&e.cpAA;!t=.s"lV&8)<2iN$9,;>3G[DM0hS,D-\nO8fDU5P)3%BPVKm_ibpc9&*4S(d2Vu;
%1Q6P=n;iRhrD:Ys)jp&K/<,YLA\.om)jp'/>`N`0\j$7:c.eS2l/I&rr]7cA.7rRWGl,qa\q,2IbkscY%:&4hrWr2VXl%C;F*cOI
%n+0kZ+fA&*kWfm0$qhf\\\ES`7&cM-NQE$r9,/&.)pg;.rQ$4[iTE21\aE/%9,0-cPk2AEbh]GtNC2$=+='=.T)7\:WW(6=f&'\h
%43%re3't5L0gE;Vbo'#bpMS]D,II=gTm7.k65q3[is9KATfnd*)+S@iH\?P`%Wc<*7Q7`SdE./3lM<=.T5nY5K:1:=W=_*qT:!I7
%HU5,28B?e7pL*;M=sAFPa;qog*b2j3r[6h_rlQ1;`YT>Kp4B$fB"^6MQXFEYB58B[lVm?SY?G\mLDZHl?Ik24>b?oDKgRXD5q=KC
%_sa/#<p\psN:.](h`!C+DeNOOIF)]"F=Ju*m^&h/bmYGCdq2Em#F4\&H'F(Bj%?eD>VD*kf!sPfd#WWkqX4pq7l_JHI4nI.>s(>"
%=,,@->c[<lku"U_.G.pu\7*V\*I6=DW*Q%(>,Sq6lKcJ%j#5'G>u\08gR/:l@W`OL2G1Y:^A6hNkLf4gbpS#/K#3VKdWR=mZ\.:+
%WH`Ha)nm@g[*Tj^ae'A"+A%&LZnV2N'd$G&TMFbXGO19:e7!aSd;"HAQTFh<s+kMFg4S,Q1/_k)ESJYbage0A0;BfO(:Urp*rg5`
%CP^!Xgc1`AYPh^YUiANkE9"J@Sg>Ii3&a10`o5]4S/[6)j)AlUcAf`PEB&/hiS4\Pcf8t^']IjB2MSi"Id[.XbhoTo7XQohL)]*S
%ENR.bURUe]''!aRmf0[-6R[M35<6>7C1)FAiI/9ZUQ=+Y<9j.-6?e2gX4@20`(Mm^OU?Qdj3gLF-seI&(fYDV`H(k=dRY%)!pAk[
%a0:=47f0dks$8.GZ*f(gZj:OB2^UK`G5FL=8\;C[mG6XqF/'03&;m,LG<FsS6ll2Bq<6_#prJfde\dloUknL6`d)l5oY!J"(AoX`
%42^-_bn9(T,G_J<:KRXNL:_qUKL`3[X9R"H^9`IKA%F,G6[k(DaH3"0aC!.P:'V3Y>bcdQmYt0^&*86p(a>=dq7A!X>1][PeS1TZ
%`GdfB7];N7G[6rEMU5K6rI!apZ@C.iH3HYpG1WWf9U]5"7LmXjP/p:pNP2llH#r^c,EA>*5KT>J([p4/38WG]]M81)pZNmSfD]X:
%CZ-tEB7uK113-lkk\kHtjOi?[TBJ%J2g(#WNYMK1;secqd<P9UPD>Xor];rfHp@E/;$2=!L;"fF_<A4L2cBbo]lm1")mr1+"CcES
%)L@sL]c.m6)pp?AUddqnc"*f?kBJAg-":qR7PSSBgZR++UfVSrNT4A[*(NfMmFfH?o(U25nUB]_gTlg6UuAauj!\JQC`>%VI;Oo<
%5i-05Ib3M+*LSuFr&7tX]5Okj*+.[rYcdI53';\ZF8nbD=F>KJOWa,/hD4u$?A24T2n&j%C#G,mql\)BrM]M_Pk[;He*=9#i(qh\
%G@?_RVSWY%+gaL,'E;A2.>!M=>)Du*W/6:Pai=KGhY0Nc8E2ceroiUQo2*cShJ%<!pKoY[n.>#T=;YHTED)Wl4J5,1,R%i&_&m\h
%n.:f_%fG\J><0>heND\spK'E)W_.LaYDp472)bS\=s)k\8UldgIJl6u3jmu(4e>_B-*u=AaXAah9ljHjk2C:T&gK9NZtTTH>L;=W
%AF!_K]6?T-EDp'+@>W\&=Np3*R-F?IR10KlnSmMS1T7]Vn+Gf>fC2#^!@<G?o:[_#gg*H3:4;c"1X<9j+A'27a`H3,$h*#0e2[+U
%hBR>J)WK)tO*E`)R`NQN.X.VVDp808ndZrB6+mA7Ut"2Z4-16M#OiM)d1UGWmm0"7f1Tc$@$Kf$r"::F7(re<._DBia(r(\oJ.\D
%fa'XqY1IgtF1P%W6,6R>ZZ8cgo&'I`2s?[McZUfZpq9%2^i;!W:VtUrZdUs2D$@?*/8V2,RO(f$K-$obBeH>`b%L(YMP:@KH=[\;
%GDbQb4C4OPAHY=b6kZ%p+KYlt83nm;B5,,NDUAEP7fS_QIR!fq5Kbt>qtN4((<G%l>5b'3I7(Q6q$?O&JG&mMijoT99X;-7Xu7b<
%<(K[Li%MXM&-$tm+Cl"3AK9S`1cGR[>g%.=r*Xi2B#=l*oIU^ul)&7K#gj+;G's-o>CPjC(7UH@"lK9sDm/*J2h:i/lq)&j5(;'\
%V>nEM4ga\)EsWDRUFmt7W]^1"+GJ=]4PL;p@CmO8EP!ShNGJ?mTbB;tmLqI\"u,i1CV")h!nWj$HdG*[h5#06i#\'OmMBn#q;B$f
%fe((UeJOpWfBWn&-8_/.YffFUOW2FMVuq@Us0I#LY@(</:K8'6csAj@V"=7gV]+.?q4J1[13L5X!@Ub=25/j'NbqQb/ae<Y,rN"J
%2Y#jH]DMaTfQ-5$1H]NXrS*W>OnC<<L]1,En;Q=:b`'.3oHLnEkYs#ETgNJp0S--rL3+VjQ;l4IT@AL*.2?3h20Bo3^01i\&u'Re
%l#_6_$>P+W2Za70;lt)J;i0-+XruU)7DQU&)WaYO#e/;ueD&f]=+f(XJ6ATri7RBK(0&F.!AbaQG9\N$"E57K9P$<QH>5*HJJBU5
%$@<p6)bd9@+')\PD.)C9]bj^FGI4<!XPT^/TGf^Inqj[;o)m5-@b6tB$2WQop^!W&9W`NmQ#\HM_+^n:KWP9OMj8;b"qfD>^SrPN
%BYARh'h>59J68_"It:Ko#Y(QQ-Lks3#Dcg%R5tX(!H%6G$Mel?DnCA']8AKh\dFok_GpJ(fPKJVCNYUu$<i#(UO^,D!7L8,WQjp&
%=HS60pcZ`m):apW4r2Ah+$m5lK0IZ&RQ;MN;T6!:8uLq]U$h:uiNiR/lUTH&.mRf9"h5Wap)e4*[MpBMnCH$K_>);Lf363KG-0kW
%T'k*J?XNQ]_\+2>o)YR4L8;--Bsm9W]:q+W[@a6)1!0+oDnWkDU0+B20>`8P,o!H2CP*:[^O:&HHN/V\#b!FggI0.K,#?>q=UmVe
%o@jROdJU\PpkPif5<pY-5=3-<MRP(sikmP16kQV5:g3&.&_>p(e_i`.;(OLI)-&HC2l(;hbk9JjCQFpk3.63R'f25W;:G1+s$G&I
%N:tck_WW<8kPmls8\GRn+GTeUc19QG`D@k^)\I@^1&MIr]63tr+/A_9A#Os]qerD0crpn55m[V:HYR^#?p7^+l*oQ$])R,t8&6dV
%F=H*k:iE;s5$L3UYLH@"b$N`a<*F:=:NoLYN:Je\kElWl5D%I8S82&$9?-LNUYb,@.I*a&MP"iiV+KO/F]=r2)H;-4'ap`M/Nd4T
%[llQ^K4VLA!l+YUpbS4o-nj\Zp,`^W8@;>cphk`6Nm((#VF+-J.:7&d4,qa%:cmtGB45PahWQf!BO+F$b$<Oaphr7%<[n2@AP?]Y
%;i)s,Xfuph,qURXRbA-Roh%_GZl2PoXGqQi)aP-U7S0..bGA/g*WXs!%'O='2e>7.0To`oJ[CZ-<#I_-J189%MU[At\et[6Nbt8/
%n"P+e(,7Ug3pfD74bt+A&AP/0,[6&hB?b`Z1';NQd2kj;8M#]#RoRVN1]JqM.RY^`&t=%o&YK2DMY1R1/6st2;N'<&G4N24o^D(C
%&_*O;WldRg0">-b2luA#c-u0^['cV#/NF(o3N!X&?+!e;>uY"p9G,.)G-&309,k9s'J@k1Y0Na0#=$)-:8M66^f2,_DfnjqmU_[^
%>0n*->F%kr>srKf?T;)Nf5,BbL<>cg<@dKI',]4^9mRT3;aQY`V9u[h!Y*ogLPc^h4B-#+rd=[:)CLMOQYWGs%#Si&##.+,L@#C!
%NH\\XG,HEW]la-OAIk6kl;l9Ek[#aLWiVSs#DtP`!h4=s"jjCWkFLm0/LX]3=$_-A!iWth%I(nWgi4qO%V/f^L;'TPXXhGps*.qZ
%Y2STb[TtSX)n"/kd"2UbatTRk(?6f*3@osc%"e]*6eK>N5):5\IPpi91K?,NX^C&cc3Yoi6G:t,6OP61cPUgiC8LD?WO[_3"")i_
%NCp$7$ha0>qANaUE^>=@NcO1lc5`?ABs:O/J^2/4M-&S5J1"B2V>`IcCT1A("79&a94=<r*&MZYWDaYo<7&L;]Q"'NLhpuVosR9u
%_s\Am9/QRQhFTRS:_h3"a>aeNguqm;Y,*8\UO"ACS0ocL3,5)jdZA4qZ(YWo.YFWs9*M:e_"E/NjUW8h9"E#\6OPiV!5]\_I+Tp@
%e`+TYB@.e07gH9$T>h/%>H(Bb!]QKW'Yh@t#Rh[SBXubH2\b/Fa+2:[5WN8^>6d:P>TVOQXL3IV3,qq=p7l[$)Y.))RsO&uHE>MM
%>bV/!Mk)"U[hJRgSk\[_K3ATJo+5#S'[b\=KbAa(4Y$)0jR.S[71?:78[J%B3d?eD[0P=M\#MV[a*lP9SUS/'DiQ5&lW#Xos4!MS
%HUI'4ZEB)P&?G<K&f<c&^<6:j<'f&I:[10=>fF`8R/<GSim<2C4hjr@$d[Kd<[=h4/kKPr$'df"YU9Zt]:\(Yp3J0*Z2.MXWn6Na
%;"!Kh@+F6sN-<jkm.]nWCYUP9h2b]YcW@[ff+ZSc95XA[YugUF$1WRajON%s*n!D:daD61Mp;)id,#1[L<TbAb#%T/rS[W[$+nTg
%*a8X"V,V7!2X>&.E:R8OmW@-DN=rTt4tVOa<N*'0e8RF-@62/VrXaa@dMoS<\.RO:]ACoSY,A8lUij23`QUikX[st2<NfjuZ!OD_
%`@ccRJMA:hC+pG=k[FgOc>1&hECT8om9u`F0PUi45^JV2r`f=HK*V_LriQQnP?ANSREkYSh,q+.;/VnS\\.,^k#dYB$n@NnSMtM7
%[aO]=#(s(c68(`r+jS?::A_bh8IY0$;Qo@5)"I7>A:PbSUQItU-Arp=m.`!(C8A-Sr<JT\>TQhW=.0#Y3t<8^ecVUj;eW9Sn)Zo<
%]GR7NAco/Gp13/29%E8eJg.R[/;\GT;I=@Z>`pBlno>*&QDO-sc:.8V:FQ>.ibDW=E-=ITZ/OA]OQ-u@$D0qgdq]tRpXSPKqYeQo
%R:"`pkq<j)WTLP;rR7mj9lkSASSfK_l"TJFhM\5$(N$olf_Y6`gNh[:02/Qf2LbW$PtoYSc)9$3O!iB?R9('KXClISmJMikTUW=Y
%UA8CgLC]H7q"5cqIQjgJLT*6%CVj:_I1`V<7apO&^j^:uq>2^jGl3rCY'hm>]Y^kqoQA^VQCm3h*A2a/Tt#b_MtAmm]eLJq@:fQ[
%J"$%R^R`6>fk:*Q!4l<_SB3sG06:61@W-\[@bZQ3:U[P)>-?XA=N%CrWh%K&/[XHRJkf)L\ZklM^V7[j$Ys*N^<b_m!.Ob;Wc<L9
%Up!IO&%FWC2(h_HSUQ%]bPC'QcIYf$[#)ZKHmbC<2kSEaX,@@tfn8aqWP[BSS,rPZq7LnAB^'%+o^U,(r9KC=Kt'VM1nf15JbeYC
%qV9/1Qs3&ZdDmR#l_2&eldp7=;=fM%]IKO6#7Kub(i/Aie]%.Fb.J]-W/c@@TQ(7pSr+\]]D00,jlrNeE+a1mGs-XN5cbIb=$Z'2
%f3\N,;3ln`Q>hY'NoA+"?Au*]6F6N#s1)ckg<SpJX7&:>AbSgCVcVIc-S<2K-?JnZbC"d#in<%-rS?9*l6kc\lGZZcac#WVbH$Lg
%`QdhD]OAtj$VJkahm:l0=f:brYd*4JYD\1Ho!=ZUo4qR"qMXggMsgMsAmsFK+*EIUIP"m=HC^X7BfB>6V:quHm/E1b[9WO/KU_Gd
%lDKmUKV$NG[1B0heJCm5h_#[OT?^YYoqVMp$_OQ_NRl:D[1hq!-i<c=j=-&N\,"PXs38U^7VUm;1q-Y6;))-&p=+rb0"+O"CpUXF
%cX6I>EM?.>Gm/V7f!G7Eo_JFMRW5p1eXHs<063+LZJIo[,(I2naipr+D67mjX;K>l,g=$OPI(*PH?-8m9i%![IS6U17huAK1RCj$
%J(7"^-cCP[c@)9TcYgMpSt90Wk=F6NFJ4MX]ec;NgLO`imV0G+UP6kgMq76_LQ<3IaOAW&M<W>Zl,b=KmIVW5rZjYg_CV:-[U\>K
%GeBiSVe;T&5,MuEp?UtRf?9TSr0rPnoTR0GLZsLgCZ!R.PD.]^i`Z([>-%)*8a@re9Uh757qo=$ek+WF:LBrh-^.ocY(#/"HS;hO
%ZsU%DVO-/:^SI3SFIjiXD#24IYH5Cj8O#FeG*[SSe*#2\969oNmc3AJH>U7h-sbL(rZ_;]WpqOOZ.#(6^L$,7e!n2'EI.NXr+p\'
%g=]$33Q[T9q\ra?qQ9JZD>LL.D'Jq]ra[VZiV;(dG4XtS>;uNB:$#=Ml[f![I<)j,T.[fm4A)63<]8Fioq7kiR+>T@X%VorVs?F4
%p%8"<dJ%b[M=GU1]b,?5-6'!i'@X"Gdh=P#n(pg`kFQH&$a$D3'A?Kk4CRMZ<Tn&3rjMH6_V9N%1U4Slq_YSK3-[LSUA=fc7.,G@
%J"lGo[5G5ZH)!."q<@"d`(k$iRb4[RWD1$B+!++gf:\g5fuh7OnUC=ZihQoeT.Y%!'BQ^M5]sC&H(qS0D.#<ia)@NjM>cS3a_C):
%q;cAfjCiRBhg%5]S+"$^HeP!^oVt2mo'+cfe&`DQh`a`r[pSMr^>.<IPFG&YcR*j#]s/mp^-,\fHp9XgGk/2uR$\;*KB?]h[U5U'
%B"\*Ih+ZDnEp&Xgl0R)uM4Nh-NugO-SNWGAZ@;dD>CQP<Oe$r*IH5l=rr-TmFX-i5Qe*<DH>-t-*c9.DfoPiu[%9EAat0YZqQtLW
%q^>R8r:oJtlh1(KMm'8.UIKSn1R2;74G.OKVVc6/:<du(J""fpKA)R=cH]3Kh4@r@>1HCBVq02OS54"8IPs9qmq,m"]q8uQS,-$n
%pc_^S<d(@S*Iln9C7H'?e*0b<9g???]p[/><u]VS40^o][&\\HISnD95W@0XcJe*RX`kShl%A4Jc_`q>=[/;a['DQ;(>9k.C\aaL
%FD#%Ukj`c\B]8JJ\G5KsFndugGkoVTVoPjAldk*USc.!sh+oQI+!6b\)NVXTcF4je3q)5R=#W'u+1En04@a8`Gi`(S-?JIeRrNgg
%C$+)-Y<B3m=FN38"Zg\dTXI'JoBB1MS12-dCsH!\2.rf"qKcWEnS20r?-LR^cFTL7/$mR:ZneuRht*u'h98<%p>)e)dHoJ2qXnZM
%jT)o\rEf$\\Z,N$q74`Aa2p@)F8l'lo9\%Ige7693;7$r*mD=$LL92Z"oU9%;?$K5Y$F9k3'TKOp3GNalGrM>0.0NWo3\oSq<]R*
%b5BZ<]B4Jpd@-O([cM)_gCnodFRs&*G]NJ6;:sNMnoUT)n]=t8:k#]KCe[*=s*<4D;Z(:44fP#X*%ak6%PAM4VH2gqgnf_k6?`8'
%dDG4lBmnsera[X/rH,ESE08g8?g+#.cnb3n+1F#NoLUA#ik0iuA6pA'*+]U=T0CC#YM[(<<*n*)M\E;<Vi(q0HRF_XC!p>3F^BN"
%gf\B]M]^fiqQ^CdBJ4hlrGnXWb[d>\k1ducmC=5OZrcYN8aZ!uJ#&XJ0l=#s*U?WC1RlaNY&DW=lHf0:ch38_gX>!1>sgj(F*51i
%EqdqJqHhGc`j<_W`_(Z]@_C!7H#L?bbH)YZE8NOeDb`JSBCl!Xe$3N"RQ:92>BAD%I:[m$+2'ACD4Z%(`6jSLh,oU&gq<=HWB4t1
%H9XW&]pjAu[_hd">#rgoe?\6jk1[7njA+@n\_NGJG&_0G/hWZ.p@fqUXtr#GqV:W5Y:lH`lJfO!Yd],KS5a)Mc?K<eZoe$(Ea4+&
%<'Ui#roNf7pMe*]E(eIPSD,NeZ.[hknt*RCg$i>2<\<dXb4;uBIf88q5IpC&n;Zr1Y.m#Gf^Re"SNle^L6#a)HV^7bc'@2$=^!:K
%Ud9Dl?XJ+$Si;tX#LDtfc17X]Q27eO>;%Pjo8d,!#Pl]8bGCt8O-eUPG4\b'RC&U#aF,R'h*!E/4:Sr!ZVS?.Ie`bUiVEB+Z^&)L
%m'H*;]_LjgnBpQ7NE<R!nmq]AF6-R(jR^Ofla`"?it#?B!\97NA,?#<6LNk/b'*CJo:<n`mdm+@,lbO1#lGKs46qeXZEF#u`W"(\
%qF.B0dE&3"I(m[j_8gS>Xn;TDHZXFQRf2q>3+%+3o]"W*s/&_#IGN8=X'\oZ-W_83i]M=HbA>Lm\ZE'HP1soa?fb$YedqA5hK;G9
%GA"OQJ$kK^j?F`WBCh+d>Pi2odjsOf<GubumHpfnG-*l.I:%5HoW;+q?9IrigYp-+_T>Qb[@U]nIC=#HG[K#\B",%7p!6RUXnD/S
%Zd"i*s#Tm0^Y?DGq<iWIj^iS;EjkN!i:Y5^G'<T6`nQQngr;:&^%lEO@r/n`#q+nCm2qjJIW^)VY.U@Zq:L#lm),1-f+<c5TKLEb
%bo*_\Ie26tJL;<opE+&22U;muIbU=Adt_-Xjji/;_:u9#okeh3]fkhUSSr/3[?''4p>kpjp$&CP:1gQ2]T`Ai)*8of3_sq5Y?a9I
%29pirh2UTi3kNH"0C:^_c_m<m?D0RQB#gO3Jo9G8c9&@Z1Q/m!hK/:X]6EHj52WDY^O<N)(f%j%?XMSMg&J?6gGh`"I%!:h%\>mJ
%fNjs!3B1fHT"LUE*_sFTrV1^'m>(WVDr*A_Q7ia80@0:.Xn.g[_pdkXDb%.7q\F9pPW_*VHh>.DRQ,&RY,o<X?@MnIDJ+E1q;'`C
%<q6.df159+r9(O:mlu:Y]FX8"I/7:9I.R/hK-s=b&(S)@c&_^8C[U4uoBaZ@d[-/_:UAB)ktejhnqU#5:)YXTe"8GFd*:b8mA6#m
%Dr9o"I]ablgb2^d9RbYdIlRC)G3@^'BAU@.45Q@Ph;dM,oD,Srejeh<Y,5QRrUR4!$m'8UHjZI[3'7O3]\)$N3ZG\L:6tWtG>A]A
%LV"qY\Wa_$\(s6$DMn<CrF<,3H6Xgu:X6\>hA!A0WI">Z2RHe)G.@G9_eN;q/ao7!0>A<!GE1O&:+o@LQtN:)DOg+\:EQ37[-Hms
%o1a)tI!;iAG[@po2Ts[Lg#_do[n@gd[I$\19YWU"`Jng5TB<33)J:#80)Xs+l/FChFY?qU)F<KLg)I6d^8$J6M0IL8lAMS;e`msG
%n>c2,`d_5tH`V^s'c48jod=XS?%;Oq4K>$GX?:>:g<O5=GQ7GRUHY<!"l4S#^96,GO#DTHB%kI^bnleoLX"j>GJ,jqFmB"a8t7cK
%,-oJBhRI)!NdDY(cJe"g*S9Y<>N$IN\[2U9]3HRoT3lRNE4Ba[2ouU/gW7k`Xa\qE.T*;A8]s@*>R;:t7]@W=D6:MEe^VTBcI%'\
%=YLHnB+p]AC8Sg@mb2C*<="qLj"1C8\(*#e>8]V627QmfX4@+78>&;ISQbR[CF?oT>5qPN&6+Y`jI')6BXBN0jkSrtNL\SRR8QIf
%8&%)T>&9K[FT#M-a05`nq_/4.X+b0emciuF$jTJ9FG0=e[Yj`]Rnd8^/;/,R3[_%YUX_?)?=\r<^,m'kV0\8IEXZ^I6s6)I=f@$%
%jl>mAbYRF6(D:LlX'Z&E8tAeaXIm/Pa:rE<H,,+PQ/\WGNnpPsc*KqVqA/?D#K9;6(#ga%1`FUID3l60)ce:ZO&S@5WHB8H_IhG]
%Rtu@%C[Ls*q@KpM&X)"ieDhBINZXKW-lpnuY/J)ebF*a&>-<G=55CVh2dna)Hfu-EWURsUHa^-;HBfIY)6r_-mtd'Q_m$Mkm7Q:3
%MrheoDYNNW?#WV8_0hd)S%ng%"&X,>guVI!4j>gI_fMXS(27'WN>ENB=sZ-W\#TN^2I>+[g&hpb!f0B/;Cb+BIF>MRZ,bo,X=HR]
%RY=*c*+O!Ma<iV/ZpM=DU,>'(Q$=HpLsk+4p<^pkH?p3B/aTkMM[G)Mike7<N#RGk0QIf.PFPU(@c&2slKF`KSg6Gi(&t*X-^r1p
%/q_=+8m+12UGmjJ-t@Id2+FTZD+N@.me3*Lok#)scp<KIS1;q#Xrt!nHBY2UX!G:,Y"2jKi8'!57g"Z.)C;a]Pq*An>UmsWW^m#6
%/+,01"rV#jP8:<Z2j4\Wj]"D#hPd`A!Hif<7>.N^$[lgpQQ7o.iq:q>/'oG0X?Wk(IhQW:5Z=c_XpP^a/5O4[g4#X&]Ek?9rHZdd
%D8[admIO/be`S]Z*%Zn?A!+6EoqigMN6a+ZTjBI?0Q4<p4NNSDG1-#DdVu*jOBbfR)?1sVqc0/A#$^(8cTcZ;-b3[GWoD:(9^l$r
%JSYbR5'%FfBV*djI9hAjS'(a1j>MRj/?Ne(E8s;4@bV**1g)s%*JLQ9*JO$L*4ae<h@*#T:K'Q],kg>A1I1>[lLaCO5Tgu=g$`%$
%hK(>BE_h;HMG)GWYuJ0RjO!FsX1#&T2a$/?'4jpTU>/CXU.d>$E>a@<K:+tFpZ"Q&2X^C0`,VV;e4Dsm4pR:JO1R*IdAZK9(R1E-
%`&=fT+Sk6r&>j?%%.5ifS3OaIHsMtUg4rf0b,lmiT&%Lh.f1BXjtONulZ.SK\KS0BC:5S(g^Q&@s&C\-UKr%jhjuI'kJQ2[T@+0%
%79B;]CkQ\tr:`E3<#T-6]31n>(Z9Je;;Sc$q:&<"9-6N8T#KD<'Rq(h<^B-7nNoFN)=ZHHLd\]!k75A&0+Yu?!U.1A'arHf9l>!8
%+%@@5ZdYMqF9?-,o$S.i]H,MI'(7>9pa4)+rcuirQ^1s0J6'Oa,0lOEg8Os8@HhMPC4'_E=)Yt*5VZGGd^m]mQ"B\t@WkpJ9DX1e
%=iR&UGe1*QC,A<hm(FgG*9$?9pJMHi#Ia@Zd]1"741ZoWkY&."XjWB#f,K>-ojN"i&%`0eeB2IehfJqTldm0rTfmDaCf2ac>L0ff
%4oL-.b\eHQbrWLHl(<!\"M`g/QoD%A7p<9Ho'Q_,T\A]$32sVQnpcXa=%:YDbGC\)/_>#:\kU[o22;o^`\Vbd7B#Wg-A41Rg)SS_
%\@uRQ(3IU=(nPZ>k&O-Gj#WWe:ci/+^6s"8-Y$>7M'+V7RuRXp(I4"A+=!YlSt@KA>q]^A\qNrdkRAQuH5TMfZ(UJqFSI#@n*(=6
%*'i<Q;E:iEB:qbM$Yl,aSbUR%mr3?:AO:GROPi+JK:_TqS[nutn!X;B=8,rJB4LuSK;gPAdfY\sYrp3<OD@0afI[m2?,6Zg!KK1+
%%Nd7]J=Eeqa/*Y_PO&&__Za?\).cGcW!aI;@(h@'f>5&$Omt$D+V6Jc*,r$=B6siH$[aZ[m+4*NfIHr<LMQ/m6h>G0Z=CKfpBp:A
%[4iMZkEq4"mgqu@jJ^0gcqV#O$uW5/_3mRq_B24$=')^sYiL0(7*%"aE3=8QbA:>:L_%EU(_U4D<NnbFXVaTVn4<NYU3iJ>%9EZn
%%1mS0CPLc>iArN)3")++0JFPfd*RTl^d16-PoQS<!;/+%O7E>lFBiPjR&^%:L]Mns%-AZTa]4=ZAc&(W[-bG(c9O2m6pjKfW66=4
%"9_+u_t%&elC)-Z6.<.kQ:]E/\?;S5_=]Y0j/Nkg2cF@fDP3Z=;^%r7k(,'Z#R8K^_\^"t1e_@RRO0i5E5e%uCu6TGOG-\O)e@*W
%*4@sB+TOR;Bi@#nj4S7d6_%1:Rn6'U@d(+tn+mBQ-bX+t!pNa0<L@1&mNi4W4EEZ:SV+6i6+1AD!b%TEU9<P@"EcMl:E9(Z:TRUT
%PKt_sZ%rTl'Br'9+Ze$rp^-?@UdKOaVGRK,dqk@mM!\>S*'h=pUB'SIX<.K.pfQ.nBY#U)&]P+(4Aj2-FJ68WC($m!qk13m28^!B
%",_VU"be6F[_Xg%4'tUSD&=lS0&*gfAoLJ<\:?o>\1HNu'UQ"#(GJcQH*Q@\+ngRQEa>/[m('8q>b9I8!-J`*4`/LZC7:NAF4f#G
%F)*>Y1p(mj<eZifFg<5[f=N.3/\u0p:ZZj?(mZVJ,]mq1%^C"q_ut0FU;fVFnsL.6#V=uHXpJZS\rIHI\0Ft_`gRQOgh'!ViQST0
%;UI>*Aheu'5[A=)U9:7!:A?A.+DeX*S8]K9J3Xi<((2sM,>=&QQ3.?;d;3+P%#6+Y!8JS<7BR,n*)!;KRm'1s*Te%nVm-g9A\`@,
%Vh-GcZO^Oi#/FcE"/9]nN\*^m([AibKmN4h``'mcHq,)+TYofA[UTS+ib5&Hb9neEm+,FhYA&6Dams^6^jg<GQdh@S,K3U$-Yn3G
%E-^[1hZ!76D`Nor]@ib)b\ZS#Ommhj131!h#NUH-oZ7aIVOBO[7X=Pu(`\4Fn9^fg*=lC!RtcZ0$0h^*Hm=D4*_HS$*tLi$L&or"
%gRt_^!nnG<!`84bM?NK@%j8[u;$eJ4d7c=Ra;@bH.0P3&pUDr&BFr6@\LQ;bN>7#",#$"rUuB2%+EV-G:tLgnnrZ,!<HOO#Qu^\.
%Pk3#8!W>')8KPGd"sOK(#NG/m[lt7[A`?B"h80ldEhJss'I>$AdL\RgC7Yf\79Y+D,>=1=SL#,@@ZqH1"b"B-FI;1Cg`5QtA2/=h
%/p@\4`juqY)V]ZJ9sK]QRHQ!n9SK6=F-d+)Y.Yq<"R'4T"P?P:1l(I5"@S(-19WtukT7&7VM1s_TIphNAlq5s"i$<B('&&,G@BHd
%q8>W9(gs$J:,Q)V%^Q4&"_1H>VC[MV_U=j)RO(A>"/Ek9FnBWhL:SF0(]]sXfF5&Khd[3gSD_+-*"dkX,i^:hEgXopO]6WTm0I_A
%('G(HW0g[6.W:rQ'GDT(VG:kEh#efS\j<tr?#Nl+'GsUn;8@J<(bCr,W!\a:74/RXY!Zq8B;I5^"%#/+=p4h-SkfMU`-_d"'U.I.
%FsDf\b,V%'P<hMQ`-imr1fG'1;1"D.'GkjgZfi#8U;@)1:DOmHeiZIR[4PTr&dX&5?911dcpP`J"D>9EOeG+>g%%;*8UT8/HHt#;
%chX4fFZCFrLAgtc\L*CAP!sKolI`g!B\DU1"3@fn!oqdL*<@oiWJ54jf(CRg9OOA^gmScsE0YfO@(n5Rd?68=kh1!J4!ppH0PJ&V
%#R+XN3`AZP(b-0SLm[NIjClGIJV[&K7bK[/2pNjHnD/-,I,j:?TMF(G3$JC%j`*;u,X$&h[geW;?YEl<g`d"hW+-bYe.YI&Fd#uO
%W@V!r#gF$p*QThk"6#acC(V=lZ\`]ZTu]q:'j,,<@%+#/,E.:+NU62f6@kC8MF;M+-H9O;&&W(N1.%-#5'^I::o!iEHJT?afJj1o
%>G`o3d!R5#U$l/Ok5_&hHQ[L?K\jKMfL%;]MBBpDYa/,2i!)Id;#H'MBdA.@"<@LuH0?r21pq"GkZeoMhj2KP<nh6Zi9B<eP/bj"
%8ZU+C;HRfl;p;0l6Sj!=2,3]LcA+&QOD0o+UGk`_J;K;'0a6KG)l_#uHL'Dua;/GtUsf<^'h86Mab&0\-]cnF7i5m6X[AcD$]q&J
%e-#>q&g6Eo5_[o99XQJ5*&>G4!Rl#U6$NUZ!GVu_6T3F%2C^$d3$%s?cA1$hs,oSIjiD%!e:pgW%ZCDo3&o0!S=qda$k(l\(*s5r
%4e$Pq!Kq5+\*2]fUuDDd#b[hC"E?KcIt1d[ITV7D1gf;V"4Tg;"DTK_4/>s*dmiGO)(Ai-$J?("`25!BZ<Ge7:M:[q.>H,'\m#FA
%d;sS4_%.@#63U.#KNQ\GV>qPUf%VO_28Do7d"KOH*4]!Al`b1,KrA;t>JiFWjB"^P&7`sX,<O!FJRHkZDUJDk5)?3*kb*p9%##8/
%<hRAL`tD^1Kk(ifQVN;gh-Q';9q`FiCO!ca&)q,n(,Sg+e[:*L*-j9+=>5D@%GK&L?:45L1\\_OZ@mQg=#JBS)Nt,.gMH":%igru
%M]=$N5BPj=q[KiO!&>SBX+eE.9.1]("PFd4RlGJ+SO"kOB4-fR*"djEc2sZ!j)SGG,OkktAYJ>jOK\3@^lVe</+gJkZ8_hAd.SRf
%hjhY.h%_n2XNPR+5Vl*:`h")C,Mbe,!gE_E4;C8,8_g(?Vp3B"_H`j4#.@:pNWDK4Oto;;'HoNU/DM.!SqJ)+!Ce2@J2DF(!,?d)
%(R/iHLuE)2gb`IGYe?tZ6tucoc5DKG&V)I,P<n2=lCniCA<*2)VFMsLoT,#4&EIl]&,HOL81F\H'qg&03t:JlV!uPm6]-0iF:.+=
%Qtmc-,7>/D3eM6CjC&%'F52dP$hFN%!`g1:rF,hr5XHYO?0FBRlHuOsG>ujG/MZQ7D!0@X:8Xb/ZV752dt>(Z1nfssN^SD#[90RP
%9\ghnQ:o%;pm2mO#nXM3po!)K/1OgU)bhdk5G_+[f$g'>UBb(GF]k'[j_3LVT%O\%$LMO(R-V(MrZaj?)KKq9gPaSef*1n8eL4KI
%):`Z20XKi_3J?ro.L=);&Q@'GcuF]+&"6Va=OSE]J_OXs@s6(9V6no"\4>9tFd4,fI@]UWD<<%RLmB=rJB^_0VG-m?k_<360c+s@
%=Z_NY#//`h4+t#J4_^L$0a8<'Xt@]C68gllCNdW)#?Aiga2'^rO^j0$grI28;o%JbUZo]FJVI)Jgd&k&.(A436.#n(G/HeiM)6p<
%`Gh:N"aj'tiX/&jkeiaqh%X#q>Z'6`j6!q;&qWk0MK;YRZHO/an;TutK"_msK^pKE@QN74J9[js09,<`hl4eI\rJ?EPlY-cWTX/G
%k2qp;Qtku*_c61Mrn'UU\9eq0f]_d<"E\ck0/0=cC.R8s"ed:+P6#En:MZg=A9$bg7pQWmJosdokj_qt[2bpjeMVHQ*Ce+;I=qK3
%\2o=W)B'M@XKE-CD#n[MlRRc?p3.7e?A%XTNiR]dK(ikd[lX4P+Ue#1qlZVX&S,?'NU_'%4j_"tc:*DR_ABrg]#c1)=C`$a[/ZeS
%"B71&-'4(R6!=jIWQAYhnNYS^-s49TV^$RV+7g<jNuuRP9+EEj3u_ZN;XRA8?"P%.F.GV"8Idq99\(#I'P?*[5Qc)oR!$tNSK\?+
%((d;-RZJEs7jQ,Qj&eG7J;\+I=[K*]jYNOWAgB2kkN>^&d!n@n0Bi7Gq(0t5"E_`1!7^\X^*(KBVprbWZu2#9\XX*#dJVaR'K8h.
%"Y\q#7(jqB!`7,X@qT2PKL)&g5f4pR2!iF#+NH>W)%>OG3USk],e`8%.+3*,N"krFZ=E]r&7c_]T;jGgL8dbGLeML8^pJX-b&dn>
%bpA\Q'Vl!qF^/>e$iqBAbNWf);rFF;#FYZ:&/gq\9&RD!+NG&KeMYZa1(E<FR,aiR4J'p2-9qd0!hC7j])1\Bft*D9f9ONb#-J;r
%,f0gk;N?=/50s+!N7bd4,^F)/'\GXs8$5r]eT"utlpE`P@$16i=t=Ds4Io@fBJ1@M,i^/5f'(Yp_EY=X?MLkRLL;W`CBFcpnDn&1
%3j&`QLF9Kh.`&scMbB;qq'$+#FpAh4>d?FLAr_OmG1#KX`3KZ)%aX%Uo^pmqFX)lic/=C4&rUiCM"*6RMou3oX$@7"JW/@q5c[m;
%W]*^MA",6NKqWL2C`kDI`X)M^EfS8^nq?&=;?^sJlgW9bQ7GrQWYmNJi!:1D?5&kTTil7#)FI>"j)KSm(*LN4,RLWOF8FV1Lm;U)
%%ZSg#rXNNI%+`rMW]j`q73;r)[Lcu*Eh8-(3*%n]\IX+-JYJ&4KdTt)::2aqg>Vf;)5a0ElI']A2d<ohYPO5<b67YOC8<>s1l[ZW
%&k_k)Vs)U,BRrH'\Oe7[Zlck!*FG0P9\QaTiB2cD-91Q7+dU.!`t;MgYc;=D&?R)`dS6'EN<:dp#-UEUm]6tYF)g`=H>tWK.knhn
%PlU*\+\!8W0V2`+YM7"fFg9n/l)EuC#Md\"MtL<qX]e^i%8V[%8GD2^02Q1681a["kU$X*@,`B..&c*_TaAZb%B:(`]W&%KD8s@R
%*HB]IZk:EUJT%,lk$lP+<kq!qO4ac)'V6g@Qu@+ejX-uVd]G,kM.CiCl=3/>5aH*.di;._j_5/HfB'4;0SJ[Df)0Y!N]%'*;^Mc=
%XqF;"\p2cE<$&iU"qP,@<M-,FI/P5-<G#F/`t_*L8qdkb@3QXS7em\,ahVFYcr:i3&AZ9d<<7ir9-uC;_Z2*]1uiS7YOj.a\HH4?
%\B2Ns8_WcD@%\m9<rarb#p<ZVZm:I<b_Y,NE'mYn/4SAQ"DSpH`'>!F%fo6+Gpjf<T#">Gr&dX[GqfG9Jl'\,S<d'sKtu94Q4+0O
%@Y!['WX5&R]9G#0'Xct2>`>-WU@':[l:J):@M3a$LO:-6SX0WCJ-G<m2X6YHV1RH5?u0(ZTM5oY";6C=D\uq;KG:27jL?D,(]d2f
%TQc/L+:=KgJZb!8LQAKTNXA?s,QaFERF36>Hs2.)ecKb6Q7*;!!hOt$,&o@0C!d8q;e3[QLt\U,qCm"<#!"@e*[LtD=>6\J"%F?\
%RD<aq2#V+3"`H6WNK)nnQfMM:c)SI9WBc_YZFae#\u"ms!f<&.'Vm@;8qdEEZl9Q=*m?jq8jNlB`^rG6i7Y]'38-hmUBa7^[maSp
%3.T2i(fVW2dV&hg>P*f'9+ZMSd3q!<`F/=LTF*AlTaM;8Yh-gQ4#*OH-4"!IVN(Cd?\NTClo*</2T?Jr:<.K;0QX%JO]E\2iHGPd
%I>2-[RXbBXj8^SnTcQ,(J.BS#;<opJd/d3C&<J);o.e$\9DPsGTsbV#W&oQ_!"-Y&]7:Lmgq5s_Oq5<5'gncgqc6Zk,LG"(56`=M
%6LQqO2$&iP<e)p.'0tQ>d_=Y7Jk!t$"M1%a/EM3"G$H]:km/!p=TLsYF0c3n8KNi;m4`PWKSEWR#TR7E/TT\cMP:YJ)5MD-*$;;.
%"9QdV>ZCIF$Uq"H?J["rM0o>X\->71/';"n^DVWH$UHgkD(K^-h=V(CE7g9aC5l1*JfNQeJ09]S!/\9PSoLafjf4UJaWV$#YmZ,/
%FZ;-GW.DL%J:dY)^+""%;^@a&0JSdNJd+`bkd7\O^_p\R8s+tB9k_^+7"#s1#60jRML1U)5c810n,ir,i'n7Xi@YV#<tRk'Q[T2I
%W`3W.=r?C+!f@qp&`f*^CUb;OY@J1_G6HTRiA5*Xl8T1U/#ZB4haRS#TUZsW3;;`b$E,AXnZD52Noj[MiL\p4P`qj'Lq4AUX\FQH
%'L";eCl=,X#*bu0ZuO/\g3A:f9#REe8:7g!`?m#'OZjG&;];#e0lXGXp'e)s*!A'pfp8RpH!d&:6),ImgoZZP>o13>[!RWp5&W'N
%p1uH(BH`N.0Eh`+Jl#1jQ9t&Z2)TJ6#jN9M&P0W+X)_M;/MSu0\+2Cr=j2)4-JlN<\1424Y<W94\I>bX&;_hgi-L!GRV@$uVR17#
%78Q'7+<2Jj)_`!H>s\\8_u4@>;3dYHKY"6CYVf)d,7'\%VF7o-!\-fQ88fa]qY"K^UO[@sCHRH56O<jJntN@=HGg$rKp2it5p.#=
%]96?gQ<aYnE(7mS"l,P\>iKL-7"5$+UL(89ROr3?Cs&Ok*X,i\!i:ICD9cm!"OVZh#3!^@''/Pbr?RI_fd0k/cmMS3CC)p[M'>6>
%M?'C#ZD;+B<Y;'i,Y0&A";9/)eqg[`37F5iF#P*>G\S0C+(3_@c',J/F"LaMP/)@%8.7qKNVX_^GgltmO!Mg*Q'<Q@`!n>6CDQ)&
%e8>F<QUK5YOsgU4PuFNjM.\%Q>O<[:P/no!N3q$%,jd@"GQ:FTifcT4/;)qGgL?FZBKtiO])^:$Xsko#5nV:>TO:pX>/[_V>D6Vq
%M@.N8FBtt9D4C-XC*+oR_F4V8S>4(J_Ck@I0MJBdRF/u->"Ru@(B?>18r/k;isM$Ep721T*"tT77;5Io*;?J;90lB_([a3Oc"(Zr
%6Lkap.$+]J"XXe@Ru5:u`"^$>nCr%gP#$$i1I^5o?l)'K/("WS^pQmm<rsY09E:IrV):iKd]LA>"\",P!4=N>UK5FKHu;9b&tfLJ
%'e#0(>Dl%a`#30TiVU9o42E]EXDHWbEm11V]0mV!J`3le\FUt:+IN?F0ktKUA>RnF@4HjY_pBSH#m''TeqBVgJ0K`I5f'\7[>;+]
%I$"iTI53@J$H$h`Xd`uipe0O5WA6q<O6*>RSchWF-%O2oV)?@LV-B3r0o@^/%,,?cd/"%=4NC#%M[G>r:BcVaNa%EDG)8!WF#u<=
%]bnHIAE!(>W6MS"Q?;L2-u>HLH[6)gLe4Kd&Ro7_Qin9JkI=M?AloI)V7)-AUg.e4p*r><,_?(IJkfK`;JI.[mtB+Z$rW3bT`XPY
%2+^q0=/=@M'rnUl'QXZ2c\@p"(;L=cBVHgSU="_k\D%-7_G>_T6Bp%H\T+MSY8$UC?5[,W1ri2;Fu+lL-b>*V.Okd%TH(Eel0;l;
%['s?G@SSSu.\&0!%7]HENa'$C((fIB7RF<lTEmge.LAsUPLM(q.a1d%<1&C8%`:k/(*u%!44-V.;R')m!q!KX8R",\UrB1/cV3n&
%_lU%FI?T3th%gR0WT!-G@B(=q5S8_X<0Eu_-4*_!<VWC5W:C>*mFVa(_Mr,uQB3^&V".04$@]t=8_UcO,5J'F$8O&;&1E.);6+Uj
%ONrnT5`!isTQEuo3!k`bW_c!=g6s-dm8`7LN1e$@JC</;b&0=)k<"MdM*^FjWDG=nEH@:Mh0b@9()(Xbm7DaU_.LnE>enk>((<5T
%WiP]U"@`5dTTWYSCQ`$sY;*dk"Clm(e09BK@5hd(I6B;50h<<J'e4quDGJ>@2d_<lU2Xs*CK\.MN!9Gq--ro3I>aef$7-6pm^bXt
%pIGjQQY56u*sPnXV$_dbO-?!*R"FpKpBRO)!+bB/`upR.%KL2amgUYCAr.LtO67$I>lD\'+m3i"/'E&i1Q4MpLZp@iM^r>*l1?gF
%E^KE7>P;=Wf](Wo&i3\2GgVZ0HG2!E[Pmo;<)2$_5eG$u/<*[X%(bQ=ioDg,/(1;>pBn9Y+?o]jGu*3a974$UJs8NpY!o6K\dFmm
%lWS&Z*06Pj8^d+A[@7Tc1`?H^HWmqqQo=&'g)A:o1<:"LfB+VD6^_E=?N[UPc*<NfnELjG5SieWNBp#$fCCp\Sg`gtQU,@l&g7g7
%f5jBqL<W:9O*9$0H"cI+rSqTo=pq7`Z0q+CpmccQrLnK(T%Jp7C!,INP]$2^LU;IA,>ndOC]].u/=/@JdunP?/Lc1Vq/;IBA'gr)
%5qQQ>`Ba_9YNlH"jektm*DS%>e.bit6,B;(LpH*s9$YW;SR&Vd>Rq>MR51,,5!a#h9"`3n@C00;aZ5f3o%f:UaF/kY>gJbi43Y8K
%aH*WSR[@@`FeWuNSeA0)WC5.9VgsX;)=(0\bI@s9'i7Y'(Sr+j()_dGkU`CJJ%TMd(Hp4N704a`WH^n7aE7qd(Wf6E<7MFV@Ghlj
%rr%J+3rg\bXi$[Kb8S`%UN<fR!o.=ZNJ[TNMBL+)'`sroHq6R4=&'tTWd@2bfpIehFq^DZ,hJ$J/iNGJP]ee%:]u=clGm0U+VL%c
%'N%U`7W_qPQ.nhCX5ciWq&Q%uGT?g?,QbR!:tsu;;Eth)MNpUm"f2$$+N*>g"&p[d)E,./C^utFK<*.4)3RX%a?UpBVXCB_nN<i6
%-JFMH.O$?A?lV$>O`cL2b^9eZP?McE'm>uj>=KF@E*:J+eRhP0a_Rl(-U89,$<0n:[jEM(3fTQ(i"n0WYE:PVQ!8>jRV!i!O$P6>
%.TBdq[hdA6M(=`pR*DqKV$g'6$0A4l$[:WU:-uN#RudLt]dH&WRL3$BUGO?S<k;9J(1X9s%(D$a(S2KkDP0iE(5#S@WDLF8\@%-$
%QhVaAL?H$ZCNtG>3o4CTGKZ>5><NUY+@p^!>O=QSMU5=qOrgG[6+#'WbV04<Qsg3U:h+c#Zgi!hD^Iq!#,stf6H'e^X[SClM(aHh
%GfiMAk*LghAgA;IA10HK9!dH-]=tHAX[43OA"]VdBhK#=oGKG8`\-Bg^g,bP<BfFl.*kNp7LW0b9neJ`NE_<oTUR6Z<>s`:@U7t.
%?N6.$@$@9ZU*r>Z>t]uS!YdF@L.9sU>*I0f4,oZ)i"pH-UFeI*<!("C]S'fE+;GJ'.PQleMs.aj'p/p@do[ejM:lJ:#-J#LM&&F;
%,ejndR@5U08WZ>=KaN.Uk*ThigPB8fL(V<sbb^](V:NW/MHhg^5n$XG;5"'Q\@%-s97.<[_ol>iod%Fo&!a?Q>n"VF41&EGDO5Ma
%\Z4dcJg*#dW2)pt:(XOL)`(1(0P2.%*S^)6\fP1/A0j9m5q432<1k5?((k_H0=S@[TK8&B*qj#T:<,0gH42&($?+GS'mU!eF;(5m
%es*t'R9^q*o0a:k6;;Knil5fKDG]_"J@]!"!>VcEjiJfF;&skOHb.pd$Aib"T`XJg2+^q0=/:%lf?9P1P$<1sVnjmp0t6Xq:_>15
%2GM=5qJ+%W:kW6Y8sC``8TL(k'lGJq.GVcZm5-Ur)uNddFjr$C8;rE5'f\^C8\2KY+rq=-,#Qf]o#d%1"ff3jE7^d]&-8s%>ACVR
%:kW0W8p&!g8QqB3'i$41.@e87.#-\+WoM'%Y+^$46=NnnW5(E29bQ%%'?MaVUQH$_H%kWF]^$j*Q&[k([0;5NVO*CF"=V,@!@:@&
%`[&)eV^f/br)@QJibiIa>F9_W>a8MC,j(C"(#4[NPMGHcMY,hKET++D/Nc)[)-rDZ-ff]`"Ud+qF;m[(E<6h_R",eq8n4#hV,N(P
%$@W>kn8tn0HO4:_U0*\_"=,$K'e4qtDGA8>2cldgB4_S082/6ZI6?!B-(&9?*q.:3J-_i3[SaL?LdWls1s#uY>8!a34XutZEDm^N
%iJqD2+]\U6B_`hn$l'BcRL0e))n.._TSjuAHc&2T]%t=RYZ$9[H]s!r-/)iuBeVfTS`#_>MHQcBR9+B<&[11h@pZ/0`QU)c3`DWO
%Nb<fW;scr+`42aBJTT\9Uo^%9dWNJ)>')pL/Na,F>0/cq3GM4[)\D"l^E7Zi!(@_OTL=XbQm>bt<8j-pT>E2(P8[Uk0Km#87[;g5
%,fW9,$Dc_5,\>e:)<eQ/#:(pmh`&qc0do]]iH]Y++Bs*%SC13COG9*>R!;+LD+E`":gAUjb?-@MUSJcPNepgjdFYX:k;Q`"iFC.O
%%lj.lA%i%SpsaX=LkhF5%2cQ_BQssf1(`p.TKjH?:>-9+V@]QN%SBZ)=Si3DiME0B4n4mXh?%CPkaC^F#u!^mKAG1-1X#o;9um.<
%9Y>(q7F9!g"d@ZHnIbglls9=(mt5?5Ws36I5HTJ;pFgS<fDg!o;hJt+n`Eri7$j<Tj!BadL-kfO.8Z5RmQ7]sT'f(0``pj\id/f.
%eKPrNFN($?aB/hR,i*"09C%-3`S77a\kIZVB^i#hj;8p;p'_-C3a_B8:m80#Xdq@CNc3Q6bD:k!&.kZ/qN6MpVTTit]S_kQg[L@8
%g7`-;*S,?%_oK*HSjT8^coNQAZPJmO,LiN1e$Lq@;)]5skti[Xk_u8tU&n;QAqbH>TRR:/l'L`42D&#B'GtE?q/bAVQk0?>EA\-!
%bb:M[2j$-PDIE$0]]$hnLBf@mEe0s#n\Q6JZAGp,.,pO>cQ-_q3?3>'$Agp;fcj8"`+JV;e0G.-n&jmgZWQF3_RPCIM3BBWQg[Kg
%T^@ZD+[-oE_2C-D?=e2&QNH"FiK?]`)+R>#[J1YUK"@=:UOok5N74@._#VCdP)VV-U+3id6l/Gt01@Sb%Wbes+u'k=DOIRnE;PkO
%n`:^NGYVp5Pqu_#m$]8,o-kKJ?:@:pZYhS_W0\fCS&O,99q?3n-:MNWkV`o;+7Hm5geC.4m9?MgnKJ?%4A1VeprWfB$1&p[M,LPI
%fSS''R!$o,eompeMZm!_h#D9O"\#jOp'[746T3$p/IKs(*'C#c\"dr!L$;RNed44,l*@?]$h?>m5b4)F0`U?;DA%8bOr-AgkJH'7
%/\/N^%Epir.Z5X\D)-q(6t0&"S_%u2@#00tBYr,&1KmJl/Y&Vh4PhcC=)*="]Roh.a]R?V##l6hq"JJ)4MFl$FV>3BhFpT*B]ufe
%0)*at2[hFDGdO*E)nt?er!7U!L_3iMg>P<^ae5&Zg4<qFnaupO0Q2%<1NnCh`k_`[-8+/%[%.;311c/E*#2ZT7MT;M^>*I3n1c)t
%2U2lg2!BoXa@EnnL6h>n7LC&E7naQI6grE2RN:1;Dn<HLK@U(n2Hnn]E<U!4^XEV>iFUKWql"1`%,O4Dn\$k88jEZQ8>GK:6$!Vr
%GY9?5n.$T^<J$:_a((]U]%G%s4Jh'G5dH"X"$mjo"ijj3nHMOc9/CR=XH^\jf-9eqhU%0>(Xik6]Rko3H)NAjQOZ%8XMW^NFZqL8
%A@Of4YD%==Lnis_-Okf#8+\DIqcc(<PN;.Z'HAnPV=@R&aAK1*L&rY-kF<RL3/Oda8fpf2"rXijNMPmg5s:_YNl0>e2cqbMHju!0
%o?nd^Ki2<j^+Cpm95d`OGJH\uK'2GNi<Qp#h#Tg+JN)hQ42MrAks\7^?C5EjW$#BCbP$bbZK@6'2K@jr*p[oA&@5Y.>L'_V+bk_c
%$eH/T5+(tG/R92eoN@7]H:8U;#e];bLnG,IKe`1q.!lH)+^>p@Gb4bRD(4a"a5VMA=$R?4A@+X8pZOIMGY6<4`@Yj2U:hfXEd9Y>
%b$;@p35DUfE"144\Ua-:+ao!PH"n#tl$Q:j!rLMCZpDm/GJ'UE_5jrATI%M[c(F6`T(D1U6oa&;G\%L_)Oi@?,--J:31PW4:FY.&
%W%LZ6C=,V<qSH6OIGVAa(*3#L6.$Eg?#iI!('ZNq1lWM<E8V,CD)bEMnMM;N,b]"[aNqj6<t.HWM,"WQdItYXU+8-U-,aSDBEL&b
%aueEa3rQ,fb0`s,1H8(8d1g;WcIZb<!U<,/C;g`FO+Gk]f1G(>FASAf9jO-7<;@<!,QmN-E/A.RQQD0Y5s&(\diKeWn]_HMn9%<9
%."(0(Q:^."cBlu&L!XJOpYXn'Lhp"3^0Kh.kbbSeFK7%:Q]:I^U)CfE'ho>FK3^j*Y5P"1&MIS:>re-sFdk'4BR)&Z_4+#%^AS3a
%Fm7n\#`9agh.2up'8uLGk>OhlY7PmDR!A<qCm7!9^rR=qq(0e!8M2']BZ\([.FIp%7n>#`L!->!XTjA.\ep(lP09t1lo`b)qEf[?
%[s[fP/Wo3Ob)Ss3I4a7>kOM%1BeLo))Lc4S4LtmDZp`i1K27%?@#+0ER(A`c$1$YUr*DAt3m[F%A[l"S+U5WC%L([b;aE%TJV#,D
%G`*<2ic#6g\;-1UDWnK"]uFm'1d:1]Fm5H._C0c`>*Ycc`u>Y+o#m>@k+ZJB4T0ZJ(EcB2X(--Spe#</cg^]3Bi*AL(2Y+tfbpGA
%(*S0:I>=hj,Rk3m_e+cYYpO(M\8.<UZb_%-.sq'q=\,F8M+_qkCuI<dS/jnTJJn\X*1,%&YafXsL2HL;=r&?7f8ZNjN.XfI#2OR[
%WJV7Z%s4QWmIK#'E;3,hW/W=d%Th1c&nl@nEK;[8;k#e+QN:eT&Xnq`LX^s50:VMF,B7G=qE+&YcUGBd2b<E7.oD.=SrCoWoGO]-
%M:2Z"+3Z7L57*$rB*rO0ooW9u*[s;)E0mbDaf4Zh,\WQW69C(V/P"JI&>Ah<Cg!241EC:bOt?BK'[;a="ieM@3#_Z1oG0$LP?"EE
%.6_eBjXDWpcd4MRk7ukb7\/0k">V-TrhW1f",d#-LM)Tq#erk#`OuMdV3p6V`t;BB3#4qCQT3MSpU*7fCOkQZ7E7/qU5?&YA_YIM
%Y:EG0Ca4`^+M@22+H].0S*1"]?#ZD,dL5^:Z3(4INZl8#c0*jJ9tCY'U,BUY+"socd/RbI9m1>GP2sE,"8iC2p*QPN*cf;A&0LuY
%_/>u=ehZ_ERMG&Y/0ZTIrVLFUU2%`o]cP(LnfWe/6YsX$SU1P[e8uB6-(4_hOISRlIGFnb.HZ,Q@W1@5_J''PCR0-_/s@G6\B#@r
%g%^fXNb6!G%P%FJki&JnS=_5!L,[fpr?+iCQ@6Z)#.j`pX>dKoBjW`Omac_re(;tG6AfE/UkR8.gmb+%(VL*]!1_a'[\aROfZ$2J
%Z=Mh$!Y6@qE_d@kW5R^Oj/EA69q*'.2XJ0Q&ks^W<VC;HP$fZD`F^j'7<`aFmjtf<-Hn(2*Afb3jMY`3`<TA1&]%Wi&_mDGM7N[F
%F+NeU6/SR<%qd5FU?Sl?_%!<?[IO@NfH674d9(Ns9,*Q]TdJTtP.,Hn>@06R?"t+a)Oe9G;$8fe,u5VjN4:$<lh<P^o3Z@jJ^/Dq
%0e>[,fOL2Q-&6A9B7c>&!iEME$<'*:TI@"/3].i3k]/-AVL18ZAVI_s7'DL5#ILn3OcCJpe&CK.d[+2O'+]qsP8#7,WD,??]2\7?
%Xp8o4Z2V^YX;'d"n))Mt!V8&EQK[34Vce`*e-V3"lJ\IT?u<=jK#"q61!\>]//UW-]T#.R0B-K1cW(V@8ReMkV"^l*.Qkh$2pVU+
%/%o$aU*`(p_=;STL7tRTUH@:C=>=RV>d3Op$SX,+Sf_?,P[cLV&Xl>hCi%@Q^QrlZ/<[h*"l>7Pgi-&2s08sOTX@$o,@q(i;D<F^
%5%$35d&4LDH\3@[0FUN3JbgT`,\.i>.58Rp1ZXR<l.,!5<>dG<JZbXIC>J9F]T(([3a9>p,h$'eS!b(\A$AQbnE;r.`MnFj'@&,[
%T]FEcFr3\kONa88Z`Nj;R']Jr>@=&+V2Uus1c958_ecPNdr:T'=>MZ38N\BiB*F)#1sZb"$EXD(%6/RCR>)<LgDipW'C;EFe0WpS
%Z=4^jPhO1Hr7n"D)9:9G;_Y_T^.uj:#;T>f1ZSSf&'cI^2UTfo'Z2dsTS9<O/9@o]<p:9&l^OfEXm\OFQ.[2_0d?8ZB\SnbnP<bt
%hlbA!0Y[>:Aj*#*lbTZ8/#6poQCaf,^bW9T)"sH5&r%AjGkl**\Cf&TT/>I6lk^HJ1KkV*oYo<kn;1Cua>7jRC!t:>UCFADBKY,'
%T*h*Zc1IYqb6TCuj<J/J"EeZge>&N2J[R5b$A.^6!D4bEDaN-'M%LZW04N#.#;Se(KdO#qTH0=Fkg:KZ#Y`[S,!n"ri+,m)5mo'p
%2LX[Va2OCjk$MOQ*c/XK,c.@N^h@,]o`V/(%,\W%M$.0%@)HV^P:?<44Zo1)Qe?Y)@gSrF_/d9H]?je/[L:#Zk$+gO/,^s)CC;Y-
%D)D_Af,h6.UMk<b:ua-$s%3-riY^nY$$?Kr.*JhfkfdGp'.m`%ZpP#=bjEm(i.GeZfe2!1LpOXfd@d))Hmh2.`\N1U(>-]noMuC0
%]U3Us%t?'O2@R&dqdm)M6aX5A?>k;Tg8sM?cmZ=IVDJ[('kLaW/QC-&\6d4'+Xq;W]lnJ!FDu]XRS_jF-9$/r1m9#PGq)bNK3:<B
%<'$B:j(Zat>!LBC&$ONS3,drX6"`Wo;kY:/!B!BX4NNRLV2/G^Vun>mi$d@(ZK\eNI6J!IX^l]6X5]+h@[$i*87/^p\;GJ<Pk+=n
%A[]dZeI9h:8S3\](5e5rLoBT[4(Z)lEJSilG*8Bnn0u/(`hSQ20!P.T[^og\+#ZWS.O/4;)DM#sLUN(&DOB6om]+,fIAU__%5ee-
%A;'!-6TI'TMXAk=WSJ@2'sgOJ_V1nY80/bb7fI+ZDEAjYM:oa:&c@$R3\4^'%MZBdk."uHW2)FbIoe77o]!7b*'pS+)UDfn,=IWN
%q1LMh33J-T++WfloZVcR8$ku&&iVPfG(Y'-Q^-+rgrbfKbSF:>V#::AZRr4l`F+j#&<>qdKe#n?*cAffLbOf[dMdnE].k%!2U5=4
%^pK'P16i<ehNScj<NW:']4IL)Jqp=8')c$iKstQ^^2iSq-si"OH]r(UYJSkUa+QS"gi)k1IC3rK5G>IdI7(;`'2ogG[%\#!**T$"
%L2U)8<d>a"^m/;N105q5lDCVT)&]2k.2bJuJf$7F'Dn_&6<tj2kaL,J\R+NOSO2#(;i+aagkcIXQ-!$k3WM@RC5rK*YAV,BW5If0
%)KLL]j>87kio+Z;=*=Jd,f[U8cpL>pD<'"T!c3te"K@t\d4-icJj`dg04I^Lm<JNlf5I-8s!t^R*KR9M(=d2"2'?nC,Dg+o!eq7G
%UM%"WQDu&6!XrU]!1:Teg<m!"In+0Jpfm+inVPD[l0-:%gL\HK6B(<rfP>!^7VXW@cr-Df&<_1caBbA^]VkTr_k@)q)8=FGQ0^\e
%2*Uq@egWi2kE%Vm<$4_ISYQ6W#"$S%%.RmP'1lIt3!u/qfl%#HJupDk^:Y1"g3*2^Q_&dV2E%)ifT3;i5c?7fL3-NjYR\rc)mC5<
%UbiS-agk4+EAet>(tl57R9n"$fe>nnLkt(&nL_nl35bM(;r"!prV#Pt=8rFZNN%JD-In?jrGE`>/itI,59LBhD<)'sHSC<RZ2uW[
%cn]]]Rm]jZ[07_:OOEjF+82jDciqQ^=,df\&d^qf#m+/mAs@"p[25\oW\q.,?hj=T`2Cf,'@<>"=6I;4/Rr>(W)XI:!.fSCC0JhN
%UZ+RJf@8k'PkFGEMiC+.Glqq+kL6*\`r>Y[3V:^4$*T'nTd"1n`l><=$$c67:"9Z&W^;/@qb]X[,BLECVE$`ZUa[O=!g41Sn?=9s
%Y^Fq;2:/JI^rAc,"<6$=#_d$cRGf8f2c<$8_\pA@A[+BBP_tL6g.,fU+Y(`-^Q7X%%\fY7&=FNM,/a(G^qPTJ4(%chlFl0jEl!!m
%n2R0*YlF@.ISPM<IpNINrmZ"\2s:p'#?^Zba>qcROUuh6[6U\=51KrS+3c1J),e`0[AQ'jjs/)cWe#h\fUPb17aA!I?P_B@_RsJN
%cD_!bXkB/h1pO^V)1U'bi:@AM<NT/kB4-qZOF<_h"*bd[cecLW>GWX!PE8r>mbiX.@(>?RE;1E8Gjai(8[)&/Qeq,8!cJqgQE-4.
%4;siIGH`"g?(-^U"T<\$-):S$p+52+&kGRs5@-ANM:oZgWV]]k$0Y1"',RU__98p".,Q.C+k;$tg`D=8RRm7m&$"=$F%s(=G:s\^
%CbG6t"E,OblZVgiNrElOO)Em@"Mj3M$dJW8%8'DmWqY`_Rd,$(dtNA0Ye:#BZ)6Yg!CZ+!!=0(n=9=".h)]oJ!&]'Yce0"9ShDYT
%$**[o[kj7i.A5pFbYjjG/I:Y7[M[X:\W-Jq&D6$J)XrQV=R:H0DtEMPRiOYkV^`Yf1_)5@)]B5d&Bc<d&<#0]_Y9d*a+'OdfXqNl
%eW5Fn8j,G-Bu:SQCQSlX3BEB=6S+XYLRtSOQ0e'Ia=&ZGc*&ZP5@*D\qEdfbOB;JUQ<dIjTIkb]2Yl=LmX:3hjO8Q`6*DVK(c7!$
%a9q<`PbFq4DO6t#pbif#o,3!?&P>F2Tlce$NF$]+!3o1q6g*72T0$`PDK@IQ:NW53a0#BrF3b'_bsou*+3Mtl+Kh]1(:OG:2>8'$
%:&`%aY)aT".0jsaJ#Qs6%'KCB]&)nEIk$o1SA(kmMAcWYD>HscS&b.c%-VO`5(0UZ+/#5Ae[pGr*$$p#$&Rh@9dj2/=Ym`>m`R#6
%m3QF`>:!gHm?uK)VtD?X](m#:,[f_kEjLUCZ92;g6M'f&\NN5`5e#W;CgS"LO@"'6X[="9Jm,]h@R(SN]f/k`BUso1-A`h:a8$_)
%Y<VFs"Mo"%"Gm`4qqa8Z,Xj*m*pDB_%^&T[qj*qF%3h(*RCGMLM1.f1W&A#Y6Nc;(`P^OR^sL\h?2$kQ*&3$12&pnT]s4>N6>79A
%-m0jnmjHm%^51T@TYL'P"3<,W*oN[j_:Tdr)+61dkBQr8ktN@FrM24IF/*Y4PhpHR`S80-#WmM6lWa78o4<CBAUa5^Ie.-"o4<CB
%AUa5^Ie.-"o4<CBAUa5^Ie.-"o4<CBAUa5^Ie.-"o4<CBAUa5^Ie..M0Bp[Xkcji!XrDVB\i+6cl`4$1$*$aGC)gLI1T#DQ/o[IE
%)lt/I.`s,V84&Ms0DqMrmCNZ@g2SY(\h8h\4OK8Bqo]k7;/O:@EGZCddco\N32,Y<mO2H<]UaK&#D;U3OrHP18oOV",e=MNZmgii
%;2d._TH60[DP<q\<g,n8GpjEk\*Gg'(F@lhU%%Z,m'6KQ7a\kh:m1Y1cnb];_=:K[^1`AXlg5(`O,1l[?39bOYPkbthmdZ=&*Ok^
%lt?P(ClNJk5U,cg&SZko*AnkaX+![D)?XP_X>f@Ep=a2=%4m<6n!QGOEBr^V*,(T9LtdJRNe<ma%XpRk&Y"u8U[Yo+ASa9BRB"_i
%S5\ET6rhRSS@TS`>"(,$ABe]l4Qb#1U8l!J&'ZYXi27n3'P_tb]T;3'cjp_4HjdScnj#]#36$-7(kotEoada;"?.5b#I/)Ugb-c%
%[\7Kr%'eKeW)n%>1*D,jd?\F&8Y8!'3/D7Ha9+I@;#j)0H87s%r+BHCPeg3jkTBO(.AsSGd).b]e3=aFQ-"8:O+[3'.ie&n=ai$I
%6I`:qJ<$S71^du,/%^cBWpG!9W1[Dn%cqNXm=C]KH$_q`?Rt;e#l+-tHo^*(TJ-0/aSkYG8[dp=m4O4@[C:/*hXTtFh&kYf3Bm7I
%Cd)3b:TJZN%6qE2P,[\l(G>I9cSrR(Hh\-D)#bJSnN%`NUO'St1&N0G9^V@:I+-"#/nbdqJKD^Y6heXr6]Ork(n8kGFVL2Zj^Ip]
%P0^;)f=Sg,.-7mFDU9I("$MD=L2+A]L\RehDfZ=Oc&MRE@I`[Wh);PDrrS7d5Jd:Arda$M+3*EkLE8=9V"VJ24\Dgk38*c;m]j5;
%5*8"t(O1o9$#6,n#P_sRDfQ7JH>Tt.n*S!1K!*kq/nbdnJK?%c6g[OLL[<?8)OK@Ho)1/3Ib+.cRLHl_X#4TW`?Ir)%7CGd_+&RC
%5QaO?*Qk70+"58i9:4Soj[(136,tcR#7kQs\R*7;07&sC`.E/;2e2:eGInt]p=9$;$2%AIHUR7*p-\NY57G`57p&%L5$1Ae&kaVn
%f"8+[<bXW&W)ON:JfPX*amN!IWm3_''QGLG?12GlR/D178=%'LEkIB!)#Ju$lIg%kU.eGN]DHb!`94l"[ta`@^-/4a1&E-W-U3R7
%k79e[B;%KpGX,L(0!nUK!B:E7V8C)sE0?lbkRD9?qtmDN)@@\?*/:qNEO<V:g0Tep<3Tp+QfDWcq4^W76*q@'19b\TI;n*0K']27
%qPg1fJo?^KIE?rXq7R:@oBB`q<n>&IpN,So4?J_g@]olulOT.KmF?60p<p_&F6VRYXju_\HUV:[F"Vl?L/3q4qh6/K:*Z@>]0Uf.
%?g,&mDs70;HcZ$)%qG4q_iJo&g`DeG@[$F4>tY4'cU_Mq]jPa)?MYIa0)YnFja').fC\_ka3l=Q;f1]/E4gq[dQaC7l!NYboP^[V
%aaV8*]ak5:fje@kGkjn'GTF6nb=KZ^"!j/d&Trm,\384!\@nY"+HL110m^LUESaaW1`3^l^(>iMVdcmbSWKJQ#C;oLGLSfg5NMV!
%qnRUUZCbnAOQ>=63g5-J'.n$^E^-:9ck\YYH4$2^.Of@#ABU/718i?a?t&KniOUaQJ%45:D4,I=Vp)]Fp+?.bf,$Z3bib$M_qsE>
%jM7b<IalsbV!%K\:JYL/S.2(\joSgV>Rtd6EkTO;DEti^db=":Vo/44*RGsH0(bAd2cO.h+0iTQGt:,+fIU5tKI=g'#MMT?i[CHt
%Db&7sng/dYa-+34>boD-Hmp.UF0,0U-9)6Kf1dM4\(f_6aHugU*_ZKmg:-i5c4>@@R84q&=MIN!iK1/Rc%=(ul%%L#/bqKhC]6S[
%7=V&?<0)geHG87t>4fUFaQ\.R<sP)X<Yok[q?&l]r>i9Vg!@/lpMj;!?.NE;7FcE\ZreKR*sW:;PhkDa'mPA>7=1`+7=.C5K3lmV
%QKn,qVb,X0em7"s3c\E[/D;&M/_URq/_V.Yhr;sA^@sfBT:[o!5V;XOD@2d0fkg%:Dm8.h\7rf=BV2LFHCh?"<+k4`OF;.UDfZu)
%?q=4WMt=fWqX'*P62QJOd.<(,U%U5<+kJ)+NQpVsIoMJ`5?MDENID"CEP'"Qb#A8pOfs38-&UFS_?)2L[,MTI@$r,27Q1ZjL>s9o
%ih/*-Ek;f$LqVX4G!^T?X+'?4^#%KgC1#rG354uJ*1nkB8Y%A9BFf=k`GWik!\;/cj>QUr]gG!I-[H7!*T^*<cgUruhW5T!TLF8s
%cO65q3;[kHj<K/Kf>uiHqj@>DrPag"oBC$2%Ft$E"l%hoIOSEEI_>!12eX_+(OBh\#O6Wnoak1?pU_C`AHQ)eH+3pDoldj:d%O?D
%kc%J:;#?@QN9bO,LZS+<=!UH2dm*X\P`>&`H,je4\XZRf#&Os%Tr3^]Tp!Op)-_&emrD$FPc*&4DAT$_h!Ma6OY,HLG`)5/[-uWX
%35>/q<'G`g7n,*n737i[;O7Q@pp)kG%0[G>`>m59iWFj4kZ'i)&?SW&W:]e>K'E;[6j7]YZM1PHETi=03m:sA0*DY(gB?rVSHtk1
%GM/q.i7fKd5K"U_IdY+`r6?1dkk@SRga,jtQG!YVm(MF%4+FQX&.!F3H07MK[(]W?:`u.h&KlD3JRDgqqQ90]b4YJ6?c)gAJmY2g
%7@b"WRZ(^jESb:Pp9[p":8#ARgC;rAn$bMGnMUrN^#m_h+L=EOakIL#jo>T(Rgua!/UMeqkT7+O2^G38m<sO'9htt7%rWS8jKI;k
%+JV<^obNR8d9E\nYhq)QSO&P,:)i-_?M-C2rap'ZTRD@Jrqa^VZ2"7E%]BJ8D]qkQ%Q5:TC]\/bJ-mW?!&_328!jq^Wo"[271T@k
%!#C7`O4u=I!P,MV9,R4gDcUPqS<oqppU\fSn9M56R4rum[l^J=^[>rGpc&\S4jH'l@7S&6C4L/s$Nj5Xc-b.]%Ill8J]FM!JQRg,
%m_2f,G<"/qL7:R?bP#N2p/^3nUBC!CI=]G-^4H"WIf&^Umj%Ae@i`[7>gG9ui>t:iNFMt>^&#,bDMYL\"2*4W%HL,DDJtI+G_p31
%""\8)H=#1U`Tt+cJbZ6/^h[*15l64_J,dZHU%n8bApau5lT?"UY[#J+OTDTrO-AZlNe;>(kJ;CoI\Q6,qk:LVi]%fYOdjheU8I^A
%hrd=dPAu6<a`rC9rqlEd)kVlEdg$h3FED*(#n]SR7m(ut6E?`-m_TXj;IkEX'KJHsrdFYq+8/p/@Ut%bKm[48PWC[loK+)/(*ab\
%`Q/AR&('^iO1^OmkDqNi8>G/USP.<qi*B_u93);N?3e:^0Q9hW1*8cc@Z_$cH*?f":TUfWol]_7H_\^"o`bK3kQMk2#*+TG3B#1[
%CkPT2eaEpRf6VcDmH+*0p\-f\_l"#ecKnVTMJI;I@J-i41A&1daip&n-aL_a"Wl\""=7Q]gUeH^mr1h`>YoHEcE#NBUnMndks2\a
%^;**>T:gVK^Amkgk<OF/Y\rZ;Om_cBeM3m?)i:,]=X1\jhhc1FZ,'@fS03%S^ASfUq^kS=;4'H&m[&dTs14?m]qpKoVslZ"H[3C!
%omr1anED0'PBG;>#:.[I]F/P4[Zc:/?,0]jpar6u^tVCQ.XATj-F/F<j2;!k0Ws0:I<*l_XIkOs(hkm3U_qsTAU$DeH)h%h.a#IZ
%J$ZThcp#6`It$I,/:P"/rYpdL)S4e!gX@6B63F5][n/q]&&l=R)qrt='k="!nPYTHW++k/H(HE&TiM#6h_(S4F2`(lEui,9d1i*C
%nT?"D,-qruFh7`:SpR.0K%KCmcZo<Cf;hO(Hn0B5M*;i1U]_19`^5H`QWb;R^-Upi>j)_`drdU>@ACfr3uQ!*=h5II2-h#mD_=C+
%fA-r#*/b3tpUb<eIDs[e^4'po]!"hKB]u>lLG[Co-WR_@"pfJMJX1jbcY1T%3k,DiaI8pRV08OlVVpmRmY9;QdkVU'Ym)q\!KA)X
%0/tRP`u-aq[(@@"n^I[6f/rE_+7]9:a%AGn25.WVnq<(>:.6*RA#XNlo"lSNmtAuk\BqBZEp)i"?>_DB`.fJu3R5gp6rcJDHQCHn
%'Gp%QGMLHXiV?u5f7fO;*IJ8'*0AGI^)AmO;(E\T;dBa%P.o:5">*5@#bB!@2rf`AE207ro6)6"MW<fGY!Mh7\qm@Jk]J&3&o'IG
%G<j2i&(FtU\=J,hoCj;!mJL%-opS=E0i>U>%MW7aPP>#NK;3EPk@e*K>3&A9jE8(pZDRM4(hBC=ipF&<QK>j6!M*_?U&KB8B)W+_
%htjsfZjI.&k,b:M1KlUZ`7a(V""TRfQ+^bb.u;Wk"6h"#5WJ<96)q7"n`s5_=I'DE4jal>YX>DUk>_d/J@/hCksCC8?D,'"heBk%
%dha&ulZa:HqZeS](""2+e.(Cf,.k.Ui#I_@&*3Zd%3k\*0C?58/*=qIgTP)m59lp\H9NuL4"o)Y?+8P/q>D9)(YcFQ0E:[(^T["X
%:1+gioHleD2fI59QO^dk%n$LLlHq0\5h]+;71F<g&1%VmBtkJ]SM,?MHDVp/.YEKZIY<+eK`)#sahH;Z*)F44J$FF&j6`I&o+Y?Z
%$_bh2'F",S%\57`@)DH[9'HZ<O$g.6EsO[[`mY5ihm^J6&#\=A&K:ejl1\a&N1Ts@hs*PR+kWI&fQF7nnrM]']<3Y"@ni=4$0rF]
%8RNi04'B5Z"t/^.Kg[cM5(JS=[-G2GJEZ"&FNEcC3IJkNnEYX[I'MC/<_ZqfTaTd<DfnCu,7i;\m'rIur<H\T/?AB-,06st[jG9R
%Nrtm./2PZaOiN:uA$A6QgPhG*p73=\kC!aYZ9a;7r-m7OkQ=Kg429GLh+$?imH'A_q%nGJTte+IId=jSk7-8RO%5A$=r<hR3,Z``
%BkZThaAn$u2]QI)]su5d_0A9F#IAW7$P<Y9q0'@XdUW+%$Y8/JA`R*?"*%_,o6dW,r9\sJlb_s<p?`p9p<.&RYl!u$Yh2@UJGXL%
%eiAVWjN*Tag#0Et+PaH[4'a8UE`.3DDMK%JB,o6?aMoD.-u$_ULcM`PqK9CX3hLbmqZZ`]Y0V@hhU@cShQ"F6T,N]H9["0h(Ze,<
%0t&0oGNaFT$_:bB4)TgiXZYV1XUML([1oD5KnoejG.ZQ6S^5!rrIXoif4R3on*d^J@WeOQ7+4IXQDt$]h_gLL7P&,6mcG@QE*<73
%:GB`rp``J#S='uW(DZGBQJ7BOaI`/qgb4[3Ig&dta3>M4\:/e%62^-CC4>.3!IhZD0>096h3e5p&X4%G,PXMKh5H?'[$FM3&S*#'
%D;,``NQ!MjT]hZ0o#l;?;!"G:q09&.2N05mI.4]YA<dQS?amY?j1,E[06l9t5NDQdcdV:V=0t;Z.hAi@B0&nKkl<.^heJR`o*1b\
%EM4-HaSBl5NpM_bp/VCNBS9:KmDAeW<;c[*h$'@EEM<A`a6id\T"k#DgMkNr8;Yp(RKpU"=SrY^oFpj\88;`\>]j$r>l^)n1m`p2
%A7)\H0p@:g0)P+MgD"!3'qY)nI2?FopZ"jA)o('EA!cPkom8fMd[-TjM#'&+/Q0@`nW/1t2h1\QO8nU>IQ3dl!e't9T7?Wss7#u:
%qr*Tcr3tS`q="@U_dEEAp[:=K^XT/#Z((W8q4%EUL[Y98Eo-JMJ,IVWrr$4(_1),7Qi5Y\If-DLn5m4S^AQ6jqt"/:Y5!3jrpd0V
%IfH>Gj1g*DpOE#<c[KU'n8A9b`uk<*TE"mts7sG/l%bnEcMPEVns/O$s7*;Ms5gHIQ0U=-p)j>)n]KHJrSs7EkPtMNTDY]Q_plVR
%FPk[lrqt@irpjF_g1B:[c/VT,qfgo(p1^9#_tSZVrr&I<ih,\ADBX86qVT[G>\="(ZNcYW3<lBg_C"^%_=n#@ij9dc(=g%o]$1l"
%3$,58)5(9B['=m]"PX=,ahH"(Nb<4Q?YJ?:?hs6(%e4lD)i28KZu<+B*#K)i-5*##!4j7W_!rHb"3X520@t&3N=h6G0L4d?+QMUu
%#ZUM:8ab>Li-<hmr.Xi]r08A=lZX#:H!/skh5+PlUge$>#9)"+3PT+eS2'T>[*QI^@YPC;Og!O``9/h*Ps;r7m$:[ph!K^[Z2F!C
%2RH]/DtiYi;?KHnIm)C,rmotF?[$mNhsL5Ts5ur*M5])\$J:ublMnWiFX/6b@=!EWHqi[8?*j;j5e`i5DPB?'SMcfMZ1>.:RM#1#
%\I"c/Tr'oiF_A)[(Q*U!Fmn@6C\Pc)Xq8'Z7``#@cd73'$cdH76;Kd_G<s8j&(FtU]&!@EkO1PZn+j/OpX)L+dET0uCq2i@BdBZD
%B0VK!/2k"3[_A!Ko3PoEPfr!qn,-]IeTggj)<\UaCmLlBh!Td>Tt!pK^#O;8%F6-nMZW]]'#5=t+R#-Lq(K&%.qD`UQ:2N?6n/mC
%VCt=?p]?=[kHqV_3'e0]XZ_;*&4!ms_=bDKaE='F_+pA!NJ)m?WC&q(LVI(`9oU>$?Y8I>gBNg0r\B%kFQThN7!KoTi_aW\34;(F
%<-nbT5="rRgo\t4!F?S\\JmMeRIH@Pgh?U317m!J!\5/9Q^.j.<Uh,AU9">(,r0ckd05VuafErgn_#0RJr?Hq\4K$bN\(n5dgC:a
%>pjM2aPfm*)/Zl&I_,5_9QCoO':FuK!NqjA[0bCl`0]1tQtWO2[+*KA40&1`^1&NHPMm5;N?jV*J^T7WUsAQ@<1HZ6c4tItS2,&e
%1F'?:C<7?/XhZ.D:RbMg%Hp+6SdOn&1@OqEoKcA0^bjoL@FW(Fs'Rk#rlh)1^S=l_]"B!fgu&+u^]*fc^V@DYIhn%]i^&2:UE1/q
%`*+^,[U<KCoO2FUi\J4S(%i\8@SX9;qkXVC`l&IBO"d)GjN=lg1As3mMhrbsB!E4>/7pW#^+pGMHk2^c5e__kYJG.N:$*9MMsF-c
%B<eIb5jIi$(/En9>1SiGj:Q+lBmMda&;Ij5R'RX[1FAjEF(uU^B=Ke0M!eFR-^%8D@,]k7m3#X[h&GKr@L3H>"a?HW\>7.@hQV/X
%$(I8>=fjt$d%i?0cq1c5DU'kJTG%U)87KaPf<i3IO=?rNe$FV(*b<F;lr8WX$tOUkJEd2V:?%Xk:-tA#DpK%QF,ecZUs.&!mPE8F
%/7@e;)-\hUl(!Zbatf[#77fU)f3C0o\L?7;BL$#6EE#7`EJ./NM5/q\K*1d9C#,R.B;eXW/9t428I?&pkHn3Xl99$Wr%ar'gB4`^
%K^Hg&(.c$=%l@sY[RF?eC3e7CWfG]#9D27+-&S$U;-"T(%k-&cs,HW<dO1`$fm8+b+bD<YM?G%T!uI4pJWq[d-$s,9QLXoGdOo7.
%?-V(U0Y\b87qQWTdKi4J+jQC_aM!@i`I.?@YMJudC!SIgQ7&/a@D*qsnWqs;lZA^HQ>Y=&>q7g@k-/EK()8gi>BVI)p=mr#aCpK#
%_)KjV-t:Vo`8'9$Ogio;_(mGYqp-Rm,NH.=9XqFH#hdlX_SdJX=4``J6/9E2q`XNbb+S>o+<#PB%jA=A6&.NmP,`sLaL:HX<JG20
%C*$?9^Ki:iAo:U=ahX$.+W$kI8=E/>j"[Vn.7bd78/)H_7>8%.I;(B,4BmnVfIc.bda>3gb?B!KEBB$bnbIkFc\9DJZ1ua&4hL(k
%/@B(UVZAjaf<,">[/*$3hq/Kpkug]>=&cTH!H',T/kg6Ki^In06Yi:#g/r_q`-'="CLW"uRM6=LS1T$1m@k^G;Vf\^LJZ1&-*un`
%&?3d[m`_OOE9brN.O3[Zo\,a^:^sTkWAfh[TUZW*"[%bU/&<Y5_,5qG$1Q%lb!#P\ajm(G>p!8(`oLHn>SN9*PLF8'gam5>2]W1E
%8FA8^>jK<G>YHr8\9VVe"<=pS4jDmh!-QqpA8Nf>$Er.Hr+Ql6kMAp/]C'mLr$r_,EO;B&'dJ'>$15IZ]FlOlNfJ]4!bu#*_:H?7
%Yb7#JLD/)GMH0'\1d$RHm/)t3'jB'cVk&VRL$NnqF&k,;FcEXE`Dr;hPtFl+MN.<<J>fq"NAABD;_p2d7Znl"60]Z@fo#SP,,V]@
%f84hV$JJ`b.!k0TL2L!o!P+)iQmjg@e63j[aG[0t58H)IXR&"d9n?O^e+-J8^C(qsijc,S/K1M*U]Yk;+aum>HS45sP=[(hjO-;A
%"?%,V@&.>&b`9f@+N*W?j4Mk?c93#,8XT<XaDlAHAC3,QPb'5r(NdB6Pg2"t7d$hF=C?8!jB"c9)&<dXE0^BV*3D?&\>Lk@)o<NA
%-"_Mo_-8:Vc3SM%<2/S[2es`sj"6_c-pVXcZ=o@T4fe\5Teh"*E![Y!dHin_r__2N2%fR$Po##)[bAQN-@<^9+%;PO=LEdP33d3#
%6o>b09[2rN8/Zd5Sr-+!MJQR7!iDej=dijB-0uCYraN>NkIE"^F-;t,+[.V-UN#flKh_=HYj<-"2PSK"`uu)bU+(K4gfe_qbnuSt
%bha\*(:1+O:E,L)/FB/mL+"rHa+2a0Z3pcq.%j?7GFV=N9F\-QFm2RZ$kjEpZd3`%l9n=hKRP";bA<:)Htn9oa&>/Y[`F,S':q5H
%R8#P+M\6nNn-;it@Bg=kBRhG3<!jM'Dhk`tSl@+kG2$\<qq@'f.%%odRmf@WKI$hN;"72e5rCIFKr;I$,D\9u0?Z^29g#@2q!,:a
%ln$(foNk4_%$3;2b@rQ!gZ4!XF)#"ik@mDcg-egm8!k3bA#O[W-2>fV.%E)<(A=(1+'AiS,ZTED9_e\5#>A06(P$NTCAG!,#n+58
%M6km*_m:1WVDZVh:nZ6HJM52(fguLIBP[e%h,AUfAe.01QYsieV<LYm=snTM2;NNrN2#`V("GZUU=We"Q[J+^r9S)7Gqr-OL.Z0l
%<0c.\LsPG;nNp;OUENqtlVb3S;NK*cV<_*R$J=(6^98/jdWcU*fRU.No0R7<GT3g@6_"A6"9J?2X%=KFK*&"\ae-cb\Ff2_,hjb:
%&]M-nd&GJE$HOLup5[#A5eDqs>ACc+EP]H1!MbE%[b890KdQbD@KGs(?Fj<2QISSd$$Ol*[J6>PPf`-hS>`j%R1s8<@IJe8o6DX2
%NB1Ok7c]'AbQY>J>Tui?&"++@Ze4['f6I`7bHuGeLim2ueesUo@^M(q*frad._FIa1U^mI7?gM46#00/2MW,s2"p`JSUDZX1F3T7
%'kg*i?NG:%R/IW'Xo<G_fru:$9@mYu`$mV-g2Y%/2*msUmA?u>-(cq<W+UQ23i/MB8O`=e6Vhe2Tu/8o@SoY/V%+kg&'O(feSGj.
%LbcJQ<V1gE-2`XSKTQZm8_GBA`CnCBm_n%7L8'W7Y)\7B.@`;I"kiNsFEs>>.Htr\JUJ;(Hc;,DIYT?;_6NcZ=N]sY8%)$WKY"Og
%$3*enXb;)(cAQ#rc/Lt$b(n='Z\<[t&?TA7F'CSd:dGQ9;WZiBZ:QK)KK)"H[@i+:5k^Si1QW1(`:u8iA`qca1]"2SeNG`s6b7H\
%N[o^-UMudN8uAJ6A5eaC;A.NP(3Q`=HuYrX3@R##&SE_lOJEYc<2!+tjMt93=!N&A'J;_/"0(/p!N^/&5Th("h:HQPDMsXj%ba6M
%^ME1&Ra[qjRaK]88D+^`HK'(],UV<!fHQ\le4.h]#N\(ABF6O*^J'Om)AKOBO_I_*?.a.Mj&cc_<C]N@]6";u[aXlRL(H.@r77U#
%KHW?oN]Qq\eBN`JG%F#dCghYO)Z<gh*g,5h0tT_'VrAc2-Hu^<N(%L(\n08S0l[D<D5e#o*V6/)i;c^C5WD7]1Z^?uQ`.B'_E>O(
%U:CMmGI0Qa$0BfmK(lCL6[-^P'l[PoanjeD\rL[oLE0s9dE-dXijMDp/ju8a!Fm&s3s]N.ZP[En9J@k1OZN[DiDQ#tW/C%5P'[oC
%mJ=3SgS!lCXj\9p_8b$Mh^3EBZ[]@\[O)=,$1WRf(ZsP\i'Dm2!F9P7nOLj0S<0,3FVn:SECJ668ndc`?3u3rM/fP1E$1R/$(Y4M
%)RP31P6gUV:8nZj]qX[th25+tF-aiMLKCseg&6Xum`^Mi`EIt`4pSa:>+1H.e#&sSYB-t[f")=pcg@kh[DtN7S#A8SV*)H1XkA6d
%WZ6Nb-G"U0q;/(Qf3u!e..qR2O(KSk/YDBSW+D_-7R'ZW5H$n?#.8-i,X9X:S/paQ%>cAdbKu5Hr!F-&*?e&VND_Bq4KtSF)c7fE
%:m?uJ51AkI/4XD<2$Z5>Qbp.krXuOtY05`K2[GEjLa?!lk3(lr[Ea3mb>1Z3a(:9q^hf0d)[,h0/9g*uP,Y93bfK8]1e<oTA_s7o
%mhCR3jOfk7ZD=J+-LIo$;Bg/S+?ObF]eJ056)R.,E0E3q&L(eI@6l>0(jd@b#jFS:1ejG$&<;T=ZOIRK7c!?KYIl"g*Z,HAP'U\`
%KF+G2A9e[<@a]]5Z3B,%CfLe"K5M\rlPo`EoBt#W$GNpRBbPHnWcR)'khAn,^EPl=Z'L8,<6s\gM+s[\*4U"8j]19rQ="I.C%,:W
%N(r7UeWR'[O]K:#Rf=%HafsA16k2nW7&P$8"9roI>29fb_C&!=VLQbRSFJ5=-_l&Ont5S%\^co<ZVEBF9u7RDlaI0^#9pmXBrc2`
%6>/!nmBDPeDFHdTf#'1',#alee7Q<1f]$U!G1S:,Ytft[6EG\F)b,SC!#6g22)OU?o6UUo2_)sqAZGIsp=%lDdT`>s7];k=8#@F1
%%*\nP'&>0T6(B!TE.J.)Tic'6?R>hoZj&Sg0]Sk,?!F?Mb4P\cg%\3b4r?T'+[X;]Zm3pNAGQ:`XPA^,bFrb>32r6"Q8RK<n3Gt"
%aFW.-TPMd:L^59Ek-Cdo.OO)@5i!&b4#5BClN0YmT,6OST@]dgXK>4sHg8rpRV#m5FV(%s%n).`*b^7G_h:&*6Z<#j/?$69*Ufu=
%o1n]:),a,WTF2tO$u&%@_A45Af[bpn2JLlhW6)^&bKt3RKHZ#_.Hs;RZc\/2k>-1'H3AuJ.hh(BMf`\`G87(\n1iFk'Kp`^bb"t*
%J<lH_Rt]`lX.RRC+@ZB7=fk+HX-0ps/d?37=ApVT_<KG5N8R#n4@(4)iDBt+#BPVcoi7p[TnH+@^);YgG"ID1A_KedAXY36LlEJo
%l(gBPZCZqYiJGLQC$7csHOTS#`ec\![kU1dPC:oqpFM-Z>(lQnkju:5j]`DeUBO>SXR@2E'"-n7H*)*s=:MffJK(&XX9'_F!nD)"
%_h<d`bVU--kkn,3#NSKt#Wah.*V'nF*+k"_!P(c>`3Xe5L^;VJP$^)f?&%^<4C!>(R_a*W,/FH0P-;M0S@6eEOh'0s+!\R,b+E.q
%MTJaqmGgVR/MK`lM,P96_9?o#pO\cr7Ic.Zbp1BWO+m;)Yo?WLSVS,b7;-m\39X%UVgh4\#PCNK5F^^UE#Z,sR5"a_&\XV/%,]Er
%k7gT)>)\`od_1X4p\W3<M1(e.V,kb]Q+]X'[A-_)kXDO2JgUYh8BfatBCd?u+W6,CYa0tl8YQJ)]W10o$7P3'@H"a&FZr(JKEe!U
%N0&8Nl]Gk=6)A#2#a2XCN^\e/gLbVpe!2d+e!q\r)4!J,$nf;ZrKrEWP(6HI]EEK33Wk$#f[$+h'$4B4RN]MqE2/Md:fG%O'0%C$
%=Y&=&7nbU:?1lo'=3hi&2jfhsU0Lhc*R#kI0jKpQZ0J!EKUl@bV7&;+);1[3=p/;k1Bf&q?is[;-"u*ZWc-2Dllm$F6o6UF-&)KY
%W@\2o<pmDBVl:TfXT5G5-EMbF"Nb);X[jkW\7`<MTiBJS3RBg7-K!o.-QCC.?$G`-6jHrWdib-R>u)O<lVqf?2%;OO.+M`"Jk_08
%[rr.$f$:W?oR>e>Z6TP`F8cpb'KlT8Cn,=J8=qRFB1PSU+XIX*+.&hZ/.N*1"Kde)NkuqI6=betNbL^hR%#<(2,EZWOJBn_C<?0K
%Kdn3E'_,KgS$Nq2Bp-!k;jnVuaKlNe(aq'D.5>I$eI&pU5Ghp&V>6G[:uW4sdl=#:,/RkDSe<V^H=UGd*H!'WIB:F$),``e@%caB
%^11/CA.$<;G:Z1p(,fq^,)!t5_pl@;L-asX<$oOIo+&Z;P<Lh(^jaNtlrtGmbH97gOOf]+eg3O(;$Q5(IJ`Nf?Sjrq,;Bo!rkY<3
%D'0":i4i(X_WV**h00pdYKjc5Y)(18"XY_Hls1Q?Q=,iSWTDVA>%.JB.\Es1`3CG,;)GX)-"&-KY`;j=$+aDUI]p)3@6^jc\jLdB
%!X6DT0V#tHcX\5\%JAdZbSX'O(#/@SpMJ/Wm"Q[I#m6=D@%qic.*@(1<EX?6LTl%oJkge$aFFpDTtda+6Z-=CJ>SZJ[`/Gi'9C`m
%oM'!U$(;E=N-q%*!F5C+BJ^iZ*DH1NSLhoS7$mJKN63@-@#DF-I%9QpfNgkqkYK#k,WKQ4;P<^D.#,>i.1/n,P/Y[S)]rSPn_Gf<
%KCd^R^1#/"1WCU\f;/n3g^2/4=Ge%l)9+J;DT[LV7Ej?dB2toSen$*E&lTl^Zq3]*Q<uD93/fQe.G<o57Y:CGa_c8]cP_;>.&@m1
%:7Sr?RcK\C.msNgjTM<j2$lI@*4hU9=tE7P2#FXNIMQJ$V/"19,u^6n!l`,J$48oNWCjX!7'?"mZC9u8KLF"\2AtlV!]4PJ?.7Fj
%VsJ,8:XOhSh\Pd=.VL25@QVrG&$Prf7$Gh9;o@3I=lldeJY[3)U5V/kJ('AC5e9-i0m?)W1qSIuFN\N=`NkN2VNC'J!Wcn;R"\l]
%jgDIS;Nn.fo"ZH+eceL:fKn"jC12b'DO(B@:T:M@h@0h7E9eu/MO_%GDAnq2b\Pp`Fs[[Apf)PC1.RP=N@*[Q+?D('TMTN3m@BSm
%S>5dq<)5!@>Z<Z&BO!9@=G)$)aR1p76JmHrQ6]A<=KJc-%6h)OW.ZD>+uL+sp"=KW-/4m.I^UTrQo3dA9Kl2H.A<EI2ej<d#-)sr
%YTVSLC82WQAUN3cSS9@m%^(p8UkWE4SLu]I@iBBVZgqjYP9C#YaE'&r3GA2VZkLnnhBi"B'C<H7nZ!FKgoF&LVjVCq$$[jS71gQm
%6WlH^@]]+b4@il,1c%a&Ye:Nr@;.WQ4`i\PQ@`!</R:f:f;1fX?dcY(kfd]Q7E`KM$HG$TCHr2`(q>H'.mk4jE+Y.R4J9+u`geq>
%&TJN)STT$`OEF'hF>HdN^1kc`Krl&e9i+]c&`P..PP`1DInd)]f?p)+[7Bm@=B&*+6">I&+,0A#S>tM-!&KQ"2^EmjIESEm`]>;b
%M>L>ULV*o6-)'H'oq52m5W3hn3eCD3+!D>N]6FZQV']$[ZQMmgZ)EAj6Ctcq6Ad5&"ki-IP_ki/R01nQp(A!B4&^nZaCptAr;=5m
%lNI+f]R\3'X2!j%r;A)b1\+`7a&RM"NMEZRT2S/g(9[1I+nraQe1pm4;TEA)W2&^_.!:J>!f&E.5G6NR4SVXO1*G0E/rR7hGL/V/
%cuW;a@&Uu%D<C@$8oZp.V@rlAi?<(A9i7?66n_5XB[f*4&S`>0*[=a0E/,R;#pkZKAE./5j*JhB(q<ee@9rK5>W\cg,-sV1SK9$%
%@t]`,GKFB,H3'/chMbhHj_i;E!Euam+\`<%'P"u\&s[L/$;^S!eZ/+sjASlA/s?W>)\XA5ptH42f66gdqVKrV-!5%G1@(?j]X6ZE
%D)r<f_fm[-J3^%m,?.^mbn+2"Is#0t"p^irD^(*'!ogrc2JGsNHQLq*?B]%i<_\WBYU6k",tc?Ed6'ukTp0W(O?@.6ME@<j3E$#j
%\H12>PV;=;?Sa`.Q455t"b;34LRfbt6ScKh:=.'p1e,aSh$t3(@egCnV0lYC(M)ErMa!A?`>0FLAg(e]BTLX?!c."9(age:38Q>(
%0oV6tBU]]T56@71"@FG)dAMGD^1g3'o&<M$=AVnLLj/P-;L0:`a=L=f6i*._9NC;A$TfSlLm=AXh`<JdZ#^4!):_8<M!i8(XnguF
%FPCmfVE^sJBtf)+@iO0b[[Xh)b\4t[.KBd5(Qf_!$:?\+J/f5A%d%T!fEt,(df<e;\RqFph@E=NnTa+UoAlaN4tZKe^P%In:O;+P
%P8ZA[I"=t-GV5rE<6e`7Fl/I64Te1n=lCMQ$*%MG2H!V=Y/0H,3C&_=C-6Pk$q$g]&eTMf3*XNR+mP-b=D7a`A2Bhc,Zh3M=mOSm
%NCd8WbVP(R?C9p]-['<4mt.)%CgOW'c&^\Bjf;Lp1PkBs+-t]?m?N!"@Dd\sRBGQV=!BeFW*)@d;.X>SrGmOQ::5gE%&WEB99/S+
%L=tD3a\%(T$dJU7/?L]]BrT@P^5]s@`-4@P>aSIZ]V&Rq4#h!47W/ET_^,iP8ER,n-q+&A+Bbl2-IYaeG2I:6c-!QJ,+-"scQ.a,
%Ae3_MdrKUZ%Y7^[1b+UfRCoKuI+'bc<@T_iGUgqnRtoa.%LP8EorXp.f.K23eH`<7'+iI`k!"EcLUi+K2Rd'3(@/iqPHU/kmt,XW
%\EedZXXe$(6*+B$.b2[Zi:G:Dr72a2N*Pu@;+Y\O[GTR!:^iqdht><;b&h_W_WbEl8^k1jF;U"/Xl^`pdIrd9[`MuHU*\(qd)SRD
%7^:B<-c1+g2GmUteafb;W%or\'`57RO4Gmh4IJTsMjP@iB[+8FWS*ogeXs^;:uoQ7e"`W;aX[o\8X^-71?0)Vl3[^T[)BF.?L-_R
%ai#WEH8DhSHJ\WJ9:J=(%'pe4-._>Ub05L$Zrtg0RlJT'e]b+:Hlg#E?\c93aWfGMncVDH"J`[BMWS`/E/D[M.S@/oeM\s[L)s45
%Rk[%"5>0]3B?k1fmt`NAL7]l^g"_ufM+EWU)XNNqGLhq_[bh-b0rQ(VpomP4g\I`E0MB\r:,L_^'uQ';MB)k";mapDa9E*M[k`\T
%\N^YZD493).]3oLQITO(A>L*q2hEXR;7\'\5gV:K"U?8GFc6fO#3Z4-.%=ZXDsc]Ckk1,6>m;]^,LD2HKpHOQ)I/Gm]c\CToD@]G
%hbd:SWfJE$_NZ7!*,dgA&AU-q*Q9,7YK=%RFd*VO-Ha/mD6]D`<W:HF[):<)'\JeqIMc"MA#ejC$QU,U5m>`h:tfi-eu?'uSM[kr
%Qo$PaE0#]%--WY:g6aaB]X[E(NhM7d^!nMUD+PThpspW@JF/+D`\dH*a\_i^+RGst-j%6pP$q;_#!!(#[io:s@:kBH+SMe/IM7K&
%XB#CEH*5i?aPnQjG)=M?\4FY.Z0[Ros)tCh'NS?n/sU0A-qhOajF^I&m`#.3$[t=*&1Q@Ma,MY<Fc,R>r$X/S;3n0bSpdE?L9-(G
%N20@=:qP3%:p60sNYLh'VeM@.LbrZh188Y0)3hG+bW#X7d_MV=-`E'NDoVuG5V:_d98U8CNleK+%'H8p@".8Up<%ae4uWu5G8f.l
%Khpi1SnaPlb+,-IisUuf,a#*ea$2M;1d$C82k_)GC/c@_==VFO=^:]2WfRB%h:7.R@7L.JbTLf`.^Z4o7_^U*l@i]BeX]'sr%kW)
%.AuU%r/"GId)\T3PA&'+ND@'j;.\+o<7<k^ccb>@ZQ#S_18'RSW3J>M/V5mE9'Yo&$H&-<*oP2."1%`k6_;38"@GTu;(dD2(lB+]
%,21OJJJDD*_bNl*Z&.[afP(tuOmK!:kX8;P`_DX;)^1Y[L$T0__bZBq-0Y3QG&M:m8::9`T626)Xd]0EP6)9*7=nWe@&^WWM_7&9
%3"f!g'pp,N9J9/#C.GF_Rhq+#9;$.T(g9hs]`k&ID31]d6&"g]g`ZF'&kPO.G:?\*5HQrVc6STM7@'Wf2isM0[`^etQpsMh<mW3r
%1)opaIeho+s-K:AL(l\TG1^!\?"e)c*@RSD?+J+Gju@U/gtYK?9LG?;h(r3bZ"KI=:bJcAQMFN['.?5!\f[t0ZNiAD#u>Z1U6R-j
%G5aOT=E.MI<uSL\HEmFh;Q&`p?s5<F7B3D^.:o%o6^aG5;a`-cW2BSDPa%Vs%*O.?m)*@FNDsQ3%oBP/$QLG:4Wh6#VkYV,=tV;c
%*[TJ@j-aICX\BD/MNjgOE6qR)%#Rn$(L72EQUU+AT&$/72,;I_U/)?c?Zk>5F=fdM>7ADS>[aYXikdf%c7l>m@O"*7T*D5&2u3ST
%HW.@P5Rs,5`8R3$<4D1DL-?_Q-DPUR$&-)p;(tuUm<<k7m2c;Eg:V[s>`oV5pX;nN1>>Kl+UXHXU![TU%)jAMM_C#mGp"fhQ[B+,
%e^3M*1=N22W5P3:C+6+o,5$lRkr%-GH</_Hh[4pi?mHP\.Mj3FM\Z32UcjB)11*p&7?b#'H*hk37n&4'.c0i9=4Om+60sbP8=7Wl
%_Zedo#\-B*:at(<*P,<3%&;=Lm1.+*\s32SaN:8&V5t!53R-'(!FLH5r66^9=U:rgN)<R-dmnC=1aA%d3b,W5TifEAcoc9+".t]^
%Ur(\GY?m[SBW`:VXDk`RO1s@B5:q^f?ZkuQqU%Mi^.t"d)@&n#V)TYh4_e$`Pnp[3S6.?U`M57PK;@"-.2N#a_Q74UDo:L:>dPoK
%(7L72E56mojetIOC!^dR"fIIaA7=%;Z%/m<f-3P*EFQPBVrb7hb1S(eWA9V\)$MJ`bEVB->-ZC`@\oK.$<9C/V(-E6ZB<nZ=?R)X
%kKb+5eQsej>V0=$8B(Pk.&!F>.V,snl/G59'!77fRC_(u&Xk>Z,F?C57A6,%="H?Ap5h\5V!n^7iBjF01frQ7D[`?',8[4UfDtSL
%L4Q+g)<o!8_NeG$N4G57!&?'?d+$qh#'h%;_[^`c/<.&_k"tPNFQC'Vh`p=LdY4rLbKq:/-D_Cqc'GLkcB_39^?);Q&0"]d3UHM)
%q<8(Pd-^F.%j?&e6ph"]o9HNg)No_MB#a[Z38"@9"I<**PQoP\Z"P-$:K&,?!L-IB/*U*i"JRL`SZ2Q.W2h+He92SjVq-hLWut47
%Kp7?-bCYQSYum8rk<e,nS?9X]Bt5HDbE=\_VA:41aKhqeC2*u5`g?g2`QXM[R\=hVY:P&!.W]I(h^t&#oEKjpTF<t!iQc.[`=:'a
%Qghf,AQA?.,&]\H).>(l9i`nfi6fZdHPW8O'uj4A<Uqo#nF-A,s0c`?Uh-cp!KO(c=:;W\9"#YcJHYk"?5GAGlK)pd[5!BW7a/<%
%n6dm!XFRoNU`Z[s;!7tZWrMTmLp[rZEKT8`@7CsrPm0Oqg.FIWleF-M1e?IgL)d-K?oq4!93-)M*L2_[`^4$f0RP=,mpc7H>.-#"
%FKI"K%YcHb7l@X&%E3sA5,uM#c)B(,oO]q%iiZ)&]8]SI&L76u3clk]TStkoQjTmKN,p4rmi,T8J&]Wba.")o'58*o,V#@U!Km#k
%VQipTrcRrIq-"f_H,e3rH9ERc+)/$PBqsZO^k'N!eUn`FW#3EU@AiL)>&o?-<dA*V,=:LZA6M)4PD0Em5`+Y<TkFq,"Gb:h6BR',
%A2$?dL@i]`_F<5`))^C8=@k2C%$TZUMFa$R@W"_%P8Qp-EZ3M4O7SE+@P0D_bJK0h=E%14,jIaLd%L7XCPN4Hr,#7t;50UA\5#0W
%#AYm$5!PbiNbaD)<dEL/8s7jI!)7iS',MpCP9huXMAePZlTKG(^KQa?ILB_pP%"uJJ^=\-+1$d9&2cmuYqXhGSVKWoPl4S>M<9pi
%2A?;f$RB$JVSJu3.V/IF<YXB.l[U#0].mMD,lrf]b7JQHK=?r=:1Z8$NN32CHb6>5C8,)R5S7Q]b,XC+jLlhH!m;l`.Zg%<lE:Pn
%=o]iad/b0,&-PCu,X"#Fl+_($UbO^^o\49MB#nFrJn?Q'(De[1JMC:<CI/7]&c`A%5Tg4TfL?5-baPeeqAj>sMl[<Hk<uBWNF^SN
%dQW\_o`Abf!aVO5Paekla^Xr==<HjqaEm/%J?K=U'bH[i0Fe@Q-(;m'L$e]FZT\:'dP=ind01@nJC9DVU\B>sZ7E?5m+3_pKSKXE
%Ab'$"0!-6@.>dsG."M[0$Ya7q]g+M!7N(=6OfSm$+UI>*&:52iC#n-/BG."=]ZWSsl:Z98Z+-1!@!-3)oS2LBaf6H2E[:61'o;<d
%7sC"]n\Z3W?G@^fPT`IMK&V<!IA`t)'T>n$Ot;[%U80ihA&U'D6HMbS/hhi(\0r0#B71V]s!/CTTsGf939-YU(hAk5+&-o%BFD.C
%)J/]cMJTe=jD-<ggtpR:S,KeBTf2ZX7TS#rOBJl;CcB5->n'+T!@flPqT!=Q>3Q^]6jF[BP57(EP-O1lGd5KfBmsJ761hC':8>d)
%qbuQlKs9f6:iQSsXGV9<@4r1.6$8*TLMR9'9*(elfr-A6ZE=3C<^;gT%&=2[6oYB@K74'O5drq%.3$NY-bUf7GgKVLH\g?/M-8e,
%V1i3tlPQiWMCW9S>bdK]X5jXXFK+hQ>!pr5Bc$m9dd8#Q<#DEG]pMQF$nm?g451EY5NKKK%gql3Gk>$7lnU`_G%<h0m:XWYr:*n4
%GkuqnJV-01+r9OTXk:gq]d-l7T"i42Lm:BjOeMecF"4Snia=r%P(aJSCTQT'=pmI#(;%jp*uL3%6D87k,M?_--p;6%)i6gT*NB2&
%$J:NHG+mh;l^\Q[rfO::<tS\\4i>CuZDA+r*SVp@dqagPY#qK]E222WEa5$4[JSVZSQ+T7Vuf]rcMN\E_4hhl`Y@"KkOM'M8LS>I
%LoMlM"%U@-WN.3LJNX1fJX+c%'4-i2q2m'IisC\"/810-NKLE"*(N+#;!]BR0At(%f1*o2gI/G*YRSp-2cdsm;A'U*Fu(Jr12_!^
%9V$kDfjmZoQB@^#X&+a!+"Cldjh^e1W".+gR&:p/fncKVYfMe2>$P5O=SM3_"IQ:"Ju"8tJLom@,_Tpq=H*i)3#PghgF+6ZW;)?5
%R1R2=e=6pd5sh(m4a%LT%%<Yge;*c@XU+LgoHK\5fo/216VD,MUI"/Xo7[U?P1B'Oo=AJFZ\4G4<k'f?h9?ZT\68S)'(R@V94[gD
%!L5iF3,h4&G]DsCaZi]^G*8$UR'3NI+_9bb0j^tk43r#'HD#jfI"K4[r%7N)kNtU!$hNa4U(3AZBG1=j&h],u"7"5]a]L2/oaPFf
%1J%t6Cau`aTNrk3fmsT)9S#X,JM]0e0?qQG"4K492;SgbVq%J=9rl/\aH6_j2;AmrL3SUYPl6Vd7bk'a%<k@#<'kR?Q"2H2m9>\?
%(p\-JF_La#h[4FVTWKX4$>NLI-3p!>7'HejXWKCX^i9C`9r_(>q9-H%7tK,ml88>C@]Efq,jU-ka(1?ed=U*"Y/<;fRgQ(#"9Ijp
%<a(*hQ"89Y4U]#aN8ar52+;]=LWb"n]he]?d"nE)Dd0jTSWW)N,qX&tKuu%MU`'h1eN:]=BD+baK%NdS<]CP'lIPAaOY7)n>'MtM
%k7DORDE<P34<`Fi=b)4H8n,1Y>aKu<D?o-9*\L8([S0U34`"g#Oi:+O#l!WUH27'R*=koJT;2/!&tI,.at/$@Id_G?+Let7M@ZlF
%35pVI-=3p1/9'u%][CnuBs;dFKA4-=<]:&O)SH(YaSOd'AJ^Vk$7b-DMC8%r=&s`+]=]9ABHPZ]'Fk)O:,kN3c@6!g3ZYU--;mBb
%3BEUqFi*HBCBfnhMpQ-4OB7\i6*\d=>+]dI?K3E.&no'[!9sn@-FOR>'G`uk8q=/&?>]7F[`!RE_S2Gg_I4\sG;>he#S>L_!%e<]
%>UB)'$(T\80#o4k-Tf\TZF+_8Mb$L4;5T<C`$mVKUf1:f+?HF,YG>_Eft9`BmK6ojpVZ@RBDt^O$Q%A@-A97SF[9ZIS[9Y3Gghb1
%%lM3m"GREsEY?VX#8t"#qs_%$;1JI:9NIn<P1#VaN"QSQa(i&EaGU5aHoUT+H#T,LM91;>[2X19EQ7uORXFF:&s4(:[oAKB)'0Gf
%P>Ii*_iF_OADBi)XD0IFkK;!sGbVMS3qtY-]VBS.1BG1p=T06Vg%bd3S&1O#R;&D\&qHSt4["Vj3.9t+lhK@Dc']6L]IQTaatsTm
%a]LkT-PKhg:.:q)_U28=1Yjb9&Z^&c!AmZSM/Na`]S.0B6=Vu'B<_!>UQH,%+BCWAR<Io$oI.mV8#CmW^u/X1=XfA=Q$4J!?<iR/
%F&IfLLQcHUBNi*C&@gnM1M4<%l8;m-\d8rqhGVOt`>f(5$8UFUW1OLFaB+,B1:dQ,N[K3C87J'BqJZ:K60&p!&tK+:?1u2<RZ)BG
%<4&B^ba/]%ZK<:p_@0?H',7P`#g^Z$442t^.Li!'/<L!$X,\O3=Pt*73ohF$:*_\[ga[`@\4nu":"S#/=i>nhfbCpfGf%H*F*:TZ
%0ci@Se.eH>\M=2WlI.(IPS67UThLJ>@rXbd+=;bLecIfj3)\;([durO'Bm`WMm=NGW5O_@5V(nKmP\Wb?s*bE_417FfNX5o79WhL
%pI1h4!?sd+X[4_i,f&Og&NCafc0OlWh,AM4kQ;)^iH)?8VA#sA;'s6T88_j(AA5cm#F.I]A\f?E7crlC7+ohC91s2T$7@'!a%$o;
%+8._R)*#l.`!RDF]c'!/S4<"3Ydi4h&bKL6:t/j`PYb2<:``R+_G3cRluOLRpRt9$Kg7,2[IHN-!Cj&-/GWN2Q'cg5ku`_KTbn%I
%P6,.5_$AC<6;Q&)b:aRk64HQG=')$l?_;SHXh&qO^;T'F)>A?I`e0IhVo8`A1nm%4+Xqqs&<5WXR9lGPY&8H"'e.3`-*?PU9.[:a
%85a!,IrVXh`;UcZ%0]0MQp=%?V>$bC%_<lP.'9!+3i\Gg-4p4"q$%K4gC#N,d3l@0kYgr_1$]#YFBNk,*-^o<'Z>qQOh3/mFSUI5
%!W.6/*6oZcT"aiTg(a)63:(%TbB&9\@420X6ig)^Ai55A)N(LFKti:J/_E80M,%V!fhV'1?40!b>ZD6WVPe[4bD!N+f?kQkJJ`g)
%UJV\7+V5XO*iqI3ZUp.29M>_TbT[&o&l\4#DBIZ9Tqe`hM%63^U's<<B/7kCAtfUl36\^6iIWA?ZH9<V!JfQe:i$7Q!\1DM/c4N.
%SB,BZ3Dj>K6N6#@`Z[(s*_n(q79-9]</_pJ-fCYUhBet:]'2g)VU#Lj;$fqg2K1EM8SX;P'q$\)C3>9rluEr#:NC(Y$WC0,S'3>-
%9&`HE>W8,>?Hf@E%\T\AU_JV)W*q7\(u*F@Q/+c:F:0b]kTq*-]Bl7)'h`*BG;*R5[:1F0Fjq?S3SK8coWT4^fr6,';[a'/B5i%4
%Sh34W6hE5nVmu'.oA4`!H#FplGtb2:*gT,dhQkQ@U<;6.65g;dO1U20$GIJN_l+<"RtL)0E9E&i)uWS.Bn=N%>\RcE#&':!h4ZaL
%D!A`I37_CEg'[M)OK9O4@Ho)%>BA'm237O,J]^HiLa<4S+#F::6I!`.6hP`u(MUd5=/JW]oo<F:"D8JrXQFUQp@W7!AE%IuC14hE
%2Z1dFhPPEN(iLR'poji^jgl\m[6$BoN);aL'!'L62NCc@B]l,a^sO(L4t:(7<e_fDLCq\_7HTIM-b%7RC_FGo1md@ZHpE\7\HOj#
%!:_>_Lu?=2Zs=$n>4H1(>e["SESnmb&'V0"0<Qo^YG:CI9KU,uQgOt!*Oa8*U!8R;U4cXg-"oo)o,_4:gdNQJQh>3mH=q`,"V"KM
%:i_X-!PtHNbW\[(f0ehi$#L0'Jr%[)G0ue`rL!CYCnmb:T,f?78W8gq@:"tQ@Q\Dq6QG`7q-r%r1ZaD;[RA,H2TdSJY%9@@TH$*e
%&i5QRosJN5D`+.]`TiC"6:D4pcKr=d@N<_u1^\E97ia@\"/]^k]X`4B7o[Pp<u?MB.PrpTo5Ua";ZY"o^m(-A/B#nC-r;)OFGD&p
%QHdR85%g"5OdqtHEWbhj.XQH@*(DLsh5J9WDp!5IR7%W7OkS;sfE0&KV(RoK??NRSSj9H,kTS>s6mXDs<:+9gU2L0]_"pu><E`:+
%mVXQ&dDUhW(mBPA"o*7$=bfBs$eNK%S-24B%-*(AQfsWabF\Mm=9GmQ2j^G=+0oZZZlCJ_Iq^`Mb=r7r$OoQp[`jSCj>U2'A($t_
%G`^"@R,%lkWLC)k1:)JlG^#&V2rp*^etJ@t#)O[c&jJ8F,)k067WfhioP/@X[0n65HF4-Y-Z)^@K!mA&;<ZSKO`R$d2;*0fpeu.-
%7ab9$OJt"7H:m=a(a3h09oXE@n?HCE6;ksT"u,]fI;igQLnpOf6>"Md]N$LWN*WmCR2,BG>rl[4"ZQ;H=E5CMDj4jBL&ql-+f,ML
%-=9jQ<XK<TK*OJcg#8^:]"hWfa9>sD-R0/+D!<dufn'g`NFTJ\FBZOX7po&2\gf9XOSoq\`)$m-c'lklG4fb4N?+_R"NjoAXI7*p
%)VkZo`n&>m@>jdhfWDY7W%U+-+AKn)g20E=Qf,-,6F5N;'eP:89_7)VcUB4HK&fIlQusbub-V=C)K?m'engM"A9c=:b]1C#GEoW`
%muG=]DUb>]@8_e^S)q+fhAdL[c0-[^lDtp3H[63:l!7e`8Y-7,N,^Zel_\?:nE$H2/P<$dW(\0#dA)!(K"$(!Q>W(;dnpc\=*1!6
%5M3GSedBO<O?CBd8P*Y??]M+U6d=6hNG*')=&7pK#(tq3<)!9/a^$_tMK)+)k!^=[]bqH$b[DLT0"4jt'b)6>-Gtj\P.PCpZ4&[N
%6T*mS=Djt"Dn8$_hn#1)+/OhfSF"&KmPEpJ9fo`$2@\'0Qlln+*;%^WYD4A]+V+#tr$5@)7I9FSghrl0VGAr"<Oo\4J]<A?g-nm\
%@N/%fSjgR>Lj>Pg;Vu=?Kc/,N8NZu-^-.ohQqS,lfSc@6/Xa>1?)s&pCiZ]*!(bM1$t^):2,r>DWS,Aoo5c2KN!4sTZ)V?m"(DX!
%[D7\1[7`/fg0u`T[lga@L=$qLP,)^EX*B_bfn.n9Wf!edW^5necd+3*hi-*oFg*,#Y#!"WEGl.YU_(4A.M5C#UtufL9Z;>u7IFrT
%$)Q!oL3h;5fgYNg75e9&pRf1t;tVF'30TMWEsX1M!]h:J4-r&M10AE"XaYoT58QDqHU^pb;('X;hU3]-=$0@6gs$/JbbrP%EW2r2
%b(shMkFd*#<[@?nJ]$9@Tt)s?Oa`])RapJ>F1Of3+5,\(e;J<["lFB;%3U53oj'POCqo,s_4_aV!P5b?@a$2*$;:Jns.JG$i(Tu`
%,^'I$XYS]Q&P8@LgK@PrF:rd?^d+IQU`_r4]r\IU<8!*2k'31=&+>6M/PpY)m\C<_a>^B:-aoGm"P)Ktd/aX)-E*2A]=[UfOT)!X
%]:4q'[q8qW.Tq"eR[dJW>p\Am7,NG#rQV%;P3=?(R9EZjX*:4m_h^i"P5_;^Vqs*SQ4D.I0sr^0YrRL`<O+#oRs\Qk]1D6K[K.U)
%6l/u9F*bft_dk#-OtdJ7N$H^C&WoRUCG`UU9(#9L[U<1uSc:FG[4'_K4%$%o>W/Or$O93/8q;Zk9USL8K=u8V+0oDm5eW8eJul@q
%afIq(`Wns.S$2[&@)#$+d9mfRFWuQm8tNT89\hP'Oja_s8)Z6jn/H!#[PIlZOhqSCUdtt#e;_3H[2<m2g!Gj,.U1C\!\2)Lqc4E#
%,L;]:oYtc!7_D&/%b;?q7<VV'='3t=,RTT[k7IPk>0C!aMHD`tA-)-*7R/C+/1GCfA!b`T]NQZs)l_E-+j]-s%TF7*"Hka;6Lh%>
%J:),+`1Gc^L[3Se9F>N#T7A/(SJ"B%m)GAqjt**#A/4m40gJ;_0?g.t/IDS(_^:4b"%<qqZaT[$lGhVHQD1jHRk^9*ojjn18RICf
%)O>(MW\=Z`#WrU@'&OL#S,`^UYf5DTT[unB;(up`I0aV0Qm/2nCU@WRbU4mk/"%Unk+80<"qEn,f\ghG)IA%l*l1l(K\LF]G%IF2
%SOB?[X`DnA;^im406?04NPbPO`bq'aF?m8UZcQ&pRk4Z`MXsCo<4272ctK-TEG+8iYmI'Z1DE'Ms-(-jdlBh\d<G!;W7(?i7WiZ<
%TfD&CfV,Eo'mr@k%?NO97bYL;FHB<V.j*%4B9raDU0/@KLWTIF>l=Dj&pOW3/]q]/Q+m*$?_)\!6"hHh)qN((?"c(kGXDipEl7>>
%J]X^W.3"EHYW>1B&4*9D?u:[?&7_YVBW=0a2$Y"H2_B-VXSlf(9nuOWD[AE-;<Yt-o3a.#fUR\A5=sil.@U6)#p3o-"VEpS<t^N0
%af;<)4@$g\VF1*EEf!X1<A^>0DGt1Me`)29#.kY3NT'6>1Kbk1(A_QB,^/3YdNKQ"n[IjiSXIA4E\mQfBM*,=#@$4JS0144ZD2`1
%OIQ`9R.tOhDIk'IL4Hc`Rth]#h\8gp;J*gOV*B.NgON2>g;,Nn;S6!pHVn3DZOm3-II2^1Qpu(_j$*KH/&pXQ&SZl"ZZ^1^B3@iZ
%e4aI;l&a[b*U8''bYeR(GTou!An-1Ys4*%_ELb#\pW)E*ghm5V?4gVS*EX$]>[cZ>dGuK;fEM\t(rI1-)'E@iMUBa;5DYT>D4;>V
%['0pIMAQF7M+@iC4//@ZIB<q.f*"<rQtlY9B9B]H)E]!<a*f%)R>Gc^8>[SkW[pna40iXf&21'!AQe*`@k=B/!?uoKC(Ma3!X,^,
%T3Mo6htC_r65%Tc>AN6.YA@'R'"aUIS9Hf\U;@?+Hq8&#jS1cpFe4uOL8/8@XcEW1d;R[bQ"gNJ7f=*b>+R,c)#*.gT;Eh:l=BDu
%Wq#FMBKf=$N(&^0:tWD%cDP'Y/5tnu58US@C6e(MaED7Q'LQUV4Eo;r<'/\rNARJ2(KocJ#)&+aO=MD7ZFD\+5KSNPIS'2Bbq5]`
%V`S7`9&Pdb&Y7>U.c7:eZC[$GA6J\m)^ae\,^j"Y5t6_BG29)SRAu6U26ft%O;iJ9=qm^##td:(.Q6`#[Igfb^KbN1Tkr0a8<%mc
%6HGd>3t=I`<%('iH^?.dP7\/@J#cN.l$/?$6eNqt^aH%.mYl2":RXo0Hb/q<a:r/CM<L@iA>f9P#ed/VE^r.G8PP$!U+i^Wc>H<u
%A(V*Bq.[s(r+*2\7V-NS=XYs2&&]sB33$a'IgR-WRO46N=To)'E\kSq#"L#H&Cn^l;B+qNE-;gt<ORJG4=);tH157uXb0DLODL%V
%eG].EoEf8Goo<Z1X8bt-Q=SRNFKMO$eP"/#HL%'#rc4OOTTqfeK?\;`)DGrqO9)mqIQK7V*CJ>/lPRo8h$^pmRMO4G=-s$.:<U=^
%ri(+`Wj,3b1JSOHeJ<$Nej*!pL1Q_Xi!JHRL.6^g^ffJ]!J=NP_74=!`n!$'[kTs"Wm(c:$5N;D8>s@X6J]=-B't-9\*O0R7Ka)'
%*6BVuAoX`W?)qG0FE=.V<s_J]..#GHJ[/QjZ<<5%`#i77aQaCRI5m*@oVk^r5iY;f@G27:GmluTS=+WR`-6q.2P$ZW+ULD$Pa&8e
%EVVY\?q7RHRu<A1K(,Jec@dm()$S-Y,Zu\)4X<kRiPI=nU_oM'!!r\n*33rCo;'R0Uto(I#[.$[HsE?G$.cOuhqO%B=436LI]>/E
%*(,gO8?A$?G9KacOUc+TP@f9`U*Cf&@AS;5CaXZPd^2X;-6,0p=UBhq)qo9)ZQuAlZ^Nq-bi"kW=b\LR)_03bPjH/U=qrd'e_<IA
%&_P%meZ:Q_/O`O8iJit4b!Tr3Kj&OE@C&6%>qXA:d`g3/`eJ6,F3Q%h@Z5n*](D;OIFiU#U2r0o\$XQVYRAV=?%`$Lk/MjrblrL>
%]M9Idn\UEBi?/E&hF?ph\U?DZ<hBegORUL(pC>EHED"e@Kdg)-<>]kIg=JC2"lq?SF^7h02WcCKNT@eGg3"Dc(9e!p(k)K#+f."c
%G-MWXC<S3Wkk?O^1?,en149c@+\c0a*PEb+[0bD']2+%X%.#Fl%GAZbMI6b.KKtn_aADEFDhSL,<>%?eA=qV0r)'D]ec?&P+_$,$
%b=J-_/BM_IY,h9K1u0YqMg6D!OZ*9bhGU;k/9@`n/dkVtZ'8JUZ8nQ^K^5[aIPrKg`B(opbo$s_OM+*E\l00p\\DmDRqVSJY$:J6
%VUeFk])>[@&We>[1sR[_1NYV(*5ZDeh3+Fl*4eIR1.::X,,al[-Mt4h8RK9!dWXS?d0uaUN9GSY("lk2Z7st(Oeu(])1h`CLoI'3
%Il(&uCnd+El6Z)*b*7Q]Tu4NYA<Wo5dTj:Q5'BLbdQ$j/V,DH02f`<NDPOiqnuokeRG/LYV$%aQ,%i8cLu)\nb22W><t<A0jT+#`
%9XYH5ii=7Mn1>>fYlYj38u)/=^KsfJT#Thf),kC^>E]JFoUQJAK%$:mS\_ja"8s+AiP`Q%1-`+iZM8_2<&6R^kGGCkZm`NjL=P;S
%M[ttXT]GFXr46SaeU<n&b%`j*<N$EB4;g]NTqbl\.PU[$V?=7(@XSAOb47u*=&uU12EAP)=,[[uPO,4#r3aV_02hDJr/9XjWIg!G
%U7_UVe]MnmMFWtL)5out/U]<aG_4^E<#8HLYlajMKWL;oT$c\4N$-*0&IeR.oJ21jBR(7s,^&-4X?cV_F-8pB2`MBa'p,bo:#EEM
%h$cHN0Cc&ALHB0GUW#k-<u=\Z*!rgsLLt]3Ta"-\Anc+;)=_6U*"a/gH&,'#2J!\]m0Dk0:SIftI6gL!<4Xd@5=FCX$N28gkcZ=)
%.qgc/S:nN5r-K76XdLNL4F/;1<9R*>(Q]!pp>I$pU-ZE=-A@EUp,jiX'Mt(d!"b=A!#;h.E<_hlVAH#N+g!kI63.s@4R?cMbRCfO
%Y=ag$BO6drN;,>%U['*PIjJX.![PNGVKW5rmD)K:8]k*SIZ-e.hskQ3fPg#,"#TADZ)\AAYXqtS:>/n$59&h9O$S3,6rj?g^3Z:@
%.,I?W0uW/%@*1FUCaemsGW2DRK9jL2iQ)<`Kf*!%"s"_*p/t#1&*7Sbn=!nZfU/&OdDj)B4j<E]@Dp&`/9YmK-h'Rn6Be\D,ATJY
%+suAb1`J>`)j9AGr5s!BDraJ[<?@2$LqYE`.otq4Q5N4]24+g!9gdpS`q&4i:u3/=%_&PT;GNXkA/DO&jkdu+Ns$7Gr'9en#,P`'
%;itXq]Hat1)q+eTg(gsaOTW]s?br%a7U1X17TCp:\_t(BT3:#Eg<<8j>NUL^lq<EC`GX%#?7_;IHM8P0#E"4S].R%C*3+'F[61H]
%o'DCE>Dm'c;'hih'!e7c.J^mH7lff:=meABX8\,]j_kpK:]<\+0^Bd[adE'U9_&;'.p"!=_7EQ$6nSp)UabK@FW^O?P\NCIjC1u`
%PVO=`jI'h_.osQWQ)Lp#JZ+$Xg)RjPpD+p7.`.#5j?aR.-NeGW.NU"lbI=af&#tUIC*q-.Ipg4Rh9jRZP`XUR$F4]q\hC@4j2fcp
%^.*\U3\1bK&K/DiP`KI:IIVa7l6lam^c;`FmdcI4N`eo07jg7PDUM(1ZdjP0'gc=9]'&:"<ApeR7CTG$8@N%H2UO7E6E4R5l^FM(
%[DY``^7\=^&=)WR?8Ke$$S6D1&(Z/.bmQSS6>b$dW,?i=Pk@on'bmeY]-,eRK(aI%XdU2u>c0,@k)^OJQ9@>P'5!?0]E0s_OF"EE
%+GtGLJF<Cn1ck_4KnM6Al]TPT,T]cI(='fJ1@Y@Zgu=g*a+pA\*)1+-_-T/FWtc0jMV9[WJqPP/(\f$$L7u^9]+*>><.29Eib^WN
%?H;"o/W<=\U4c"N/kglngfH?:$fKEs8^*/8\>"N)i9u=I$BR+Bqd=FGR'cOc9e4O*BN?4]gst;CpTjH%IOg?dSbh0^Ra`C^p2S4:
%V"A&P!^)Ia#.l"g%oCM7T:MYf5cNJAP)8L_ITrXs@Afe;%o=1LhM1<09Pq!GI8A>k!P.Xe%_?0Q84;kI+p^..,&**($5@Y/;[7Yf
%ecWYnN=+#574);+fAp>?Y(I%PLtXjs'T2/pLe;RgYosiMm!g2"bCmVN:R,&kW0i<q2lnnb&Sp?"i69ZA!cKTVHt)^3A3U/_U2S%8
%BkHr=/]#2rfH<lJ?oUX@2P;tTcua'2k72;pe"'DTjZj!'lU%S@.Hc,E#!."`Fme\!Plu\X=]%GPB`Th$FTCLc6%k%oV?mUI6jV-h
%2$j'_rddOJOWfPRepQoXdB>p6T$lYu[,\X?"Bq_*g^HWB'c"sW?PgM59rK#j]fcYDBg>a/OC:t,9oie,+&j1rnAC=JCC*]9h[Ss*
%&W%-8I:!8dP>Kn5WR3(AHWna=@=ija9kYT^`lMg#-oPGc!@KFlSpYWB+okTV!d#<tHiPWOW0,P`XJFi>C-gO])+)!0fYeKG1GJ!m
%TbG&(+]f(,e7_pk7ZL>XnC^9NmO:PK8P$h(5a`=)VYKe#W:"/1K3abcb7+W)jL\jE/)DZs71Fqb+erD+<]4t',YFJJXeg]H78jFW
%6=5UqN4OKZMSKMBB`joC>r1\_$T9+<Qo@qo'0,@r!l[MALnh`2dfA<'o)U+`fUL6MHk6C.U1EZ#H(uc8@]EKsUd2*bXWn`T-9U(b
%.oYIJW7uRN0["`XMl6i<TMDc9?DsOXM#NG6Ej2.jk;q)KfuA88^ea9C]*/S.6sjVqA8$po1jb?mZmJ2K4l@1uk-#e'EY+B`EX8^?
%8%*;qYP&:"fcaQBCGdo".u@0cZsu-a\,/lfFd:nCCP@Ai,$.A@k%DKg`4O!S+,B)=S?K[k1&("H1(soIZpKV2eA#"^8nSPIUceVq
%'^#KoMo\_4ZW1LcO5`lIaf;<hl=g;JKkQ_kS^%p9?HH&,V%@;Kp=kB)ESeu$:(mTn<pE$n"2+t,n'5QtJ.CH=.fZA9JTq;s9(P(W
%<;[)$AHXPe;]Y+j2K53Qh>#9c5l;I`gOQjnK<oILk9Bs"h8,[8:e2Ib8?*ImrLq@`,WLaPBTOC63/B^!?MkN)iu1':KW7<uM+iK!
%9cECJhQ/5I5:^'cLXp(a#aW&\pChI":rKs&KMjZd'QdIk2$;Yu,R2_S6h<6KA]GVOe"KN`Rg([+[nF?QB+N0GSj(H@=Ijf-]#L-X
%1?ARkeG+iqIN_Z3aRJ251VP91aq,;FTFgYu6s5,<$b)"dAs8_$0M`b<@Y6=,L2h/oqHm>rKs6f546HXtDs(+2[P.!D5=%FRd&RV,
%Dip'tmS.)g^.15*F4%=,GTkXK5`UqUDAni>$FETuc3igVgD+(!f:\_Ai@62b8>"fge\8A,E'I/b2*XB5(.O*P#PfqK_IQ7[R`ip<
%I.]iXPD.mQNd.H.21'61YS'd[Rrbi9>t@Fp/&&pSb`:&E3&8R(>A'C#(Y8Keq+)0Foo\Js,q[<&=3q,VHPmi@S5)*shdB>i!G*5$
%fSoU3_mqL-W1p_ZGAAco%dUV8.[="uEsFA-CNW0N`F^.T5R#^."Sq1,`0iq2]^3fg=<rMrcJmF[-:G_ppT9c#lP]c6!1M_rC"&""
%ZBd-3AlX7ujh`o`6Db8pC$+d?kBXmQNQ/-Q:hB$TWUNU_RTA:+bTd5fKgRTh!mtE!OR^Uc9qsq3bJT^YZ3m-KfGClpe%;;nPQMZM
%Sre=de.JIg-73&!P--@_ZF9h^W=VGif@C7$`.\Ko*-ePB`oKe$kX*8K=<*4j1Hm^PGsM)X+]@k-Ksa-2,9G44O,Q5S1urQVF7`OE
%m15jnL.amq_[.enC<Bjp?hE)V2DnVE\hFB@"0PM7:WVj^Y;NN@bp\RZn64#1*N1)F!Y-X)"0u0_+uTY<:Uc,r;L8$[PreN;OqI!5
%8R2ej>I<"QpbT%B3_RQcFsEFe8]Z/9F,a%M$%g(4nQ)q"'[,)0KemrQq$]m#MJ_^N19*XS*epR>&e3[CI_I`4ZQ:4/ju0;!gi.Qt
%?gnBl[Wb*X%cF:Y2P)&KW.aYoLldNKJ>+g_$d"?4Msl:qAAMIICo._6OGf9VA4R)j=(f>/a5CR)g<d-cRSPee+bM=2*ip:XG%%FI
%ckm#[l6G<sSk[2]KZ[REZmJF1S2PYoWtsd-E"CMUJZ+obcS9NM/UfB\UO&Pp?SkW/;b'pYs/T/F:j^<.6ePUgUEoeM[=f[geOi'8
%6/Kk"M@`r3:XJ2+Xec]+1^S^c[ML9U#Gi!B4Cl*)L>.?S@M`MYGVLt7gd"L^HKXg-*&pDm`0*NK+YnEWVlIrp='l(q@$X,b"oE];
%\&H3OX=H*p3n>Y9/!?od6"LH6$2pBG(u/N-K9ZcEMk2L6)5p^rTsM%<Bdd:!XdBCo:g]nd2d"]$M*iEn-.OfEQD6f`'F0]1BKbVC
%ZCuk;?=Yp4#c#!Q+][(0Vi=U*Klk^2ZWbP0UIUDS]NuI9**j"m)+D;9pqt7!rU_Fuh-&d9-"U9o8FefHW#ApfaI5ZR7h'b8GWd2C
%Bu?jra$RITO>q'>QprBNM%2F?/!37=*sR$.7Fo9;;OL"=O9?;0c%8Z&ME):%;C!)H"+hSa3YD=a5`@q+DK*E0Y8^'+BT/(r*;j9&
%h'/%*d_/V#&kBQI"QSj$3:Q6kaFrd.Y\/(5KNBnLSk/PprMe3[OA63uL<HG.QbnJ?`hG&eSb8BsHUB<i,V#9@X+n1#WQYIQ_r$/o
%l\9,V)Impj_.56dH(A)O2P^e=r,(]E'*/5h!FZ)r?'nU:G#m.=K<W,i^\6Nda-/$cmX,hDn%]aQ(b"\)00N*S_#k'9bh*i[78F#[
%RZN?i@N4["%"J/2oiq;]r\Ln5bpnu4p4uKqmYpp2`4>6@YA<eDbRO\34="f;g/9,VL(Mc/3l'6"aEKNE`s:(,AUD6lh`8Y(0jN.X
%#U2Wbc5;(n>e7aR9Qhb1O=.3`7TVlEI+u=Qh^mNc^,'L3@V,W!"etY:daWSgO9-qH>pBq,0+o-b:DKE\E.B6Of&(5-;$L&cB1saS
%S/RMNiW^1[5j(E$TNDn6;bd>BV0jC7c$grQ-cuQ"[F;rYKDgG>e\C%)D`'9PLd56c%HNOr9*!5:(,+j\YjZ*r;7!;=RZd=]]%=.l
%eF)#hj<u0[TGQBkmPlZGr>?QI6%*Z9\GN&A:c7u;T4'YW=n__UO8PIrqYI6X^$RTiFU]<fPp;["#+5U.p(.p/I>Cs/FT_4#Y8RY_
%9bD>8gk^fnIoL0n]1%7)=Ytaj8V^=Ks$ObpOFU:9o:!)+)U#q#JSq?V[mPKqWTangCfCB\;$.r3$WF?eg'K%rgc4<Z24*(;^bEj(
%R_q"!gh<Jo'ftLi0>)-PnA8>MDAMd5C)<hSWblJnX*?/t'1Tj!/*&n6l0FcsffeIN-K_AT]U4I.^dNb&Zf<uRNESTkgeo<#<R;FK
%JWh#AY1lp_jtGrY5#X4Rh+0&t#*aIfW)`,D[__ADeL8@)\k?:1+O8Qa/O-]O?tI>T(=tr##W;Wc9bhD2SQZ\[`GPaNXR$m<:c%\T
%S8S->3"9gb8Z*%5M7TYh'hcNqg/6TVdB<;RX1IQqW.4*HY,m^qi>qOe[E#o@eo%eCc-ZnX+f->kMguH=H.:_HcW=HSOOBX/j.(:W
%Y=Y2FK+u_4Ls9Y9OL4s/H>e"M^s8$QHcq-N#la8OF%JkUTX7!CLUJVb*h[_K(9J;]RA?\ma%3COrcI=T,e6F#'KhtCe3*:c^;F6>
%C'kfd[FE:Z,2a5m66aHbY+/MNjY1rLXp8QL\"GfK>,,7\<Nm6m5qpIITmA_r?[^W@X`&H)C=I)YBp&*ZWC;h;]F`U`dHsK."/Ofu
%>:5LGM@;*(G))CjXFt"?U0`58bU*M,E&c9]+$a%BOIloNg1C7&]>HcR;4uIW\nE]`)2:;S`Uo'u*,,DuD?Ct1:GGL5EesE4^J-gN
%5+7@9s'"i/L??IZIf0^'BWW.)&>b%%6Y`[n80pmg\@phe!qYVpX[H%+cp=[<iC0YDN<e.GIno3'ab6DkbSc8+/;j2)a6\O)(5P_/
%&6I<-9jjk/OQCN.mJ%<jp,`2,mi=*Rdo!'r,)mp>8S`%s,,6'uI0TJ/kQm.KXfD@@opA'L1'D3e#3Et4mPV,MbCKe&BleYV=Kb3e
%k9o\1\Y26#*pZjRkOf</g/;kR`s8#AnB.L/_onj!nWUh2pX:L=n``iBMu<5eLlh(Sps!aVpA5AMr9hV?s5!D[0HlTDrU<V?s)7r,
%h1,8"2o#/!hu3?)hgPORs75!dmfP<*m8*]*O8nk.msb'!Wunm%r&;B9s8/F;r;NVor87.!.=NUlo@JKhrHH$RR;;ir]ANVWO+6rL
%Dt9O2qVV/:\`Rp2Qbrtko?6%kprDiQqRa7`]?C3&Qi;d/J,&njpuD0U@PUP?r2JTP^Z'"9\uF?^e(=Sk5Q(59s6s/9:d4411V02;
%-_L-l)HU9upGY>9n]f%&oA^@2r8G9FrMP/Cm^GE/pZ!?FnI,<_n,Mpuhd1eW\P,3]^@I!PjY+:8$qC6YYQ*GIJ,bA!qq^^*r'15S
%LHg1d72&V7kcXM/s3mInr#`]Nl+<"+pmF@]70Et2F4ioi()/h,UXhK3cp`\D5!hiHcon1r5_F;)l-9.Ncb]p0pHmM3L\L`DC-@[i
%s/8!k]RP=b,7IL+O`!-F8I?JSkN?2CG`/e"/NiM!oL`eYMu37pVnX7[pWrdfFe?T3SOCR;%GH_OTH<(@UQ@l]p;ic95:(Zdq9MLj
%T3GApRL8R4@%/d((#j.3mg.qaR*n#Abq#b%l]B#8NIE<;SULB_"%!0`_ufPkifXEYnL'%bm8'ANc!QO<V>BW'1B#qIfq]nP:EPe`
%3)__4(q[O(B>5L#s.^ZKT33B6TVk1+<Ta`IG7.22DPiQa882.["&'%2=7W19MUZR42<6e_G700cm%,;l[L>p4B5O^LJ,`-oegR_)
%i`FN)FREA5LJh".rR6f?hB79j_KaV/f.qj'rU\@mrH?[3:-UeJNE)-`C(1sf01F`S$m"T]UN@<)VEI*A^aFhsp]'4tn1CB:-k:3O
%6&KZJj&t%!b_ug[RV^$j$.&!7TDHf>cSss:'LMZrnpF[,4nuSFrUkF4om$B6lgY`oC86lf;Z%VDBdn_/\hYfM8(bb%-C76t>%#?5
%#Z,D"6]TBj0n/CjQGmM.r7cf\;;9TQSdig=a-Ss+-UYQpjT07m,ZPo4rVJ5n]Z#6TB]4RrINddISq$cfpY.EL4PO8(;oj#ZG;t*E
%Mjl9X#bN/l!`_h>-?nAH8`@SS^RX9[T7Kloa1!2+(=h]KSE/^_N,01/s/`L>?pm424Ej#<iYVXF++UBRJ-P'N++QS"<k^NnYK9cf
%f_RI3q<J@^YNl==<]i5GYcBp&Xo'`60'XqSSBnJiDF(*^-%NJ_Q@usrMYAZLeoi]W6e-8PY=er4jS]RtjS`lMM):I[jnq8J/((=l
%MatDoD3rC.#gYRs4\G0]H[a!1rjO-HE3`3';WUa2H+P4aPI2GB_P\2:MN:ddrc@raL!R5X\]^9P^pf862FQuR(K-qIFgoP*q8."I
%]_)-=djKY>f4.I-L2+!g\piCF=K0)Qrp$ukH><DZ3jh/t0Fp<(XcWU<qY45i+V!fr+D/-[))gksa]+Dl$V=8/ja5m!TiL1PF12_C
%fS9^1J53M006M/mIY<Kc517fg_bFM4m9@P_V*@0)Knu(P?OZ1En#+c8J)BibmQl(ZL(D=1<gEETE.2L&bb]HmPM_hgmKfF+KbJ&Q
%+1TYkIp2^<"/"\urL#H<bdtE<eWa(eDFTon!Z>s35fKjD,QWVgP&0^qs./Qn5_jn]7$THO5Dit8'`tX=br"Dr?H*V5ht`_7J%@6H
%pDY-7E0R;k%CXf'&@Gsa@6Fkh1!k0f\heag&K3c"fP11*PM^ARaLq9?3WI-BTaF&E)_B-+ojsC\(EiH!<R+qF^)`+*Iu8SCg!>(p
%lb=EFNbV+nWJVV<JCTjI%S"^*(<D\@'F9;kX`'ecb>Egu2EV&2Vo,j&<)a8nXT:TX0YsL!MJMEIOUbpR^Ijpr(dk,sfA?u6l3=O*
%k[il,P^F'SAC#H<Ik@-"=!Ehk9/KhbLoC\,lE4bVrW<-JU(WirXt1-9!j#Z1WGt(u!&4^j9NFIQ[&DTt.?%]@"b_Us:Z?9,CfXRK
%A[9u7YQI`VegMUP34tFB]&R*3KL2EsVb3][@n7<uLuVOFah\BVG;?a**J.IE2,Vei5U\/?W:_H61TC&6?,A1%V,\)#R_n:48V"^7
%IpUK=o[]Bq8SkNZ9sg![)^&&NUahasLt82B1>]!Z7q>0O@K<h1hUoiHL1Apt$JH_:4+";?J!Xj9ZRW9<7DiY`4H4"FB;fgDL9R^_
%;(Xo\+Pgf&;JCU]Hc<W6`CV9A<Ja&Uac3=WH$u.m)3K-YgTC%>SOK#1!nO?\'4)V,d7tu2B\o1@=N[_+Y$FoX7f,;0D3HUgBID.^
%%HNn1ngGi=&E'r9-FIfOajbl%*'6uLB_ZWliN8=^Z#'+tFg_Q]!!7K`&?D^*=:t!bTuGbk3hR?f:sp$h321l8Q86.1T"b@$CP[pS
%-Nu\.)J:Ka53g9gDaOQkDHc`-)N(d8ctUEGl35%?0a6S6'KW<rq(hP,!a2)=d#Hc_-aNX;XJ;nDMqW$UiOXl8[EZ>ATnCs>=u<S_
%ToaSreBK?(&W)g!oEoh/rj?0>4%fBUkjsWgn7TGTIt$(/MG,PF"Tg[)D@8"d3oZ%dEhKTZL0[&P(aFk($@GRjA.%RLS#IDOH;dLn
%b&\>+s(+n)"Fa($MGjmZ)mDoEAYL"E5XMHEVTX&].LdoTENrTlRPIiB.m>@)hJ(J)"]29@*2BmN9[k!L"G/d>qTG8>mo8VUU@).G
%^fILQ<1PRXHW'/q'=m1=5&WA]U_[1*"eL*G;=-6CUQ?#5&>eCn6ntg`#$\D%K7cuU/Yn5Lh4.M?YZ+o;WC'?rGj5>e6Dn"$BB,P;
%-_uPnNl#[6j9nKAdK6.koM<eJ`-lWuB&TZoYZi1sMXX5-6JVatr&Gn@2%)2?h)Kg>7iL>0+BF+E$kMeB=19$V8`P"<cW<>+9[6Ad
%PO)r56/0B%ei`?b+cnIKe3jg&UgEW/psD,9S@kr'P#?hI>ZYL=]W<_kg19898(Znr(DUs`.%9).\85nDeR:FJV[:1C>n:=HTD'$*
%[AH_2G<u@m7*ertiT0f7btP-5'5:+AB4ng!EJgqtVeGACOelLf!IZa,qDso;FdI[Nabt`T1"K`^8;V%tW(C.P,TL(L#Ue0Z`Ul`]
%F^Q1LO#>0)Fc9.'>pXT+(-p\DXW;-e77FNfl9m#1W1mGI;K>^c,F\OXMUd;+hCS4Y[0a/KCIdEQD#qVu/<Y-&C6s.]iEgC+f31g&
%Y#N)r"D]8O3s@YC:'=RcF.H4"jfkaN<Oo@<A^HT4dX.6k,O4*LD1n1Q:7=ag@#]&2aV*5qGTtR2U/(tA:*,bUi5Ms+!/d9BD&7$(
%A1mkYGNq.()ER=^CV8#53j0YQAfX5@lod!%SK(Ij!<tQBO'U\/[GJ8fA?Kkm!(R\p#%joq9]c6,oogH<=j2"c+>(qW9HBKYkt;3D
%gEiJL?d^E"Q]](KKTnnE13TD]Ob25Y^q6T[A546!3i4uP@oEs'3^';O7(0%<C28J["d;I>ZEA?S.FG;leP?X^Fj\<4GbQT)9RA+o
%h8Mp`S[$\<,(75FFQFINNt0Wu:,oAg28lpIQ>&ff#J<+;'AZLf-Kj^72b2?o)^55;rKQK91@P'=$)`V5Ntd_%,ph"9iN*MF>t@q'
%oa2IEfPhBeU]r^b)'3Qc_1KnY00lOI?K='i':?h"I9$K!/i?MBN"rd?_JpGsfGSO(K&4#aQ_W5>U3g&:AgZ>S99mH'UX%G&^F4VN
%.Qt/q[]F'^-qo#>H%9;+&&0B,*5rbsI8[$J8-].d0Cr+W2ts(jj`p$Y$j_YK)"Sa1`W_+XTRA3Zqg]X.)N`X.CBf6J9FV",`YSub
%5r'ikUh4%LKTe.q"u+e)d$>@&\nH4H6X:h)AT?Jq)5T-70uD&@KY5%KO*9C<#&C@<n:>e<ZYlF;FOnj2fB@YLBC7]P4]i[]X@'cp
%eXbJlc,-S72J7>Y-P"N,3&YoSC^-+5$PTj3k7O*W'1&V&@[,LV:T)M9B'VaK8aY]b[q=lt2F.;m_Aj@jT\^&0La\*H>;G5,efjOB
%!Xe,_Dm'jUN[Wq5/HP\.M9W_arfM3-A.d!E.O"%g`g$Hod"@.=9,g.B-%<^JHXMa`[=mgj[>);fDIP%*]k7u7.@nD*HAmPY<WHa[
%b0rSdkn:6!"OE$g;np3Y=`(sq""I-uBLF027r>YA]8'Ng5<n5W:Za/L/%(#MUpf]"/sQM!CiO#+37q,H)rq;C]E2K)AC2["Q$nVN
%`BF@AQ7ES)+`L@cX%H!*MSnQsHus8KQ*:8%,5$_"]>]nD9;p$6P,&0L",glud5^X5,nrm65HjeZm6dbSC#aVlYcO%&c#VYs5r["r
%U!m)t<F.#p>VS*j7A*=8"boVkiY36#p+GhUojTC0O_1&fhPOptqMBg#0jk"t4[H\/CD<[N0"seW[+<)?VDle5]@_TA)^&Rq7SE#L
%F['3@+U@e'h:QTA%lQi$3T6R4YV-2EYS_sk[A#<B+G>X;o8?er0`)esr]4./hWdBd(,E1_,.+b6&AEdbUn/#$ET.+TJUM>%Gqktr
%h:6Hm?\g6/0oJq5dE/*Y=H&oplqOTGW=;f(%Er40RrerJP%%gi@G?n@)rTKcN2"i^XbBa-kIGNVY`uTO?9O<#L>F9t<iU_(0lC#T
%YLsZ*e6"%KKE>K8@+%=TiD\rE>d?J]kDm9"WPKlmZFY>1/j`WBO@=8R;O(Y_MT9:rOpd<S52sa*L!`SWMR/ssWANMajZMdHXk@B\
%&l'Cp$9rXe^MB'IbX_eSjW[2!YG3NQg&*acM4+u$/2jCbn3*/fHYu6<RFclZ"0up`ELaYH&[Jnc,r45=C9D(b8l@\!AR>"tg:=VC
%ZR71m]b6`<,RsA:'pE3nYY9Y_:XTna*i;SM:r:P'0Q^V>6na-hU9H1le@JMW0KpUK4@2V;k2]T/;n>9/'*JP<BBt4^J\[a'^M>]F
%>WeAuUk@a68W_!"(9>]I+rDC8,rt@*lEVV46Z'&iVW5:TG045r)CeM!:A+n4D`Mj-!3)0%dm>h&;T/bn:)%sHisX#0,4l;?K[e4,
%_<;WFW7:c^Q[rHnn,g:DTqY;%86)";D$)'DQ3e!Y+BR(Y%=$J?&H1/uA:6)]o.!iXMLE\Si"D=a$`$1%I_[fB:UaA\QHC>k8XP??
%mir[EE"IT.^e,>\"7+#6n-R`NYL<Lh9Qp1o*]q&BD9hR_,(R,^rO>:j&[!G@b]2eI,guRL*A5!Sqm2aC(=>,2K*<'b)TB3$C*iS`
%i(X(f)r8<*j:toK><kY8PRJBVN<Xn^hd'F1I.$8bP-ZB%PXl<]PTS)H?o.10bFGKop,7V4;Yd"K_k60@C9#SM]L-B@q?1@[gOC^F
%NRKHq8XU!X_D;&b4A8Ibhj1;r)q?u1G9SmO3lo_f$Gl(X^+Y\R)J$^dg`=9K:@,8oDHVGk8@Wg1>Cbt[JgUVn@fd?$nU#I36V`d^
%OqXM;RA5k?A3#l4+X/hCJk_a\3gKBe]C%JF)4hoj6:tDF9ZRA$8VM?"c8"BKVt)gMZe72`>%M+$Q5.\$nNa=2["3=hSH5iZ^mlIJ
%b9lu"h#%5DrRemegHe_2bV%jceAl,gg8\O2FBE;1;mWHn4)YU^;`q5k?FBR1k&A&/mq(*5'9SNc^9PGKf3:>VEWLJ\5/"$#=XVQX
%g3H?:?6g)[e/>gVr)>ME=J"I?*2jjoe$L/i=:E?!!^JRW&<ErhS4STZI4KU0KLtjXmoB9a4,%*f85a;AD$rkN-kd$*[eW;YNZ]jG
%FBIge7g-&]Inf,s(ku3`_\Qh&V3?=eZT&-D&DnnY7F8Nnp-<k%c5l\I:lo)NM`aI0K1r`l/nBb"f"2Y`=_r9&>@g#O`D4?*_4e$X
%RBZ`7P[-'H7X?d,^\H5hZcE7pY-f!QnXRcWIWo.-K?GJ@`=VediTB)A8g6Wp)!9'.q*l5l,,IbulM'BR\M/=Rkht%WP#UES#uru:
%OqJ;T=fM!XpJ#4QTEUTt+F<$Z%Q$XA5,j/+Q]K3Q^s/jb3=0--5aY6t<oMPIGfO4qL*1Wnn(=.h]c5(]a^FsFUn6j71kgh"*`2X#
%f:"Ppi'PNe(+p`fB$eB7A9?hfbsGEd!u*_LZN5Iu!='ttWTUVG9`7X'5mt9%JDuY882*aN+h:33r%W)jQ(B@$S!2$1$!20A81[`7
%1@dNqfa'KIJd-Ms`JR2Tjiq-*H=Ll(VI,bZ&SIiHW3Z\3`(E7q&a>%E&eEEm7%U>?R!6\0_mKTk3GK.X.;(U)`5u'j=aEJ%KXLF!
%;[(39M3#_:1t#+PbHdl3?uVP+.BD9^&Y;E(!1-%ENGr)&>:80.MASl"8TmcrX[/_\nSkR.JA07$K!W?tO?jR\ab4++4=*,tj:%$#
%AT0n.i856o'YTV=OU5/fK8sEu8!ICf\5<K/L<\I]T5:i`!aFNdokq6JK"%J/Mm7+q%*2k'Eu78Qn%stj*]?6p,;A1M.(,$XU;opB
%kK3'6DpW'mjl[=dM/YjHL7;*hKN/b/>%BDiN#_FW%CZg?&i`:h"[(9YL/Br_dZ!+VG!q7ML"qA+;bh8]B#N&,[_+s.;:C-9YaokR
%@4;J=BQV;]l6M1`1jHJ?&95kSc9s5_T&q%p"-,pRig[$)nd"^^Uu!BuA=mW].&6OZdg;b?#nj8T\3,![Dd8M#?f!g6[a^+l@s+4f
%ouOsRki2u.FA'DL&G;\o>6:ZHP,t<I1Bn[%JM7'qW6uc\!/i'E^"<1'+n[dVpUAQG:C$FI`qnTT"$Vu.Gahu`Rt19ERc80Bj&NhR
%P=^nGWKXgEPtr`8OtePZ1.X<g1IuT9bX6Q:[B/H@eTpjmEG2t2@"H4M0h>?e$9)`^%]'NfLn74@cWFa@%ul<R73Jr^^f$c`7%aE'
%mtLj)[[=l<QXqlAQI)X/'d]4_<a\S6pDtD;L#k3F`C%",$<coLr=<aq$HMR4O[?ZQT0V776tJF]Y,TecDoUE9=n>$u@ED$Y:ng53
%T$qBH5RCYQ(7->96!<B.52@04b1_jsLkhXhDd3MNAX-`gb1/Jl81b+_iqZ=bNbmr:la[f<>b60k$JJBiK"kE<_Y/P+4flL?<>>G0
%dKh`r$AaupmMs[)=UAuQ*G][2f0!>3?(dMF10f?UcQj\kZ6Ba5mX-OR&uT>C/3om8nK!YV]hZoXHC>S#(L#k:QY*3b6=+VfFcm'2
%s'n#FY')m)8d1%63"Qqg"QZ/9KWS(J.4L?b/tN^d2+k1X?6$e^Bl[6#2Hj5Nq1-8[HmWW_Je-`f$q_g.2`AT",$4>TfN!/`=24ZS
%!Xp7\WsF%*h@Gf0j:2>8X+)iMQZ+A'bL$Kt.,!`&Bm6\bXk6QsQjGM[UBk],erZeEdB;S[%-e8ZG$@>jg7A78fY`WaRmm=3FNK,]
%2`j)3$BA@D,8-(Ol@J^dS!=4Q*srkWl;=N06HB^+LGl+AXog6C3^Ja8Z[O5..*:R*=r$KEK@^Afb'+iaF(EW?B=O>&RYHk90^=[5
%g'H8i/L6X9,kE'_31RQPUt@"*KMgC/MrSG%7n2]G/K7$LWGfsTYicd!M2J)$AatNO5=iF1Z=f4!L[f/qiNiRq.fp3_S:JNPmjI$i
%?0R,@hK9ZX2V/3W87HTV8V55Q6CPfV_+O8>j@82a#$VSTDrW9S*iAhK:#-^gA<%W!19`Ua#g"W;[#B%lb*TuC&9@+h.1d6[P2ZVW
%9YkBo6_.f$f\0dLNhc,"/0q!_@%W(V7oXfR_<C9l1!lOuHWNTbBO#32r3d,p6@AGK;f`_l!$$o+-X-SoKnDG>7tmJ`8"B=tX0_:M
%6Xd%6Ak>m-`lEmmX"*TS;PbN^F!RP"6l,pnLkqbjWB"&AT,\WO2A[?%"bnjY>Kh1mnW8g6)+!D,=+NVu+Q4Yo.+8HJi_<"1:JDWd
%-u1]W`eW,\"h)SgN2N^Ri3,n_3SIaZM7RdWC=]L(Tu=p%l7O:mF#;I7b+?UV@6qG52;GYpTsB`/N9OnTU6nd1M60>ZFt_I^.dRkW
%F/mfe5*6X\P)[H@l>g`6l&Q<bD=^q6[gb4YYYc.j`^U'(^d(,*`_'SlCg:b^<-)\s#>/o@96_*U&AtGI%*P/M?qK:MAiGAqIjKJh
%=eTQiV,6-S(QoP6:X9Yp_BQ>d5h2TMgC0GP.Hco^[Z@qZ-h;&]qe*4j<6LHlDDe`UMY</#DGGD.!'ZXB/U&XNgH.%)NYTCRn;l2\
%e1+<&P',dp^'o$f16X1l?)L1#f2&@s;lX[FgIcA-6:bd5.RonK-l;9+.GeTmCo`.#a6niu<tg(K3*8d0"t;$km3402)C@2r-l3J<
%%5F"mGthKiTlDh^1J9?6`/bOp"eEZISPifNDju,2b#N(rhoLEA@A"Ohl.\o%X<6a'/ll3#c;GrhE[K8B!10MAX=Ln2`Pt!i1/Ce)
%;s:7!VIGh6:-(lSV0/#:iM9MnM=9Y*>>Yg<0eK[F=LHEq-+%oc`KJa&4YeR3A.5FA\a>aH_96?KZbf4>ME8VGL'L:[I829u_igoC
%-#B>*6IL_";,s6LHTU>;/h-%hr>Xq1I1d:J@`8q-`OV[L6gd_@dV1#WE22!fi>#ph#3rJu29f<:Y-VC]FeCud$+6UCWYR3cWJnS;
%POSTMLIh$K^\l"\J#5$hZ6N$<V4D=-%sa]AH+8:pc.Tnm&n50GOb1H6VU@KiI7?Nm:^*?'Yi^!BO&0-ij1&Du23t42QC5ClN/HS6
%D`b$iBFoE_cF`Ab-CGH3+1UOs;Fgr;,uMl6I!Vc+l3M!lr>QhV'XErT]_TMG?K\%l)@cGoE%6?Zpj]HX*i&s+VAt#K.Wa&t()&7?
%B+J'BhgGnI.Ri,E5qS&H1V%AQ>gQCQQN*p4LKU?Tg,fb;bABrhl$s@%7nmt8Pf_lCG'=:*qG*RDa96h^]'Yq0%aa><9ibC^eAd;`
%)fJ9qWR?P'd5d1`=[OO2V]PSjY<PdM\kLN^BcGTJ+,gt'P6e.Zi4'b0KeU@)=.47u!KP,,Si"dbW5"mppKs<n5e3qab3<sY\`ZJ4
%g?tl)"fXnB!_J7FN\"8bj+pmW)q6>2m$D6Ade73C20l'F_e+t$McS,R*fPMn-"Z\+(XLo\1m=kQ"TlAc@"*<qO>Pou?]t+4Rml_V
%UE<U^'LC![hW<oqKc/j_)6KDBf<%Bg'm2DL[8N:g`g*:u31:U5!BpkrH!g6aH0OS)dllC8WF24WFp.)P3E_JCk6AcQGD,^&Q;/&6
%kK#%/(GTEEfB-cgC!GUkJb(E)Pa1Y;ok%&1l"K8:3hjZ*-Ro\u\+F$D!jhS(-PT3X`nka003gogKi,daBId%cA7?r\"Ud.,QVCOY
%NfuS^,iT*lBKTld_Wp`u&gL5^-E0heeE$VR2U<On!\[34AdtG\<KgOir'T4MdZ1s/]_1's3&,eYR,O<,kMk$gYo#'Z/]J15pL)BM
%W/j-Xht3?M"BUH4Q3"$]<*fr]*YQMnaR1eV2+<k<9!GpSL'='h=I7s[@tL\=<91!Mb-0=`BkuJ7:hAeN?7iF`Y.YEQR)qd^9kINk
%c:$op+fQ(%XSSOYEdti$"CGHd.%R-/brahmRR7:bMs%T]R)PosI(bIha/UWnnsd(qFmS?dR#D=BE^D.U@puk-4uk$40]#ud9dF7B
%aect#f2%[nKE=n+QMIamb]u.#c(lb>KQ\.ieM'<o)oY,+]m;6_*nCD\6MM+udVi0W_:G)_hN>L;<ao<+c$)^33`agJ?FH_hMAb&O
%'Y9JblS3Y[Z#d%s(sru,[6cJ6o,,60Lp'"k>ukYLLKX?M`t19J)FE_&:9R>0KGRTjZgBKq55rAWQ6!(^>F8M`f!bIh0G_0<p_qj2
%\5<k%C0:A1a<jnIoN\CCO;an[RS-Ad7XNF"A^oK:lfFcL_t>pY(;$7MQ#=^:P>RJaGsE,3BMK/*(+fUkr$<L69P\QO1If$W8pHWs
%iPj.nY4.8dWTI!0@$\&HX.?N["Mbkkl65NUeL82&N3>G$$"sJiR>^pb5$F=S):(Vp/N[TOe2;i2_ae_6FaB/A^"\OB=^-n%;1P#;
%&Of29I?`9Q)'_R8T5*k/fBA)F;_>WaC=DFt<))q;7)h^+b%XW&F'W97E0YL$`j\h7YuO>%"0FD`qha"T*Gi7brT4_k34eaA'Ijc8
%0C<Z/Xd&PmKjX7SXjF?eKr=TY3/Yo;bj[bAN9!6a1!NOQ4c]*VanY\rr](=[2h`,LI7tV3!9uBJ1MRBmX*7]O:-*2AoU$ro+0%Hd
%Wpi-5%m`l7`Mp$WWpFFPUko"*.-aX0PJbf__d3!H0q#HuT\behXCRf\6+(:t8Q<_k9`ip)d&f^!_]nYS=J=:lP+g\Xq@Gft7*5&O
%X&h1;XDn_g;c-2t6'tK\*EO\_?D8p\,LOFU8*T?bnZF,J,CM6)k6`k\N\H;<7g=NP7nK^#>b6/m,K+oI-7epJNS)1.e1mn86WHEa
%V;o*GbSUH:FreUBD>\hdY$ibIH"f-Bb%G+iMoD/dK8dV?+^7isPu;g/4f$H9`]`p7)>l-O&W;;JVA`5\j[7FT<#)La>:$B6V1o$>
%*j#i)J/0365"L=6h3UGHZ7>)QnYmGo"gofXP+D2^f8tBTL"K6IeCgn;\r,UFlr+Bk9qeElQdL=oi*Ye>=k*Y4&J,,4eu>r"8<)e-
%!8-naY>B3^:,#Q+?MdfQV\V1=@Y7l@auHF1F?;W7l,'VCbGi)<FqCeJ7<&,B+H_jbfod)HC^rO.iGcS.QBa18$?0eUek&m&roWV1
%r6kFsWkbfdo?$gI_-IH:m<F^nV)7Pj:PDS$D#,f=+NgquG77K&(P#8GiD[I^YMlG@EAD+rdj$l[c89?QXr'&;K_Rat4mhgA8aVh*
%af0=.Ba;;:Z[t;ZWt;7\YS!mdfNL.^K-j"2?]nURWMK#>d)_ekAUH2tZLaW>eOBD#<<Ft"PrE6H&?Q>BO]Ym<4>'oamJ7/o0CBUX
%5aO`EIp!4ba@JHP!rYl#pOpDk2-Mt1'F7ai+Wl</Ut*dtT5LTT-b-ES]u&M[.-->7M3u0-,pcFt5k/O2/iks;WUj-jeVP''4fsk*
%>gSYXep4.*<FW?r+>,6#Lj98p6![g2%/!M_V"`mtLL!O0a%'&9SR'sCNmilB'o)6Z]`;6RG,f;<kL"2bE6o84)J,s0i?e-(1luNU
%)\qO:]tjpab9FI#<<e'3]j5%dqLp29Gfue?*"L!iiIO]h:A*f.^+*?d#U>*1jbN,eZ_q*6'BGj')(cmF1F^JM<]-15]_LjX3t@_A
%G"lN,):SY))H8\i;WV_)LN,ZJg$:X6%FV&&6:6=MgYn+*@,9Na#\FC3hgMAN_XOV$<u/6!fk'/(T<EIO<Wfb>i3!A:8kDV:,6]'E
%i1dNW5q5%93Uhs0Ff&_'kU4GMFa`m*C;\QG]lXll[oV3+[/C4(\(;QL%uoTqoi>9+:&[WYA2E>9H$tHM\MsjEoa'b-[BXH?MEWm0
%\l9\`E=4Un^#`of:u3^jZ'Te*NIlOKMIRpY+0"9t[dQ]of,>/d,kLi;fT-S1,<=p:\7\ZuT[9JMp2lR.Q4dk);Zj*oA7DUq[T+?m
%bZuIOKI_c*jWp178h5b`*/,S$H4>#"='E&^Y&%ID2OVG$i?0-XBKp7qD3YD>>fWsVkLB7ZKgggb6\niSMeJ'E3+6'EeniB,TK[C7
%3Y;]V8p8LHCiDBlUrtTpq!$"4=#6b6Gq"60>tNLH]t#tJ9nX+jgA82''F+%B;FU44AX%a%e=@L6oJh]k1[!+&.!<K[5S;qA:G&/2
%[0ffK`*,.`BoC/,-255GbZJ@_WI*Y@YeQLUj&?st"]LAqihU_*Y\G+K38Jql]'EH(F^hK"*/?6[:hZM*0&$Vr3(T?6;IZ.GU]\kG
%XXJ^+'m#QhXHB!KH!W;\6BF`QTOi#*mV9#AX/`BVUI00,TS\M:23+oH`a*.RO3(HHCIOUnL@lsG9Kg'X1&&j'i=A-=\j&jt[V<dj
%))\]48bk/;,FE!r"adne'W)2(jUpW`*BJC-a<8@ZdCjUt'1@ju!D0W>Q5)niFqo/7m$>_0a/Xp1018J2h-h3LU6m?D'bOL@pPa1P
%6o&?`D*HF_O2kQ99;KVj*p7d/$O]U)pI6#S%G>aaC;iAsOKs+hiU`hF#)nlpK1V!)e%YZ,YgE`"b,4a/7a%m!_tHA[S/R]cGMX$E
%7ou3k`VDMs.3;F%384TSmKMtrS9@Y<>I(9b;8c'>P,q2RLaPb`YG_H/3u#a2IXZ.4#n0D8<)jce#^2(M3i2fQ5e[J^L[E9Dnfhjc
%pr;SY2scKPSmj6Z3[C4b)."!XCuFPs`E(tVL%sI5,N/VJ5hU8iUFmpDp^PC*SCNuY(PV%NQEFMcTA5F@'qU_%W>Zb#:q]>'A!;Oq
%krO0%i@c`s0,NM5&$1^@Pt5S+2NEMqDX4mcWVnFaI`MgnF9L.-P#4KP(qLr)gVB?"A0d*tM6LVFb5k@X+*K<`6m%elnm?_rb@(P\
%;+sLVoVkK5!O2IadjaTF*St8K`TSC,XH)Z(;RDRW!d3EL@kCP9a<GId3M/aeGBEi94mf]08?Reu)F8TC^!Lq%:`),d8ja&9/8a0<
%1BOO5fi+uj4<lSbAt3@:2,Ei%OG[tGKcR)p!1qk<YNCc[3)C+JBqU-&-n%MaY`%6J3RG\>Gk+BU<:lhcgU?G'TqO!-3mpH*l*N<8
%X\gAWlYk!nqAD+qLft268B!WuPnL8Tf4qe+b9tY8<Vp@NhM)8\0rq+7cF<4_o#b$KLK/5j1]SJqN6'(V-21LUO`,%'O,l"j.n:)'
%FtQM/F;:I[V!Q1%1s+g+l8gHm50Hhh8JHQ0%M%VeQ]Td+1HQ2N3r.=WH#,*DX:8@@^Ti6f+fV0S^s592k?3[(g33s!;1'Mjac[&i
%U7d-KXUg$iLD*Ya_)l=?f[DB2DTI^q6e^l-^fC)1&JQaXI-S8uHD@Q?[s/?bj2,7FhaAaE,+Ig@2KBP"?>n.%T:ZfT#bSSYN?N$%
%b9oe8E4!48;B-$dH5Wc2Gi,9ZAe/U<]82M.g@KdnjqE("CBr6uT[.]k7s[b#HC=p:[h(KWk$pX]a2D4d]7m'3#eeUB>@[FndAYP_
%[KB7V$-\Y>/=!L:3+c@I/b72tE00]b8M0Dl8jm,-U52.mm`$NtCEILFJBDMFWmN!Rg%IFU4hZMZ=gE>f!2gGn!'S`-.[Y1J,_1n*
%R`b16SkcS!\t"^d&*%.-.d+o$C/=M)>mb0uNeT(97^pnj]>+_t3KitT$q$:qkqCVC_Ot=IEYdr\..MHDB:l$NUAP\C8:e/477p-A
%73nGFSLe93Fai,n%KKcsKU%KZZ-N&H.9kinEN>s>O*57!<+%Nal-`6Wa+in^GGpiD=09ng/,PhVaqe^<FeLO\q6i0?e0tF"dfU>J
%QZ9JJ[eDgQgPQC5C:8]AfV*BWN_k61_=!lFYenp'jk3tDrE"@,lYf-.l74?9kV)gHl'eNY*bhJJ]`bufWeBT"I5P9_^c%O`FmE-E
%*E4Z'(29")&S\07\ApHQTR<doeah,RU\ME_qcPE6=-DaSm#5W\T7]jLc)jBX>oe7%VGR!q`2,ML]s_7nYre!GT\&5&e=!GF6V=)5
%aI3Of5+n3l=qjfWB_>^"2T(4pY!\`0^+H=rgQ8O:DG(TG/QbD9D/?+<AG[Y+b_2Eh]oX"Pds*85hBTOLMG,:['V,[m/BdPq_*0E:
%Fj)ja_^`],FgBGGkf//kRItuc[a[!4F#flEpTuV5%X3U\Vf++gf1gC+eX^l+Y)%_/-Sug=.^^bJaAJbj'O6luc5pg13C9OA3[\/T
%iT7Xu;h6U[ZDf[A,maW8's9rjYYo1-+>X?f,T0J$dc:g/^`nl9#/3n;_*!!2MjdL6[SW>_>tjcA-,iY+3M7Jn[Hb#2A4KTllV\ki
%\a5B[7(MEU"kp\DJ4Wk13gZs_c`K*[Adb6J$GG$[kQLs[*#iNXma_iJ72dbYcAlTb,-'+dNqI3hQgcCnZ(:!V0\Rhj(qWb45I'oc
%DgO--g1cjLN-iMTQ4c,OO5ANggnnBs4u_`UAW`RJF;M;0#cDZ'ea]^RYGhn.\Of)^&k<')>'tGH-$F5<?oUJ&q;0`Fb%cY'Y>UKl
%/QDG$C8;O0;"n!5R].E%-G6qKf/`n1#nKM'FUpUp;Bj`oi8a?/<YuVe`Rue8N*6-<IUCc[I4MmDa%9E:EWP_j*.E@`\$$M;f@Tts
%WkFtrm2mp$E:*uXTk=s/\,FiJ2f1$2n)PfRb=N"2OABh*P+ot=MVptYoq"64?Vl03Gt71$Nj(tDH7;l1.^2,A6W`2_3udNb7>ZX4
%.?A'5=Aj;V+d^qJXe9%:e"*QL-i>G@]s2,"m::;Wl*`@Q_[j]e$,LOTs*/a07<S:FOr;MCr-FESa0f5jf!Lqf-F)s@NJl?!WuIGd
%qe?KpP)_pGs'-VmhPqm`B_%CIr/RHU(G*8Fd\8Sf798iJdhah?op:t"DPuJ(YPP#jGj!CN%fLBOC5Ki/7A))%:Ns#<Ct3Ya-Zg@H
%Ch^BF!B?%'Stc;sQ''CDl^"5g`a_sX=o*74F[Cr@q15&WL]B%6\"`TV^ls!fD-u`3AuXY_AOSFt5<fi$__/GXH/Aj1O0fFccnrY/
%WOJq1G\*,hc9qYm5\(;FZHoQ]f,Tp73W&D+bboE#-L\OSO2nS%M+U!@Q/!Ue^d`-KD7>BmY./S1$gAmJ=0ESJptXuf`5rU>D!Q+J
%YJ$=f2bW/n=5D2&l?jYn=!q:KQeb8"GnDMr4sk9()&7m^E0N6NWiT#$UUdC/=mg*NrQFpiHjAas_bcDG(F3fC?BG^[@!7MFU,$pQ
%mJ+Znmcnrt"@N6@#6.^9XGZ>n">C+_B'PeZ@N2[+a`Nn=Z#b)%6T)aQEs^+uci\9ZS:]>US*#]Q^_nbQ;!r/J%i'Ui;Wu(1(d7`S
%eTS6tea;9P<ltq.!0S3^,8n#62%:>/\pa<E/8:bZ&85-*OU4^L.--b[7]92@8LXg9H^KkZpm5T&.C(U3#3fPdZ^.[V5""R-]JT//
%*BKQ2p+>i+RnCdNSWo"b?YI%.\8E-5)o^9D[hC(oYi8*er!KrKGtdd8FFMD+s1<%Ud#*gI^A,@UGn@MLVi&X_;49cg=-B\;e"r@o
%X<arL*f(AjoP2_UAaS]T7nRD<_^Lcu8WmX8$)[>V22'KD/iZQ,0Kn^hd77fQb'9du7gd$(Am9Ym$YZmo.gY]tJl@_N!8!uFNsss6
%g-ThTZY#4pTWP7PKBB5_7\LUQUk1gcQ0JW4UF(]D1JRU_bE;.uR3X5[ELnT/:9\6mn!@_/Qpa?\%Jll<F+emkY`uL[M)XZDbapeo
%b9'-D3:HDCWVZYS6Bd<ue>.pIE\nY2EeZi*A)KSMc*VfJL!2^l!EjW[ZO0FJ1MZ>UoteoDJGfO7ZKlbdl<'jC-)'m*,0.XP)3VS]
%4t@uU#DI&>rLh_3XZI;&(Gc[;:F@GO6rA2n%9_Te+dW6L/=J+,&JbfZ7Corg%P-il;Eeau-[:spkc_aJV3611l:d\Y<s<MUOql2n
%+-%Cc@8r$]:Dr>3$$c,kUPJG#PZU?Q=]Hr[bb;q/arNb9V>X=b\$p6+Q0u_O#a:9P;l:9,E_)0G,<^+N1BX(<l-Y=Pb$*+V1Waku
%i`_d$OBAA%RWX_(\t7q_b.ipKp_7okW$_gZ\1Gi6;oN$kfE<F%L^o1GCZfe<V3O?6WTAZF.uKam3$f4!dtOT'*"mT&\XO'^Vj?S4
%TEAGY?g$X_e;T6?^o?DYBT[J&ZoQ2Y"f(Gi@o9ei[Ve\jB6Pi04nIGj?/DI_^1c)jG4cUW?q%4Uc7o"D_ipnYWd-gQ\D_Nhm&,PA
%VE7*XoM?1F'mp!NDlc.jVR"%rjh&C3&hkf*GBL&Jn&gI>"Yh!rX8j5?3LQc(TKl4hNKE6/f\YEi80;)hd;8h"^s=lee]?K#dac;a
%d>U\Wk2rr[Y/.()(6c5.WdR9'rQt)f,oFnP-9VM/^309QALkm4WrKpi;lZQU<BYJq;mllA^<1r:XYJom',;<kEcJ9$HW9+*k#)2f
%-/(B-<ruhY\tY/ih1hN5H%nq-eKn=s4Rbear>lkfV6FftLf6]])"DhtcaPUK'I),e^;BpfQd^DDp2587%7W_d41$DNbmE.X6=d)X
%LPmuj[!3NEQ.)B1KT4LAoI6T=rGHQ\qS.FcmF1'f'L!e?NKVV(HkMl,JQ(b59JNuJT\?#dj4N9'o@%gbk8%cC+/Qs375%HlpCAOL
%!]"FPN0U-hPR/kAVUagSdn;1hlRXR%18F_7/fUP<N\tTHUj`g1S`#M"Ubm\LE`H0e_e!ZGfR:tu!D@_-oRN4<NRP0fBf2u'-%k=i
%Q5(ua1VfNNS785R!>]9l\t)k>I[PQ7$;iR\KLIg%FrEP(o_Oa@bDoV-9Ss2_3"ILp#2N%K?4ZrbabOSEWt84Npd73&_.EepX&Erm
%<s:T!1_T!g'lb`&;+SQK7B96aqbg1TMge\a(+T4P-8_Ml9pJNVq&[R]]mS5lIG+BND)W?$n%H2F\r2W=Y:Jkei3gj*<C3QN3HD56
%5h"+J#EAHVU(l09^SfSk,qGjYq(PNegMsDjdiA&;8S9!ma0$IbGZ[*l&fJKD>4H0_*,3/Z7B3.Pre\dYM]4[Qe9$jFE=Up=lmROf
%WrO8SG:'npI\Bcd3JrP;el$0S1:q)*Z=&!:A$<+:NZ?]cp!@\RKpVr/.3,"G!tIh_#)sm^/8UtX>73[sM&K2A%IhnW;%ZIDqpV$*
%1pHD@`8i#hY?+p957Tg7Cp)&s(fs?pB0L]#!C`F'@>M^Y(Hu.Lq5c_Ydg\7@9VGKIK'[/oPIB!\&QU(O&nV[X3q#d[&3m,1,l'@a
%m`j7\-oXSlf!=fh%Hb`XG'sa>/%3K<)87SfE&pfZR*%BEh(;=R@ZYHA;][Wof)]`M,ZFFdF]AR;aUs<K,"4a7o_VF/m]`gBi``--
%30dF"BpX^:<>.<)`)S1O8W<"Pdl3=BcPra1UtopR1>g.$b4758Wb4ERI$NH4m2TY5,:WDOiL@Ur_5b9D:o7VKj!::r_m*(i=QZ)(
%D@"B%I/=2,UP?qmZ6l/2&&Ke:ej]@#mgM`<(K12:'+_Rf&QiCr*rVO3>"S*T*a9aP?q2X%n;.hArBgaP1k8fQd/]:]ZueK&59]m8
%:Yu)]m+jl2V$g1^Vc*3N.qh@A!<#L#h"`KW:YV3_Cdf/I\RFJL=N!MuKF_[=;*3E0n=h+6U6Y:Q&DQ!h-Qi?[V[tQ=BmGr2f=rS.
%G'69<O4q`^#1Q*0ZT^pnVFQTc;I*b5k\ef7d7ITn4?L$K!usathBla9MNDonL!?mC)9a.SRDN]N0Ej0"'N,8B9foA(76S5A(uML-
%/A=M@*[*#Q*X2Xi`+Ee2%auZPht8+VV">AuPcf#C$HEOG4dp9=1/#($?dE9m&.C(@)0aNOk0XWW>4H$Chl.4j0*m[1Q:E)E!`j'.
%mkGtW*C26GP%$>TY]=74<<tYS3I3a7ZsV(JZ%l\C?Hi7u1!(hr@Kc=VN4E%(Qcad4,I+$`./B%'iS'Tl*\9!uQjZpR5CN*HT:T%P
%ClWj\pn;2c53uGKoVkK5)'ACHHT9h>>f2`i5r:,H@Ri<;d0NP.ad1od`7%MjZsr6r(kXlEZf(6>5(+mZXrlEE!f4j9*NMdh5>*_8
%e(KjT.%V9bg"Lg'4aEO0O9m&#J9aePr",QqKb^*YqVf=%)Y>Ae)+-3898Opr:/Mue<?_Nma<4L&NDWto9\PG3)+LW]1_oUT><3h%
%(<s=_<?=OMHnQAXQP\YId)JBaKOX\^KW*,9V[7lsS<m7f],I8&IVb+R+RD<[1m^5O[13D_!2pFV3f@JRiRfBW9.Q+"0d3Qen,ga&
%2=)/mB)O.+*+`V'D6IQB7b1Y((CTAFIfiT]O-:aB]8mO;h`Y;17O;AJ+l1F:%&:m!2_#Hpi>s:"#sWk/GCMn5o$>51=**uuNRY\4
%S%C<7B+qIJG"a/)[4KdBEa;<f$!.'2+ZSE!9,*I<)FaU2Z'W:L53IU\7LDkOQ!inhmL+1GFdX(GfQ_brY1g*p!_H=%#6M.W*,+\r
%kS+XP0uaX#(HQ*jYK[n#lD($u9L1i,FYVJm$S<$a\>e?2V/=*#"GHs?"X.Vb`;,K/a,Bku\DOMJW$bN#$4S@"Sf/uQQJN,ALG/(X
%<@S5"."$*rQ`2Ws,**tt#VDE%5^]G%)3ADVKlNXWR,N9-hir")p!:o>N5F%UGR2YN=8Dj`6DpK0BeX/:.49j).mnuG+r/,!kM%6=
%;J6JB(!;%JRt),1HFG@71h\^CCC.H:ir)YDT=f,(H+u\f\Q::h[JZ[]$kJ<lM[Bc3jKW8cfnb0A6D#cp`&:6-Cmk3'BQm8c><f/'
%^Y\9q%K^`$P7Y9;iq7[^BF)Qi)BL+R7A.pJ/^9\fNg+bl@)5,,dm9dXTlME:C(r)2Q"kEZ4P%g'h(m(hDsmd.9-uTm-SH$spYCpi
%X6LC_[&RO4$'[5,>3@FS&g_Wj7mF1<k+&SQS6eoAX>YZ#7OqR%/^<*bBq`E)-j)':n*V#pKe50fju!D#;RhJsGl&*!D(EcQ$g1:Z
%q^&7k"<Y,K3R+h?]elF@iY4SkL'CdHA.EVbSYN$nQ/HX7hFuXu8*6BA8s`S&8)D+\:L*\<4g.pnfY@6-UIu).LR;1rdH,[)?7B\8
%?o"*L1J)fN"20=fAs=DGV..N-T7MEkoEX/P!-P<U7_og`$YhUZP.EF:SYC4kD'[D\8rid=3Ndra'sRA`P\gC^f=o5XK#b+PLpS&o
%Q.'D""+gWBo.JM=XPf(QZs9Thg9qYB?*o!X2?6WL`BOgLTkA2WA"hgIS#Ieo1pkR&7?9?B=9hb:+j%SX("^M<U_<'C(@6/P5CkL7
%<oI$JAAgN[Sq["P`:lR>lElAqO7s5WlTXirH_-cd-Z,B\7]54e9>=PI$-Y)'RKJrd]7IN5UqJbk@16?%$_*Bs>/T`sk%j)sgTq5?
%6c7=qm0+i'Yl(FiU[&'8JL@A`EdO%=k*!U%-#0H:TYWBIWqd2;m<g_+O($uk3^f!AqF0J7&TTG=(DLs+l[Il6IP6?&9na\\,EPAT
%@EJS'2*tr*58_].4lC^+E2H3RV>,ef;o*@.(Wg1Bj&CQ22*5W4bXX7N;#R%EB"k,D1drZ2<UBhFRTU\5?p`8q!RIO?P3'dWF4E=A
%BP?LDBua^`lcla/<8^mh[Mj6kM4[Ecn:)2HV$iebS(Y&L6gR/@;1OX+'QCEh%33#`@7H=i!GZkJ2djYT(A%/I3*XQ3o4$2O@Aj)H
%Iu3Y#']*Pc=NCD<lCOu2A!C/XI<(+F`ZPeWT7a+Ke+kg[00>/We"VK"7f=cu3h#Ms/e4NtR4/2VC`h@t862"KEn*O8MaU1%VpIk=
%I,1)PKWTXa&G7*WW[`2m*L(i&gD@:RTDaW\6JOtT-'UYu-c`7@[-BB6`ED/^CuJ8n@N7n)"\?nfIY6s_ZR`%&M(4nPfqQ,CEmZbb
%+OLW9_/HY&BUD\KpK=<tf]7`%),kiXWWr`P^tt7dEa1kFkaIX8!)#;Z\1]J2M0P$.U,Mp7C@Yh8QpY:k6GX8S&k9mB`2+DpifjK:
%HA?aO.k%dH<..L-HduWgW`o33-f4_b'DoCBjd>]Wa8Z)4YP;=oD>pS^V)?<+KJYWd'$ciDF\T_)c*V)0r0r&N)8M!WD1L>_C.?DR
%Y)1<,Vl<[IR`%M3k44en]Rtkp<l_1\)(fHR_cS]mSV,-`^e!kLW5g#2,G3,K[QSb)Pt92FoYQH>W4D?"pO6Ha_>_]PD<l(,=UWBs
%kDu(tTOB[FeFZV*:S:UW;:td"7i4;8AgQf1C'JcsAd/t1Y5h!j#miUt>2$b.9`a(i+l$o/j;)A#QpuSAn<nVD.jpahW=GP!Q^tH(
%=;;2pbk&gamBG$sm;P,%HNHsEYeLImdKsC1<nt&'>@9PfjK:;fJq@.E6].+B!A5aT=.9^PLf45QKPb#Ra.a+ull=In6Gt\#3A:OD
%GDop-iUlQ_3Sbmd*1s!@U!mLu?(ni!`**b=36s%Q.0/Ip\2D+2TJp2cnCQJ)/nlb)4Z':R0NHC9@\Z<r>E?+&oIrt(<f;%k'HsFV
%3::Sr]13%"kF*BLP:D]8+e"(a#V.-70`8dr=%'>e<_jXoflfC<i1bH$aHbN$$%c2-*Bd"TQj%W'=12um2l^5SkIVAm+*-!1h-.N7
%]@&EJAm-P&*UtK2(&A(>"n,UET!Z+I?p!/?,=>is&euMc_W30H7IHgEi;DF.7aYJIoQ)Jer+7VPfTe.<eE_<Rpn$6bPIi6(8+HKK
%(8o[g;,IPO9Pl6&c&p"_$`%`%LF[o-/@JnS!WZGfpi)7Y!f52.+6[EcFXou4bd)4?]F\(N&lf>$_[r-GF;k=YU+0^JGZ^-r@bq6p
%i<O-c$_ol>+=kZ4Pn@mI(A1euZh>:_FS/b&3N@@(1JW!'FsC`kC&EQH`q$++58s/cU'oSc9=9'jG,'kIfnW[Wc,L<J+N:HAQDA78
%0SHf%3dY0R_q4B(oS"Vs8mGk+`kBX@,QQ_)/GVJ*4THF0hr\ZM"Dsbgj',ai.Z0h*:Q.RKb^6Pi\Um8n-7?u;,:\n5+qmKn%kOSO
%U:T@$hXPG_[XW%\Y$hcGpO/"BCO&DjU[/KIY>f^N(()cm>t&?"eY&@R\&a5d[_SJ4iD-uuDq>KBYd$2UGG");NrBi[8ZKlW_?bO#
%&&SB<Z%tSd'rFpmBob>sGRj'l-a(CoH^e7)qF&G)%$<k35*:tH\nO2Cha\/\Y`oiuZd\^7^sBJ*'tY/Hkho+\`?br>.#q%]I^%rZ
%HPfh=P-U\_S<dU<52'HC@\WQWS-k.^HEG*H2EBJE20#^+a!uCMU"JW=(u)&83/&hSD&NDejrHJu=;Y`&;Mc'km6cm<5*"/bOD)E>
%^!B:'=lj`!OGjn?;=^IPnW/BEikkE\*edHh#7[Wu>&BppZK2eCBX'+&!e'V\2Ua[Ha`3F-*9!rW&YeC;<bP^)BE)n*"JdI(_!$<j
%KZ]mgS*7pqqD^Ls3*^4m3Fh?A6SY.<#;k+%\NVo.2Y:#Y!M8ZI^s&3@J<[p&<5"ZJ9c.7iSZ$9`I]3Z<=%'_8R;t/je.daj"gG*s
%adt.Us'8;[.C"U(/![X6NdKA_r7k7`pp:aHhpZ0J.fu4&Eq,Ql4Ms"2<a4bZ.+-8B;&I2oKn?t^WZ8r,^:,uTHMNON(>92oV?=WA
%O1MB^QB<EDR1CsCb%:.kYTobR7Bg:B,$SOphRSkljsR)TV&7oHHuf9(53"p*Ulet>E6HWOF;kJd_\J_-RKaA,HX"dc$VWs_=]ZS\
%`2>2ucghZq944O]'ACjVnIc3'!:,;a:D\=&)St02<,%U'>1X(CNl!PfHPsBNBf%V,.$X2t;Rd9*kjFVL3@G1VekBjBpU,H7E-j8B
%cQTT>_GCsd2*hmnMmBf)[bPG=h%o'Fqh3F+$Pol^)/Wthe`;m`R3)qtlSq@Af.]ic<O>ICF_h`,bI:KI.-Z*9)k%E(E+lE3JVhZI
%e5c+A\+TYu7oH]UCUWK<*(ZaV\U&BuO08%f!<D0Q3_t@$ZOE\b4\ROnRW*-@1]goCQBG]Ah/bU[G@4]57LH&.f"-KhD+/uc*R@!c
%B_tB*"k=%<`=3n#b"d_Jg+;4)PsE,2^t*,1?[&kY\:lI(?BZ!n\Mn5VD6e1t-a2=G#q(luQYVh5$L0s'#nkcd,50K0]rS3SfPt=t
%9TGaG/Y^+(ApYG3\8J@34&3<.q%ALW)!:<>Z_7Q\Aot+%;2cIj8W')qM1/0do9-p,/P;>=A$:DZ*R4\4Z%NWK<#V`Gn(Mp/Nub7>
%j.pPK;VaoLc<p5ejd;a<6,T30/c>6!Vs39^(pO:\q>T<PV%R+FNY#mdZq4=YoP95uf+oO+1iL9iH9W>u,VsPZaen[l'6"Jil*<#l
%74#Ch;VXqF<^+skB\E+TMl;?7\7RaqIP]gCR%j!1>/`=!Gg5l$3,nH2UjN+ZH2c-J/$1.N2ZbR:3$'.nD0tm[.AE,(HqeJ%&s68#
%-n84sVO^MK:u'eTaYm6VfjQ`TXVM@.XP[]p<%[C&4)31)_"(hk^8f##f6A&["r1[d0;VBX<S[sqO/T7rL(m4%Oa'F,;m'%@0/'*+
%jme[ti;%pI>K*!!KVfBd5'jF_]Ofos[ULY*'W'8s0mh,'%?M2sGRn/?p8_nQs/0&<s36mQk!o+-Eku]n[mCcm'a%>T.@!LXmu^.t
%A8;)!W4Z*sG*4mYhU,ZAZ8%aYRF>HD"!]i3N%q6UJN8bE9ErsI9>HMU;'OOZ;3>68&^`N\c_?p4QE%'3W+\.5$)Y)Ppq+s\]18nO
%D,*_"NI9X<C(4.m:++,U3MonXZ-3mt)c=@Wq_<.+n-[h@.S*-GHkr7_MDsX5e_`[nh=8&'\ArnUBVUeNF<eF^!>7YSapQYLa9CfN
%RAWUX"&+:^-/[XIdF2NSnWe#t/q;B5[ZWe+]m1J[bk%k=n_e1<ptdPO5Z.p;a'2^hU`mmiBSVDHVB^D:hu!,ahV\=fj)[FT+hfO+
%Y4m^tCrHDm?rN.p5"Jsd^`&hB@]OHal$UNJk%P!q]Qucs!k-AR-';VD,c[kZi%"Is&*iT;IBUi*<5PYI3Z_aBJItlk&d@j57#,VX
%JIUY<$$J7'LME@'U\WJDmq'?q1BH8c]k-OX29$+MQn"r0ST-oVD2HXO,mf)MUs!Zm+I%Z^.g'$@f>rT9MeY8o^$_>m^]_sN%*=6d
%]8-@Pr;9.RpN+fbH5b*.]O[VEW\]9Rfq3t#r<,Tq=hk`G:`>;LOqlIt9U(tZ(`u<a]tuT]/Y(*VPKQdlQS#6!n>W/%S#+*R/n19,
%lS;lKE%LhtXiU/IhXDIO9h7B`Rf\2-Np1BNC,>MMl48I#k'el0*tJ.97gtM8ELsfX=2>5gcZ25*Ks2=c<+o[e\Mkbf?/5Se*:GrF
%DD;Qe#"g1N%]btD,)6'@m!Qnpe&(@\#Pf\!<0Be!Ih3gG8!7PgDW21`!)=$</Ym)LPW5^uOH-9Qj'J1E4(*6jc0rFgVsgFRF:p1q
%!iN9oW=65`A4rFR,P!P%6s<SA\2M(OF0!S(R]h$n7QhqTPRAl^o=igkTc!?1Ead(u7[oB6*h+lQ.'AD?h%VJOO.*=)&0A-4/VUa*
%lgi*!ZHbGKfp;_FF&kj!ZF$Jf`VdaA;1CSf?T-$R[`M`*);cMf?/q=G8.h[27QfMs1sO9D(c-5jN['Fr696f!-!DV;T"9jdIa4&\
%aGE^`F'Q02nJ%.;9;Y0'MF#EpNM';<g%:r+Pjj>NPSnO[[b+`Y,Y=Ej:2B'PM%2"!btK5Pe;Z%'.6rf4.O((:m>M)*RMR*X\Pq8k
%3sqZpbKdVc?4Z>O,,IJT5dHcFrnKR$#Dfp2Qaj1>QZ?m!npoHSfCf\*"F);/XF=Rn")_Ime2K]o"L:@Oe[pJ+7`#q+>P?gn@*^WH
%>t5`nqCspt\2MY5Vq;Ksb*lqOeAIQTH6^ZW37f^OFB5c5l:DpN^61J&ppe+GXi)kqciRY/*J6hK03YV&/R@M"3Dr7EFm.<[ID!E_
%)jU]8.N`cu4DeC[l;XQYj_MHd?=sA*p+4L<6ch;4DeWUt,UMq0l#=f6)(D.,cr]R-&AX&Onib(k8@K[&C,F0_`S`:en"KkF!SXVZ
%9o_I`UEK?!+.E["ejR7q2q^k)ilN-*D+#qYL2"%<,N?QSAf6.mM:2"JXT3cB44(g*6>/f5(am_k\A+K*0:QV<0pi'R:"a['WC/Au
%Q:fZl@=Y;.TL4r2;T@[JOrqnjBF.[3CX9Nq!,,A#jn=,1#jQhV:2]81;p+`d3LEVkbfklP2/#G]g/U4Z[Bgp-32sCQ2'.l.+IB%_
%o=WY&CRKVfOC,cmO85J7KIfO?NZO%XBF4a2CW$KDT`RMs>R#&E,R.e@A-^b]K\:Dtl1PdLL]09oYNFu*c6aR6E%SR/\9A0SFJ+rr
%+9f-PO,3)n[XD&C73%F_o4\N6G5^NS&O@kK:e-b(==2F7^.a[?h'/OPJsRbk<)Qj.79*61ho/,6MH//9RAY@teelD_*1d0!W"q;9
%KkL[ei$I(tck_Ic*/Z#`MaK7"Le?/FJs?W*-q))-P0X]"]7)F#'fIDtYf/n$1f;*[l;8H0!UK&A+:F#r@-n6?!pUE3s/u\+ea.[G
%-NWGM$o:*g32Stb@t'O!Nk:ujfE<QK&B&J!Ek[1E/);GLVYXsi16nZ2U:tU-Ql/oO:%om2@mUaO.)_+iA'SWt;-9s?]G.AL-(/C4
%7hio,#2jQJ5?7_H*N=#p!Xt4Gm=mHMX"u<uJ2=!Ln,PpcX1fDddi?+:]c>ImT:)ka6e>?+<K+RB/(acnUr2'ZO\4,^FTI3*-$>]u
%7Gu7W\J"%m%^N?#dh/uTjcTa1a0"HRVp8jtYcB[f"PDhMrr,V.dCGjZ+<tTe5h<t7n'm7u?*]5V1TI>!f!m(@44^!dnrolW\E).]
%8N=Q6*6Y7o,d'cZ1^=gieC#J]Lt#p9RiPh!&35D`eJ5;Q:nH:9]:PtTM6^Vj>8.ZkWZ2N;6!'mf-g!U"&+ln?q$"D%o-V.KrPMQh
%ZnCWHdLqdi+dFGZXalT4WQ,Da4AdLamYm9M3XUCkFkMP+!l/(Q>''Jqh#dk26u?u]qNIIgnhJb"FOa0V2J9TGVDjCON2X>-\Pm?C
%3j"(aU8i6*=pFS$8)(EY,T/jg!Y+;7gCCCV:$Qc04<7\j@[L)R^')mrY0$ndPG&BTR;-Jm7^!!N@;IlOG]D5c7>p'@T]OSIHL&'4
%3X:&k!>U&#n5hF;eL/*<&ItQnX#etB0p3:SboA/SS'C/mjBZ\[Ho>Wco<*>bCotA1_P/Re,%KD@@H;)bk['b8)(9r/X=iQD.K_HN
%OI@m4-,ZOY&*,di3h.I./bL-q7\(,<SA^u24OGeDMH8cSTt4*X>g`rFrJXr@'a*G:3"Bh#rEfJgVs_u"1'1j`"/G=/;3do`P&c*F
%aGKddeS:YH!#+aC[me:,),u&?U2"8$W08f_1%)4lkSG<B?^UDoG)A$mf-?7]T=lT$>"at;Q?H.gkJG+2DTI?SLnY5GdLO!TUe/?M
%LnN9&S6h0"&krAT%A%EHYD^a71et:M22icB(:qLaD9H'?di^FuX+GNR3+n#@9U,8reYJ-,f6Qo"<Pdp^Jg^j98TNVp)liP?_;;B9
%Wm=0Hi9qf'<UKP%a/I@eX#V.[W&^!"_IHU'3iF[YU(AGo;`!=((S^HBMDBH/%MdeW5?;n>f4.g<2#IcI<-O0%S]J"6bG":4(&0WA
%>-UH;Fl>1K-DIXeV?%`EZ(tp.GQu-0dZfnA2;\hrcZC"\O,e\MU#NX4f1MdKSMhAFMJW:2CA.Lt%ta\=AjSMsLcE*4?lT[0+N6jF
%EEUBL&nNP,Bp066nIWJeN#QlZQ5'(&5NpjBZN2`uM(H>t$3@;h,`)g?5_O!oqa!i5Jl%#u9-rj;p=mV_'@EIP6_8PFXp,>L5LQ.`
%_L>ioNoXGU^=!$]@ReuZAj*/=UCo6.N$LX;V4pBS4$e&_i,Ti)O,SFl.9hR*q$t!ad\dh[Se-[hZtm+f2FD'[M-#<OYV%Wo'Xq5g
%#P4VdO(cqXB_SVYPp.9G^qUci-(;!^?gr\\6p(.Q20YB;%P.m=_B[[7XVcrcSbhuV9#??<V\hHpqjdIZYq-8WA"[_\!UaoB0iC[s
%`APoXa\pY32_&O-kHX@B*WhJd<7Yk%1l.lgZk_iW;@j-C[?7R3n"Q,o!?@UDZA(LK7ViXp-QEHMN["dlG.XndD:";ErAuR:7:qJC
%O<p?Ld.ZVOpG`V^Z^[it'Y#<Y0RbT@;*1!GFm4quL'-sA;Y)))b#4c%ehp*hHN"L&YENGTgUPd5\WUiU`tB9V6/_DCTLi&:M6a1m
%7X8G82RKt/hC<q@-(_i_qcJVO`@g>=Qb%%*9:EXUPB73'FO8H-M8U0Q0&n48hk.=4BZn*3eBI'c+>9DpF)FG4"E_)GZ6ZJ?@)(%3
%[Vq@`.`IMWD/fMM08cGYGqGu"EbsHq>Z$%B!PKIX33*p^R%bK6HrQ>2U'=&lOf.5\-1/tBW0V>Gkic!BlF;1BFR-$umB%1?1aV!<
%%>/CihF$DUMHF$"q28!jXop1dXa5#roiQeZ>MQki*k.A-Jmq^U^+L4.8EKSccA!XE%Yj@F-:eW_V<@oYR;F/8'c@phSdkgVUq!Nf
%O-X)Zd2I"D3?GAVCX*n)=-;'=52iBC5'6#=Rc5.e3C,%Q!;g$N-RFif3CUOjIdNnGrGpJ@)p!<-::ie&1$;6"Y,C8cj_Y2,H6=FA
%G\20n),Jq]bQE+tgq&Y'mKT+*KbOVWm>6dmWcWr6N(l'E=%iiY\5U5B&pIqr\ofG-:)%7C"l:J6X)k2M;e+]Vkge0kY8pjPRG4K2
%p;V?(-r83XOkefB.:r#MI$@H.&+sglk.K4*2\Ku&P/pB3"p3ri\;O6k,t]bo-H:p1#Qc!JU-__<+;82#*-gF4b8VO@!)PJ\pMNnl
%=-c7GC^%4Sa^`]O?%@N"[#;I`OKP@mo1D2d%@kSeQ"k*MF[S>L3.J:_ZYPRZV16`[/lSLn&>8j."8-<M.K122Aki)hN8rfaR:e]e
%g,ff8OZ%HuH<c:*DX^A#94i-u1aUEVHph"<W0SAT6i`"#GaQZ5<F8BHRo#j6TmpFV6u>TAKmJU2b9ne0XYhV+W<=Qt)0$KVedBT*
%d\b/hM5JsW--H4pD044sgt5MY\(_1-"2&fj9N/I>R,-1>3_c%E$>*e$&]k.kP#eJ='J$,Mlb\8h^QK:!UCRu5WfaLP^9p$cD5lN?
%N<htrYK$Ok"FY,_]S[TM!64<@Or=5GdQ*s<4Aq#jC%'PgXc87[kh_j['-ifXlN5ZG0t0dSX#@JU)f]WD-%Q\bmoRt0&EGHIdOg.H
%MeY<a*\F&pdAR1gjeJF>Ms`E![iu#C3N9%LF6Gkq^BRo:Z?(hB5Xt&+L'-t_Vc$>rh[lis.4D>-LH*7<a:Zd3%VQNcZC#PFpBX;e
%U4rap;-0umX)\]tMG/5J,`8c?8r!2rG_RaC*f'^Er;6pm@u:%K3h^NE1?0s_U=dg_.*9DFP=,EuVZWBk\br>'3`Rmg2Zd5-RK4j_
%Kk2`WY6b^tI7JnFF?qN)#[j3&Fi+:"WV.QApF<Js"qkRCUKUp<2$X,[%O]OP)(-mISH9JFKW,<V<@"^qW7CYV+3\K(k\:ar3L'X[
%mV,1kCg)BSC5IH_d32\gA3h^Y?9V5Vp$TCg.!lkZ`c\[(*]4u#j+-d20QT+'.efUGLj\CW.)2@4YH7e('l,((!?pN;?\eVaJ]B!g
%e,WQUrIIql84($kY&eP-;/Jr5&a7;)ncU+`5Q[LH`>P`deq:jAM_pZlKY_tLlX[4<eX[>QX[J=4E7<nn#d$@f<:kA:?Q&@CMWsUu
%>e3f2)E$AG%O"7N;H:"]-%TT`;IgUKJ;&eg$c91&QAe<)NMX<.T@_!UeL,*(")@eP/"KoUY)7>D6B@34IC_NeBl;oh25@s7LDqaL
%20k1B)Hi?q<an9\KE1]+0Teg/RnkVEV;>c'$Q_46h'cu&3K74U,UnRj,Kd8KL<D"0E?jEMKu3.tj[^TJh(Sm]@7lZ`TR'JcKY18<
%@oOX-L%?aYX5:FA6k(#kHO7o>\:IJnRR5X@,tC9(:^:ML6)MI6?F$i]I<qCf:WlY?_n3W&hNtS<3U6AI6_f/Z;=ku,jYE04PKn(q
%p:Q*)/*+S8ORo;`3>Oc.7WNo\E-ek[1QesM9MP6'Vm;KDT$U@\C5u@qU+c38?<eQdjn?BGXtPWHKl0:9]/)(^Vq+bn-JVV3W"#&R
%6,nl9hQDEKiW]jr#@l_DG!]$,&Bf"aK`E<R)qpR+"!WKZZ-'hUN*"jX*5mFj)`)G53_V:g\cu2L_(njOXth_U_'<BMF)_31ck3cK
%W^Tc.Z#Cp,*iD%uRN^bmPD#Hg)Be_'(U>f5gXXW7HIpV6W,U2,TgQUo3$YCk'qu:s)@'od43.dc9(CG,mK1qPNc!T\Yo30V`!$Nn
%qo+P@:eA;MdgSkkgbI;`TIA(nHK<fR^9qKRZ5\4VeGdKRaXHG?<DXK>N[/!ki=i9+'3dr#FkS6TF;Yl`oo[\\qLmrG7ou?!HHW?T
%G^"?*`WqQEO>i"aZ-prT6N8c^$32hEqZQH_WOk)]I.kWK-3JGXn?=F-c28tRR3E+sLIhdD2BYsBD2j+`SW)h$Wl*8h0C\kG;P7Y%
%?j*@MZAB.>;P'=@a6jMs2WuBY9L(*WZ?+\^m>UVkfK_h5h#8tuPe^%XNhGbI5GBXD'CHSEZ+P$&Vs!>_E$?Q!L-eeT$l,FgdHSP^
%PVI;F,0Q!XiIPkKAP;V+S'mTsOe\sSiT!*H!(J%a%IMGe#eS7'4G9QEn^^7Y3j*EP!EHN]$`f?fF0_,>74%=nM(3dcD>8*9a@Zc9
%2g?ID)crdq&S9o+(:AI_58pDVTITi40G6\ZiP$eU:$q?Ojjjf&qaMYl6p#pLnpgacedUcD,QYU5n4#7'UFAQjYlMKT5_dfu5'mcS
%"6RbT0't$h%89EZ)HfmbUU%iKD(&u&f@eS/RI^jG-6fG\KEq0tH>gjrX0o<P[#GF.0^Lrd[o6*)D5d75%0f3PmNojj%63&MH,du;
%5/*1"10(-WRhOf30`B[4a-T7Ve81MmM(#9<U-l'%AX8].27s[#ic(.!-)KtJM0AV5IAfbXXcn-GWrH%^@qQU9Z)7V],9OiXF;PYA
%4$&M+(o<OfObW(F[>6$#HE%LcZgA\ITm$jCYZ$E4m*e0(@ul,BdY/f@5EAOAS`]=*lmu<oNA.Y;A%[c?0ShGRO?GLd/@p7!`;jMp
%i&2K6OWuU!2"AOm[WA>ab8uC?U0M#_?;Ag"Z`5)HrUfRXnh:"-hu6@M^]47n^O>tH^O?.2]6BV"YQ!R+J,fIsroq$:IeWe:J,'n1
%s+g(Bl2,D5qsd1-Isq?(Y!7@+pHO*+LHke;VshCr_a"(u^Ik5imMl/jYQ"M#qEP#A?i7\!#H.t~>
%AI9_PrivateDataEnd
